%% file : GDFLIB_FilterIIR2_SF_F16.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for GDFLIB_FilterIIR2_SF_F16
%% 
%% Simulink version      : 9.3 (R2019a) 23-Nov-2018
%% TLC file generated on : 15-Apr-2020 21:00:39

%% Copyright 2019-2020 NXP
%%
%% NXP Confidential. This software is owned or controlled by NXP and may only be used strictly in
%% accordance with the applicable license terms.  By expressly accepting such terms or by
%% downloading, installing, activating and/or otherwise using the software, you are agreeing that
%% you have read, and that you agree to comply with and are bound by, such license terms.  If you
%% do not agree to be bound by the applicable license terms, then you may not retain, install,
%% activate or otherwise use the software.

%implements GDFLIB_FilterIIR2_SF_F16 "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %assign ver = FEVAL("ver", "simulink")
    %assign factor = 1.0
    %assign slVer = 0.0
    %foreach idx = SIZE(ver.Version)[1]
        %if ISEQUAL(ver.Version[idx], ".")
            %assign factor = factor/10.0
        %else
            %assign slVer = slVer + %<ver.Version[idx]>*factor
        %endif
    %endforeach
    
    %if GenerateErtSFunction==1 && slVer < 6.21
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink Object) may not be used in a model for which an ERT S-Function wrapper is being generated")>
    %endif
    
    %if ExtMode==1 && slVer < 6.3
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a model uses External Mode")>
    %endif
    
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %if slVer < 6.21
            %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a referenced model")>
        %endif
        
        %assign hFileName = FcnGenerateUniqueFileName("GDFLIB_FilterIIR2_SF_F16_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif
        
        extern int GDFLIB_FilterIIR2_SF_F16_wrapper_allocmem(void** work1BUS, int_T work1BUSWidth);
        extern int GDFLIB_FilterIIR2_SF_F16_wrapper_freemem(void** work1BUS);

        extern void GDFLIB_FilterIIR2_SF_F16_wrapper_InitializeConditions(const int16_T p2, const int16_T p3, const int16_T p4, const int16_T p5, const int16_T p6,  void* work1, void* work1BUS);
        extern void GDFLIB_FilterIIR2_SF_F16_wrapper_Output( int16_T* y1, const int16_T u1, const int16_T u2, const int16_T u3, const int32_T u4, const int32_T u5, const int16_T u6, const int16_T u7, const int16_T u8, const int16_T u9, const int16_T u10,  void* work1, void* work1BUS,  int16_T* y2,  int16_T* y3,  int32_T* y4,  int32_T* y5, const int32_T p1);
        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("GDFLIB_FilterIIR2_SF_F16_wrapper", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <stdlib.h>
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif

        #include "gdflib.h"

        #include "SWLIBS_Typedefs.h"
        #include "GDFLIB_FilterIIR2.h"

        int GDFLIB_FilterIIR2_SF_F16_wrapper_allocmem(void** work1BUS, int_T work1BUSWidth) {
            *work1BUS = calloc(sizeof(GDFLIB_FILTER_IIR2_T_F16), work1BUSWidth);
            if (*work1BUS==NULL) return -1;
            return 0;
        }
        
        int GDFLIB_FilterIIR2_SF_F16_wrapper_freemem(void** work1BUS) {
            if (*work1BUS!=NULL) free(*work1BUS);
            *work1BUS = NULL;
            return 0;
        }

        void GDFLIB_FilterIIR2_SF_F16_wrapper_InitializeConditions(const int16_T p2, const int16_T p3, const int16_T p4, const int16_T p5, const int16_T p6,  void* work1, void* work1BUS) {

            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GDFLIB_FILTER_IIR2_T_F16 *)work1BUS)", "(char *)work1", 0)>

              ((GDFLIB_FILTER_IIR2_T_F16 *const)(work1BUS))->trFiltCoeff.f16B0 = (tFrac16)(p2);
              ((GDFLIB_FILTER_IIR2_T_F16 *const)(work1BUS))->trFiltCoeff.f16B1 = (tFrac16)(p3);
              ((GDFLIB_FILTER_IIR2_T_F16 *const)(work1BUS))->trFiltCoeff.f16B2 = (tFrac16)(p4);
              ((GDFLIB_FILTER_IIR2_T_F16 *const)(work1BUS))->trFiltCoeff.f16A1 = (tFrac16)(p5);
              ((GDFLIB_FILTER_IIR2_T_F16 *const)(work1BUS))->trFiltCoeff.f16A2 = (tFrac16)(p6);
              GDFLIB_FilterIIR2Init_F16((GDFLIB_FILTER_IIR2_T_F16 *const)(work1BUS));

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(GDFLIB_FILTER_IIR2_T_F16 *)work1BUS)", 0)>
        }

        void GDFLIB_FilterIIR2_SF_F16_wrapper_Output( int16_T* y1, const int16_T u1, const int16_T u2, const int16_T u3, const int32_T u4, const int32_T u5, const int16_T u6, const int16_T u7, const int16_T u8, const int16_T u9, const int16_T u10,  void* work1, void* work1BUS,  int16_T* y2,  int16_T* y3,  int32_T* y4,  int32_T* y5, const int32_T p1) {

            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GDFLIB_FILTER_IIR2_T_F16 *)work1BUS)", "(char *)work1", 0)>

            
            if((tS32)2 == (tS32)(p1))
            {
              ((GDFLIB_FILTER_IIR2_T_F16 *const)(work1BUS))->f16FiltBufferX[0] = (tFrac16)(u2);
              ((GDFLIB_FILTER_IIR2_T_F16 *const)(work1BUS))->f16FiltBufferX[1] = (tFrac16)(u3);
              ((GDFLIB_FILTER_IIR2_T_F16 *const)(work1BUS))->f32FiltBufferY[0] = (tFrac32)(u4);
              ((GDFLIB_FILTER_IIR2_T_F16 *const)(work1BUS))->f32FiltBufferY[1] = (tFrac32)(u5);
              ((GDFLIB_FILTER_IIR2_T_F16 *const)(work1BUS))->trFiltCoeff.f16B0 = (tFrac16)(u6);
              ((GDFLIB_FILTER_IIR2_T_F16 *const)(work1BUS))->trFiltCoeff.f16B1 = (tFrac16)(u7);
              ((GDFLIB_FILTER_IIR2_T_F16 *const)(work1BUS))->trFiltCoeff.f16B2 = (tFrac16)(u8);
              ((GDFLIB_FILTER_IIR2_T_F16 *const)(work1BUS))->trFiltCoeff.f16A1 = (tFrac16)(u9);
              ((GDFLIB_FILTER_IIR2_T_F16 *const)(work1BUS))->trFiltCoeff.f16A2 = (tFrac16)(u10);
            }
            *y1 = GDFLIB_FilterIIR2_F16((tFrac16)(u1), (GDFLIB_FILTER_IIR2_T_F16 *const)(work1BUS));
            if((tS32)2 == (tS32)(p1))
            {
              *((tFrac16 *)y2) = ((GDFLIB_FILTER_IIR2_T_F16 *const)(work1BUS))->f16FiltBufferX[0];
              *((tFrac16 *)y3) = ((GDFLIB_FILTER_IIR2_T_F16 *const)(work1BUS))->f16FiltBufferX[1];
              *((tFrac32 *)y4) = ((GDFLIB_FILTER_IIR2_T_F16 *const)(work1BUS))->f32FiltBufferY[0];
              *((tFrac32 *)y5) = ((GDFLIB_FILTER_IIR2_T_F16 *const)(work1BUS))->f32FiltBufferY[1];
            }

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(GDFLIB_FILTER_IIR2_T_F16 *)work1BUS)", 0)>
        }

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %<LibAddToModelSources("%<cFileName>")>
    %else
        %<LibAddToCommonIncludes("gdflib.h")>
        %<LibAddToCommonIncludes("SWLIBS_Typedefs.h")>
        %<LibAddToCommonIncludes("GDFLIB_FilterIIR2.h")>
    %endif
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign work1BUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (GDFLIB_FilterIIR2_SF_F16_wrapper_allocmem(%<work1BUS_addr>, %<LibBlockDWorkWidth(work1)>)!=0) %<LibSetRTModelErrorStatus("\"Memory allocation failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% Function: InitializeConditions =========================================
%function InitializeConditions (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign p2_val = LibBlockParameter(p2, "", "", 0)
        %assign p3_val = LibBlockParameter(p3, "", "", 0)
        %assign p4_val = LibBlockParameter(p4, "", "", 0)
        %assign p5_val = LibBlockParameter(p5, "", "", 0)
        %assign p6_val = LibBlockParameter(p6, "", "", 0)
        %assign work1_ptr = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        GDFLIB_FilterIIR2_SF_F16_wrapper_InitializeConditions(%<p2_val>, %<p3_val>, %<p4_val>, %<p5_val>, %<p6_val>, %<work1_ptr>, %<work1BUS_ptr>);
    %else
        %assign f16B0 = LibBlockParameter(p2, "", "", 0)
        %assign f16B1 = LibBlockParameter(p3, "", "", 0)
        %assign f16B2 = LibBlockParameter(p4, "", "", 0)
        %assign f16A1 = LibBlockParameter(p5, "", "", 0)
        %assign f16A2 = LibBlockParameter(p6, "", "", 0)
        %assign pParam = LibBlockDWorkAddr(work1, "", "", 0)
        %% 
        (%<pParam>)->trFiltCoeff.f16B0 = (tFrac16)(%<f16B0>);
        (%<pParam>)->trFiltCoeff.f16B1 = (tFrac16)(%<f16B1>);
        (%<pParam>)->trFiltCoeff.f16B2 = (tFrac16)(%<f16B2>);
        (%<pParam>)->trFiltCoeff.f16A1 = (tFrac16)(%<f16A1>);
        (%<pParam>)->trFiltCoeff.f16A2 = (tFrac16)(%<f16A2>);
        GDFLIB_FilterIIR2Init_F16((GDFLIB_FILTER_IIR2_T_F16 *const)(%<pParam>));
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign u1_val = LibBlockInputSignal(0, "", "", 0)
        %assign u2_val = LibBlockInputSignal(1, "", "", 0)
        %assign u3_val = LibBlockInputSignal(2, "", "", 0)
        %assign u4_val = LibBlockInputSignal(3, "", "", 0)
        %assign u5_val = LibBlockInputSignal(4, "", "", 0)
        %assign u6_val = LibBlockInputSignal(5, "", "", 0)
        %assign u7_val = LibBlockInputSignal(6, "", "", 0)
        %assign u8_val = LibBlockInputSignal(7, "", "", 0)
        %assign u9_val = LibBlockInputSignal(8, "", "", 0)
        %assign u10_val = LibBlockInputSignal(9, "", "", 0)
        %assign work1_ptr = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 0)
        %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign y3_ptr = LibBlockOutputSignalAddr(2, "", "", 0)
        %assign y4_ptr = LibBlockOutputSignalAddr(3, "", "", 0)
        %assign y5_ptr = LibBlockOutputSignalAddr(4, "", "", 0)
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        GDFLIB_FilterIIR2_SF_F16_wrapper_Output(%<y1_ptr>, %<u1_val>, %<u2_val>, %<u3_val>, %<u4_val>, %<u5_val>, %<u6_val>, %<u7_val>, %<u8_val>, %<u9_val>, %<u10_val>, %<work1_ptr>, %<work1BUS_ptr>, %<y2_ptr>, %<y3_ptr>, %<y4_ptr>, %<y5_ptr>, %<p1_val>);
    %else
        %assign f16RetVal = LibBlockOutputSignal(0, "", "", 0)
        %assign f16In = LibBlockInputSignal(0, "", "", 0)
        %assign f16FiltBufferX1 = LibBlockInputSignal(1, "", "", 0)
        %assign f16FiltBufferX2 = LibBlockInputSignal(2, "", "", 0)
        %assign f32FiltBufferY1 = LibBlockInputSignal(3, "", "", 0)
        %assign f32FiltBufferY2 = LibBlockInputSignal(4, "", "", 0)
        %assign f16B0 = LibBlockInputSignal(5, "", "", 0)
        %assign f16B1 = LibBlockInputSignal(6, "", "", 0)
        %assign f16B2 = LibBlockInputSignal(7, "", "", 0)
        %assign f16A1 = LibBlockInputSignal(8, "", "", 0)
        %assign f16A2 = LibBlockInputSignal(9, "", "", 0)
        %assign pParam = LibBlockDWorkAddr(work1, "", "", 0)
        %assign FilterBufferX1_Out = LibBlockOutputSignal(1, "", "", 0)
        %assign FilterBufferX2_Out = LibBlockOutputSignal(2, "", "", 0)
        %assign FilterBufferY1_Out = LibBlockOutputSignal(3, "", "", 0)
        %assign FilterBufferY2_Out = LibBlockOutputSignal(4, "", "", 0)
        %assign showStates = LibBlockParameter(p1, "", "", 0)
        %% 
        
        %if FEVAL("strcmp", showStates, "2")
          (%<pParam>)->f16FiltBufferX[0] = (tFrac16)(%<f16FiltBufferX1>);
          (%<pParam>)->f16FiltBufferX[1] = (tFrac16)(%<f16FiltBufferX2>);
          (%<pParam>)->f32FiltBufferY[0] = (tFrac32)(%<f32FiltBufferY1>);
          (%<pParam>)->f32FiltBufferY[1] = (tFrac32)(%<f32FiltBufferY2>);
          (%<pParam>)->trFiltCoeff.f16B0 = (tFrac16)(%<f16B0>);
          (%<pParam>)->trFiltCoeff.f16B1 = (tFrac16)(%<f16B1>);
          (%<pParam>)->trFiltCoeff.f16B2 = (tFrac16)(%<f16B2>);
          (%<pParam>)->trFiltCoeff.f16A1 = (tFrac16)(%<f16A1>);
          (%<pParam>)->trFiltCoeff.f16A2 = (tFrac16)(%<f16A2>);
        %endif
        %<f16RetVal> = GDFLIB_FilterIIR2_F16((tFrac16)(%<f16In>), (GDFLIB_FILTER_IIR2_T_F16 *const)(%<pParam>));
        %if FEVAL("strcmp", showStates, "2")
          %<FilterBufferX1_Out> = (%<pParam>)->f16FiltBufferX[0];
          %<FilterBufferX2_Out> = (%<pParam>)->f16FiltBufferX[1];
          %<FilterBufferY1_Out> = (%<pParam>)->f32FiltBufferY[0];
          %<FilterBufferY2_Out> = (%<pParam>)->f32FiltBufferY[1];
        %endif
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign work1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (GDFLIB_FilterIIR2_SF_F16_wrapper_freemem(%<work1BUSBUS_addr>)!=0) %<LibSetRTModelErrorStatus("\"Memory free failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% [EOF]
