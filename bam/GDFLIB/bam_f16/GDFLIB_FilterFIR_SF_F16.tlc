%% file : GDFLIB_FilterFIR_SF_F16.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for GDFLIB_FilterFIR_SF_F16
%% 
%% Simulink version      : 9.3 (R2019a) 23-Nov-2018
%% TLC file generated on : 15-Apr-2020 21:00:19

%% Copyright 2019-2020 NXP
%%
%% NXP Confidential. This software is owned or controlled by NXP and may only be used strictly in
%% accordance with the applicable license terms.  By expressly accepting such terms or by
%% downloading, installing, activating and/or otherwise using the software, you are agreeing that
%% you have read, and that you agree to comply with and are bound by, such license terms.  If you
%% do not agree to be bound by the applicable license terms, then you may not retain, install,
%% activate or otherwise use the software.

%implements GDFLIB_FilterFIR_SF_F16 "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %assign ver = FEVAL("ver", "simulink")
    %assign factor = 1.0
    %assign slVer = 0.0
    %foreach idx = SIZE(ver.Version)[1]
        %if ISEQUAL(ver.Version[idx], ".")
            %assign factor = factor/10.0
        %else
            %assign slVer = slVer + %<ver.Version[idx]>*factor
        %endif
    %endforeach
    
    %if GenerateErtSFunction==1 && slVer < 6.21
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink Object) may not be used in a model for which an ERT S-Function wrapper is being generated")>
    %endif
    
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign hFileName = FcnGenerateUniqueFileName("GDFLIB_FilterFIR_SF_F16_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif
        
        extern void GDFLIB_FilterFIR_SF_F16_wrapper_InitializeConditions(const uint16_T p1,  uint16_T* work1,  int16_T* work2);
        extern void GDFLIB_FilterFIR_SF_F16_wrapper_Output( int16_T* y1, const int16_T u1, const uint16_T p1, const int16_T* p2,  uint16_T* work1,  int16_T* work2);
        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("GDFLIB_FilterFIR_SF_F16_wrapper", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif

        #include "gdflib.h"

        void GDFLIB_FilterFIR_SF_F16_wrapper_InitializeConditions(const uint16_T p1,  uint16_T* work1,  int16_T* work2) {
              {
                tU16 u16tmpCntFIR;
                
                for(u16tmpCntFIR = (tU16)0; u16tmpCntFIR <= (tU16)(p1); u16tmpCntFIR++)
                {
                  ((tFrac16 *const)(work2))[u16tmpCntFIR] = (tFrac16)0;
                }
                *((tU16 *)work1) = (tU16)0;
              }
        }

        void GDFLIB_FilterFIR_SF_F16_wrapper_Output( int16_T* y1, const int16_T u1, const uint16_T p1, const int16_T* p2,  uint16_T* work1,  int16_T* work2) {
            GDFLIB_FILTERFIR_PARAM_T_F16 f16FIRParamStruct;
            GDFLIB_FILTERFIR_STATE_T_F16 f16FIRStateStruct;
            
            f16FIRParamStruct.u16Order = (tU16)(p1);
            f16FIRParamStruct.pCoefBuf = (const tFrac16 *const)(p2);
            f16FIRStateStruct.u16Idx = *(tU16 *)(work1);
            f16FIRStateStruct.pInBuf = (tFrac16 *const)(work2);
            *y1 = GDFLIB_FilterFIR_F16((tFrac16)(u1), &f16FIRParamStruct, &f16FIRStateStruct);
            *((tU16 *)work1) = f16FIRStateStruct.u16Idx;
        }

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %<LibAddToModelSources("%<cFileName>")>
    %else
        %<LibAddToCommonIncludes("gdflib.h")>
    %endif
    %assign ::instanceCnt = 0
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
    %endif

    %assign ::instanceCnt = %<::instanceCnt> + 1

    %openfile tmpParamExternBuf
      %if ::instanceCnt == 1
        #include "gdflib.h"
      %endif
      extern GDFLIB_FILTERFIR_PARAM_T_F16 f16FIRParamStruct_%<SYSNAME(Name)[0]>;
      extern GDFLIB_FILTERFIR_STATE_T_F16 f16FIRStateStruct_%<SYSNAME(Name)[0]>;
    %closefile tmpParamExternBuf
    %<LibCacheExtern(tmpParamExternBuf)>

    %assign cDataFileName = LibGetMdlDataSrcBaseName()
    %assign cDataFile = LibCreateSourceFile("Source", "Simulink", cDataFileName)
    %openfile tmpParamBuf
      %if ::instanceCnt == 1
        #include "gdflib.h"
      %endif
      GDFLIB_FILTERFIR_PARAM_T_F16 f16FIRParamStruct_%<SYSNAME(Name)[0]>;
      GDFLIB_FILTERFIR_STATE_T_F16 f16FIRStateStruct_%<SYSNAME(Name)[0]>;
    %closefile tmpParamBuf
    %<LibSetSourceFileSection(cDataFile , "Definitions", tmpParamBuf)>
%endfunction

%% Function: InitializeConditions =========================================
%function InitializeConditions (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign work1_ptr = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work2_ptr = LibBlockDWorkAddr(work2, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        GDFLIB_FilterFIR_SF_F16_wrapper_InitializeConditions(%<p1_val>, %<work1_ptr>, %<work2_ptr>);
    %else
        %assign u16Order = LibBlockParameter(p1, "", "", 0)
        %assign u16Idx = LibBlockDWork(work1, "", "", 0)
        %assign pInBuf = LibBlockDWorkAddr(work2, "", "", 0)
        %% 
        {
          tU16 u16tmpCntFIR;
          
          for(u16tmpCntFIR = (tU16)0; u16tmpCntFIR <= (tU16)(%<u16Order>); u16tmpCntFIR++)
          {
            (%<pInBuf>)[u16tmpCntFIR] = (tFrac16)0;
          }
          %<u16Idx> = (tU16)0;
        }
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign u1_val = LibBlockInputSignal(0, "", "", 0)
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign p2_ptr = LibBlockParameterBaseAddr(p2)
        %assign work1_ptr = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work2_ptr = LibBlockDWorkAddr(work2, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        GDFLIB_FilterFIR_SF_F16_wrapper_Output(%<y1_ptr>, %<u1_val>, %<p1_val>, %<p2_ptr>, %<work1_ptr>, %<work2_ptr>);
    %else
        %assign f16RetVal = LibBlockOutputSignal(0, "", "", 0)
        %assign f16In = LibBlockInputSignal(0, "", "", 0)
        %assign u16Order = LibBlockParameter(p1, "", "", 0)
        %assign pCoefBuf = LibBlockParameterBaseAddr(p2)
        %assign u16Idx = LibBlockDWork(work1, "", "", 0)
        %assign pInBuf = LibBlockDWorkAddr(work2, "", "", 0)
        %% 
        
        f16FIRParamStruct_%<SYSNAME(Name)[0]>.u16Order = (tU16)(%<u16Order>);
        f16FIRParamStruct_%<SYSNAME(Name)[0]>.pCoefBuf = (const tFrac16 *const)(%<pCoefBuf>);
        f16FIRStateStruct_%<SYSNAME(Name)[0]>.u16Idx = (tU16)(%<u16Idx>);
        f16FIRStateStruct_%<SYSNAME(Name)[0]>.pInBuf = (tFrac16 *const)(%<pInBuf>);
        %<f16RetVal> = GDFLIB_FilterFIR_F16((tFrac16)(%<f16In>), &f16FIRParamStruct_%<SYSNAME(Name)[0]>, &f16FIRStateStruct_%<SYSNAME(Name)[0]>);
        %<u16Idx> = f16FIRStateStruct_%<SYSNAME(Name)[0]>.u16Idx;
    %endif
%endfunction


%% [EOF]
