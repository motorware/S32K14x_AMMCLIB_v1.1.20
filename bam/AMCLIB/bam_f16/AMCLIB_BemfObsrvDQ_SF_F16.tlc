%% file : AMCLIB_BemfObsrvDQ_SF_F16.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for AMCLIB_BemfObsrvDQ_SF_F16
%% 
%% Simulink version      : 9.3 (R2019a) 23-Nov-2018
%% TLC file generated on : 15-Apr-2020 20:56:42

%% Copyright 2019-2020 NXP
%%
%% NXP Confidential. This software is owned or controlled by NXP and may only be used strictly in
%% accordance with the applicable license terms.  By expressly accepting such terms or by
%% downloading, installing, activating and/or otherwise using the software, you are agreeing that
%% you have read, and that you agree to comply with and are bound by, such license terms.  If you
%% do not agree to be bound by the applicable license terms, then you may not retain, install,
%% activate or otherwise use the software.

%implements AMCLIB_BemfObsrvDQ_SF_F16 "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %assign ver = FEVAL("ver", "simulink")
    %assign factor = 1.0
    %assign slVer = 0.0
    %foreach idx = SIZE(ver.Version)[1]
        %if ISEQUAL(ver.Version[idx], ".")
            %assign factor = factor/10.0
        %else
            %assign slVer = slVer + %<ver.Version[idx]>*factor
        %endif
    %endforeach
    
    %if GenerateErtSFunction==1 && slVer < 6.21
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink Object) may not be used in a model for which an ERT S-Function wrapper is being generated")>
    %endif
    
    %if ExtMode==1 && slVer < 6.3
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a model uses External Mode")>
    %endif
    
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %if slVer < 6.21
            %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a referenced model")>
        %endif
        
        %assign hFileName = FcnGenerateUniqueFileName("AMCLIB_BemfObsrvDQ_SF_F16_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif
        
        extern int AMCLIB_BemfObsrvDQ_SF_F16_wrapper_allocmem(void** u1BUS, int_T u1BUSWidth, void** u2BUS, int_T u2BUSWidth, void** work1BUS, int_T work1BUSWidth);
        extern int AMCLIB_BemfObsrvDQ_SF_F16_wrapper_freemem(void** u1BUS, void** u2BUS, void** work1BUS);

        extern void AMCLIB_BemfObsrvDQ_SF_F16_wrapper_InitializeConditions( void* work1, void* work1BUS,  int16_T* work2, const int16_T p3, const int16_T p4, const int16_T p5, const int16_T p6, const int16_T p7, const int16_T p8, const int16_T p9, const int16_T p10, const int16_T p11, const int16_T p12, const int16_T p13, const int16_T p14, const int16_T p15, const uint16_T p16, const int32_T p2);
        extern void AMCLIB_BemfObsrvDQ_SF_F16_wrapper_Output( int16_T* y1, const void* u1, void* u1BUS, const void* u2, void* u2BUS, const int16_T u3, const int16_T u4,  void* work1, void* work1BUS,  int16_T* work2, const int16_T u5, const int16_T u6, const int16_T u7, const int16_T u8, const int16_T u9, const int16_T u10, const int16_T u11, const int16_T u12, const int16_T u13, const int16_T u14, const int16_T u15, const int16_T u16, const int16_T u17, const uint16_T u18, const int32_T u19, const int16_T u20, const int32_T u21, const int16_T u22, const int32_T u23, const int16_T u24, const int32_T u25, const int16_T u26, const int32_T u27, const int32_T u28,  int16_T* y2,  int16_T* y3,  int32_T* y4,  int16_T* y5,  int32_T* y6,  int16_T* y7,  int32_T* y8,  int16_T* y9,  int32_T* y10,  int16_T* y11,  int32_T* y12,  int32_T* y13, const int32_T p1, const int32_T p2);
        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("AMCLIB_BemfObsrvDQ_SF_F16_wrapper", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <stdlib.h>
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif

        #include "amclib.h"
        #include "gflib.h"
        #include "gmclib.h"

        #include "SWLIBS_Typedefs.h"
        #include "GFLIB_ControllerPIrAW.h"
        #include "AMCLIB_BemfObsrvDQ.h"

        int AMCLIB_BemfObsrvDQ_SF_F16_wrapper_allocmem(void** u1BUS, int_T u1BUSWidth, void** u2BUS, int_T u2BUSWidth, void** work1BUS, int_T work1BUSWidth) {
            *u1BUS = calloc(sizeof(SWLIBS_2Syst_F16), u1BUSWidth);
            if (*u1BUS==NULL) return -1;
            *u2BUS = calloc(sizeof(SWLIBS_2Syst_F16), u2BUSWidth);
            if (*u2BUS==NULL) return -1;
            *work1BUS = calloc(sizeof(AMCLIB_BEMF_OBSRV_DQ_T_F16), work1BUSWidth);
            if (*work1BUS==NULL) return -1;
            return 0;
        }
        
        int AMCLIB_BemfObsrvDQ_SF_F16_wrapper_freemem(void** u1BUS, void** u2BUS, void** work1BUS) {
            if (*u1BUS!=NULL) free(*u1BUS);
            *u1BUS = NULL;
            if (*u2BUS!=NULL) free(*u2BUS);
            *u2BUS = NULL;
            if (*work1BUS!=NULL) free(*work1BUS);
            *work1BUS = NULL;
            return 0;
        }

        void AMCLIB_BemfObsrvDQ_SF_F16_wrapper_InitializeConditions( void* work1, void* work1BUS,  int16_T* work2, const int16_T p3, const int16_T p4, const int16_T p5, const int16_T p6, const int16_T p7, const int16_T p8, const int16_T p9, const int16_T p10, const int16_T p11, const int16_T p12, const int16_T p13, const int16_T p14, const int16_T p15, const uint16_T p16, const int32_T p2) {

            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(AMCLIB_BEMF_OBSRV_DQ_T_F16 *)work1BUS)", "(char *)work1", 0)>

              if ((tS32)1 == (tS32)(p2))
              {
                *((tS16 *)work2) = (tS16)1;
              }
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pParamD.f16CC1sc = (tFrac16)(p8);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pParamD.f16CC2sc = (tFrac16)(p9);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pParamD.f16UpperLimit = (tFrac16)(p10);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pParamD.f16LowerLimit = (tFrac16)(p11);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pParamD.u16NShift = (tU16)(p16);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pParamQ.f16CC1sc = (tFrac16)(p12);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pParamQ.f16CC2sc = (tFrac16)(p13);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pParamQ.f16UpperLimit = (tFrac16)(p14);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pParamQ.f16LowerLimit = (tFrac16)(p15);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pParamQ.u16NShift = (tU16)(p16);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->f16IGain = (tFrac16)(p3);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->f16UGain = (tFrac16)(p4);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->f16WIGain = (tFrac16)(p5);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->f16EGain = (tFrac16)(p6);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->s16Shift = (tS16)(p7);
              AMCLIB_BemfObsrvDQInit_F16((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS));

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(AMCLIB_BEMF_OBSRV_DQ_T_F16 *)work1BUS)", 0)>
        }

        void AMCLIB_BemfObsrvDQ_SF_F16_wrapper_Output( int16_T* y1, const void* u1, void* u1BUS, const void* u2, void* u2BUS, const int16_T u3, const int16_T u4,  void* work1, void* work1BUS,  int16_T* work2, const int16_T u5, const int16_T u6, const int16_T u7, const int16_T u8, const int16_T u9, const int16_T u10, const int16_T u11, const int16_T u12, const int16_T u13, const int16_T u14, const int16_T u15, const int16_T u16, const int16_T u17, const uint16_T u18, const int32_T u19, const int16_T u20, const int32_T u21, const int16_T u22, const int32_T u23, const int16_T u24, const int32_T u25, const int16_T u26, const int32_T u27, const int32_T u28,  int16_T* y2,  int16_T* y3,  int32_T* y4,  int16_T* y5,  int32_T* y6,  int16_T* y7,  int32_T* y8,  int16_T* y9,  int32_T* y10,  int16_T* y11,  int32_T* y12,  int32_T* y13, const int32_T p1, const int32_T p2) {

            /* Assign the Simulink structure u1 to user structure u1BUS */
            %assign dTypeId = LibBlockInputSignalDataTypeId(0)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(SWLIBS_2Syst_F16 *)u1BUS)", "(char *)u1", 0)>


            /* Assign the Simulink structure u2 to user structure u2BUS */
            %assign dTypeId = LibBlockInputSignalDataTypeId(1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(SWLIBS_2Syst_F16 *)u2BUS)", "(char *)u2", 0)>


            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(AMCLIB_BEMF_OBSRV_DQ_T_F16 *)work1BUS)", "(char *)work1", 0)>

            
            if((tS32)2 == (tS32)(p1))
            {
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pIObsrv.f32Arg1 = (tFrac32)(u27);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pIObsrv.f32Arg2 = (tFrac32)(u28);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pParamD.f16CC1sc = (tFrac16)(u10);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pParamD.f16CC2sc = (tFrac16)(u11);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pParamD.f32Acc = (tFrac32)(u19);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pParamD.f16InErrK1 = (tFrac16)(u20);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pParamD.f16UpperLimit = (tFrac16)(u12);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pParamD.f16LowerLimit = (tFrac16)(u13);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pParamD.u16NShift = (tU16)(u18);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pParamQ.f16CC1sc = (tFrac16)(u14);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pParamQ.f16CC2sc = (tFrac16)(u15);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pParamQ.f32Acc = (tFrac32)(u21);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pParamQ.f16InErrK1 = (tFrac16)(u22);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pParamQ.f16UpperLimit = (tFrac16)(u16);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pParamQ.f16LowerLimit = (tFrac16)(u17);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pParamQ.u16NShift = (tU16)(u18);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pIObsrvIn_1L.f32Arg1 = (tFrac32)(u23);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pIObsrvIn_1L.f32Arg2 = (tFrac32)(u25);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pIObsrvIn_1H.f16Arg1 = (tFrac16)(u24);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pIObsrvIn_1H.f16Arg2 = (tFrac16)(u26);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->f16IGain = (tFrac16)(u5);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->f16UGain = (tFrac16)(u6);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->f16WIGain = (tFrac16)(u7);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->f16EGain = (tFrac16)(u8);
              ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->s16Shift = (tS16)(u9);
            }
            if ((tS32)1 == (tS32)(p2))
            {
              if (*(tS16 *)(work2) != (tS16)0)
              {
                *((tS16 *)work2) = (tS16)0;
                AMCLIB_BemfObsrvDQSetState_F16((SWLIBS_2Syst_F16 *const)(u1BUS), (SWLIBS_2Syst_F16 *const)(u2BUS), (tFrac16)(u3), (tFrac16)(u4), (AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS));
                *y1 = (tFrac16)0;
              }
              else
              {
                *y1 = AMCLIB_BemfObsrvDQ_F16((SWLIBS_2Syst_F16 *const)(u1BUS), (SWLIBS_2Syst_F16 *const)(u2BUS), (tFrac16)(u3), (tFrac16)(u4), (AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS));
              }
            }
            else
            {
              *y1 = AMCLIB_BemfObsrvDQ_F16((SWLIBS_2Syst_F16 *const)(u1BUS), (SWLIBS_2Syst_F16 *const)(u2BUS), (tFrac16)(u3), (tFrac16)(u4), (AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS));
            }
            if((tS32)2 == (tS32)(p1))
            {
              *((tFrac16 *)y2) = ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pEObsrv.f16Arg1;
              *((tFrac16 *)y3) = ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pEObsrv.f16Arg2;
              *((tFrac32 *)y4) = ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pParamD.f32Acc;
              *((tFrac16 *)y5) = ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pParamD.f16InErrK1;
              *((tFrac32 *)y6) = ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pParamQ.f32Acc;
              *((tFrac16 *)y7) = ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pParamQ.f16InErrK1;
              *((tFrac32 *)y8) = ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pIObsrvIn_1L.f32Arg1;
              *((tFrac32 *)y10) = ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pIObsrvIn_1L.f32Arg2;
              *((tFrac16 *)y9) = ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pIObsrvIn_1H.f16Arg1;
              *((tFrac16 *)y11) = ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pIObsrvIn_1H.f16Arg2;
              *((tFrac32 *)y12) = ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pIObsrv.f32Arg1;
              *((tFrac32 *)y13) = ((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(work1BUS))->pIObsrv.f32Arg2;
            }

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(AMCLIB_BEMF_OBSRV_DQ_T_F16 *)work1BUS)", 0)>
        }

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %<LibAddToModelSources("%<cFileName>")>
    %else
        %<LibAddToCommonIncludes("amclib.h")>
        %<LibAddToCommonIncludes("gflib.h")>
        %<LibAddToCommonIncludes("gmclib.h")>
        %<LibAddToCommonIncludes("SWLIBS_Typedefs.h")>
        %<LibAddToCommonIncludes("GFLIB_ControllerPIrAW.h")>
        %<LibAddToCommonIncludes("AMCLIB_BemfObsrvDQ.h")>
    %endif
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign u1BUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign u2BUS_addr = "&" + LibBlockPWork("", "", "", 1)
        %assign work1BUS_addr = "&" + LibBlockPWork("", "", "", 2)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (AMCLIB_BemfObsrvDQ_SF_F16_wrapper_allocmem(%<u1BUS_addr>, %<LibBlockInputSignalWidth(0)>, %<u2BUS_addr>, %<LibBlockInputSignalWidth(1)>, %<work1BUS_addr>, %<LibBlockDWorkWidth(work1)>)!=0) %<LibSetRTModelErrorStatus("\"Memory allocation failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% Function: InitializeConditions =========================================
%function InitializeConditions (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign work1_ptr = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 2)
        %assign work2_ptr = LibBlockDWorkAddr(work2, "", "", 0)
        %assign p3_val = LibBlockParameter(p3, "", "", 0)
        %assign p4_val = LibBlockParameter(p4, "", "", 0)
        %assign p5_val = LibBlockParameter(p5, "", "", 0)
        %assign p6_val = LibBlockParameter(p6, "", "", 0)
        %assign p7_val = LibBlockParameter(p7, "", "", 0)
        %assign p8_val = LibBlockParameter(p8, "", "", 0)
        %assign p9_val = LibBlockParameter(p9, "", "", 0)
        %assign p10_val = LibBlockParameter(p10, "", "", 0)
        %assign p11_val = LibBlockParameter(p11, "", "", 0)
        %assign p12_val = LibBlockParameter(p12, "", "", 0)
        %assign p13_val = LibBlockParameter(p13, "", "", 0)
        %assign p14_val = LibBlockParameter(p14, "", "", 0)
        %assign p15_val = LibBlockParameter(p15, "", "", 0)
        %assign p16_val = LibBlockParameter(p16, "", "", 0)
        %assign p2_val = LibBlockParameter(p2, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        AMCLIB_BemfObsrvDQ_SF_F16_wrapper_InitializeConditions(%<work1_ptr>, %<work1BUS_ptr>, %<work2_ptr>, %<p3_val>, %<p4_val>, %<p5_val>, %<p6_val>, %<p7_val>, %<p8_val>, %<p9_val>, %<p10_val>, %<p11_val>, %<p12_val>, %<p13_val>, %<p14_val>, %<p15_val>, %<p16_val>, %<p2_val>);
    %else
        %assign pCtrl = LibBlockDWorkAddr(work1, "", "", 0)
        %assign s16ResetStates = LibBlockDWork(work2, "", "", 0)
        %assign f16IGain = LibBlockParameter(p3, "", "", 0)
        %assign f16UGain = LibBlockParameter(p4, "", "", 0)
        %assign f16WIGain = LibBlockParameter(p5, "", "", 0)
        %assign f16EGain = LibBlockParameter(p6, "", "", 0)
        %assign s16Shift = LibBlockParameter(p7, "", "", 0)
        %assign f16CC1sc_D = LibBlockParameter(p8, "", "", 0)
        %assign f16CC2sc_D = LibBlockParameter(p9, "", "", 0)
        %assign f16UpperLimit_D = LibBlockParameter(p10, "", "", 0)
        %assign f16LowerLimit_D = LibBlockParameter(p11, "", "", 0)
        %assign f16CC1sc_Q = LibBlockParameter(p12, "", "", 0)
        %assign f16CC2sc_Q = LibBlockParameter(p13, "", "", 0)
        %assign f16UpperLimit_Q = LibBlockParameter(p14, "", "", 0)
        %assign f16LowerLimit_Q = LibBlockParameter(p15, "", "", 0)
        %assign u16NShift = LibBlockParameter(p16, "", "", 0)
        %assign resetStatesEnable = LibBlockParameter(p2, "", "", 0)
        %% 
        %if FEVAL("strcmp", resetStatesEnable, "1")
          %<s16ResetStates> = (tS16)1;
        %endif
        (%<pCtrl>)->pParamD.f16CC1sc = (tFrac16)(%<f16CC1sc_D>);
        (%<pCtrl>)->pParamD.f16CC2sc = (tFrac16)(%<f16CC2sc_D>);
        (%<pCtrl>)->pParamD.f16UpperLimit = (tFrac16)(%<f16UpperLimit_D>);
        (%<pCtrl>)->pParamD.f16LowerLimit = (tFrac16)(%<f16LowerLimit_D>);
        (%<pCtrl>)->pParamD.u16NShift = (tU16)(%<u16NShift>);
        (%<pCtrl>)->pParamQ.f16CC1sc = (tFrac16)(%<f16CC1sc_Q>);
        (%<pCtrl>)->pParamQ.f16CC2sc = (tFrac16)(%<f16CC2sc_Q>);
        (%<pCtrl>)->pParamQ.f16UpperLimit = (tFrac16)(%<f16UpperLimit_Q>);
        (%<pCtrl>)->pParamQ.f16LowerLimit = (tFrac16)(%<f16LowerLimit_Q>);
        (%<pCtrl>)->pParamQ.u16NShift = (tU16)(%<u16NShift>);
        (%<pCtrl>)->f16IGain = (tFrac16)(%<f16IGain>);
        (%<pCtrl>)->f16UGain = (tFrac16)(%<f16UGain>);
        (%<pCtrl>)->f16WIGain = (tFrac16)(%<f16WIGain>);
        (%<pCtrl>)->f16EGain = (tFrac16)(%<f16EGain>);
        (%<pCtrl>)->s16Shift = (tS16)(%<s16Shift>);
        AMCLIB_BemfObsrvDQInit_F16((AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(%<pCtrl>));
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
        %assign u1BUS_ptr = LibBlockPWork("", "", "", 0)
        %assign u2_ptr = LibBlockInputSignalAddr(1, "", "", 0)
        %assign u2BUS_ptr = LibBlockPWork("", "", "", 1)
        %assign u3_val = LibBlockInputSignal(2, "", "", 0)
        %assign u4_val = LibBlockInputSignal(3, "", "", 0)
        %assign work1_ptr = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 2)
        %assign work2_ptr = LibBlockDWorkAddr(work2, "", "", 0)
        %assign u5_val = LibBlockInputSignal(4, "", "", 0)
        %assign u6_val = LibBlockInputSignal(5, "", "", 0)
        %assign u7_val = LibBlockInputSignal(6, "", "", 0)
        %assign u8_val = LibBlockInputSignal(7, "", "", 0)
        %assign u9_val = LibBlockInputSignal(8, "", "", 0)
        %assign u10_val = LibBlockInputSignal(9, "", "", 0)
        %assign u11_val = LibBlockInputSignal(10, "", "", 0)
        %assign u12_val = LibBlockInputSignal(11, "", "", 0)
        %assign u13_val = LibBlockInputSignal(12, "", "", 0)
        %assign u14_val = LibBlockInputSignal(13, "", "", 0)
        %assign u15_val = LibBlockInputSignal(14, "", "", 0)
        %assign u16_val = LibBlockInputSignal(15, "", "", 0)
        %assign u17_val = LibBlockInputSignal(16, "", "", 0)
        %assign u18_val = LibBlockInputSignal(17, "", "", 0)
        %assign u19_val = LibBlockInputSignal(18, "", "", 0)
        %assign u20_val = LibBlockInputSignal(19, "", "", 0)
        %assign u21_val = LibBlockInputSignal(20, "", "", 0)
        %assign u22_val = LibBlockInputSignal(21, "", "", 0)
        %assign u23_val = LibBlockInputSignal(22, "", "", 0)
        %assign u24_val = LibBlockInputSignal(23, "", "", 0)
        %assign u25_val = LibBlockInputSignal(24, "", "", 0)
        %assign u26_val = LibBlockInputSignal(25, "", "", 0)
        %assign u27_val = LibBlockInputSignal(26, "", "", 0)
        %assign u28_val = LibBlockInputSignal(27, "", "", 0)
        %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign y3_ptr = LibBlockOutputSignalAddr(2, "", "", 0)
        %assign y4_ptr = LibBlockOutputSignalAddr(3, "", "", 0)
        %assign y5_ptr = LibBlockOutputSignalAddr(4, "", "", 0)
        %assign y6_ptr = LibBlockOutputSignalAddr(5, "", "", 0)
        %assign y7_ptr = LibBlockOutputSignalAddr(6, "", "", 0)
        %assign y8_ptr = LibBlockOutputSignalAddr(7, "", "", 0)
        %assign y9_ptr = LibBlockOutputSignalAddr(8, "", "", 0)
        %assign y10_ptr = LibBlockOutputSignalAddr(9, "", "", 0)
        %assign y11_ptr = LibBlockOutputSignalAddr(10, "", "", 0)
        %assign y12_ptr = LibBlockOutputSignalAddr(11, "", "", 0)
        %assign y13_ptr = LibBlockOutputSignalAddr(12, "", "", 0)
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign p2_val = LibBlockParameter(p2, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        AMCLIB_BemfObsrvDQ_SF_F16_wrapper_Output(%<y1_ptr>, %<u1_ptr>, %<u1BUS_ptr>, %<u2_ptr>, %<u2BUS_ptr>, %<u3_val>, %<u4_val>, %<work1_ptr>, %<work1BUS_ptr>, %<work2_ptr>, %<u5_val>, %<u6_val>, %<u7_val>, %<u8_val>, %<u9_val>, %<u10_val>, %<u11_val>, %<u12_val>, %<u13_val>, %<u14_val>, %<u15_val>, %<u16_val>, %<u17_val>, %<u18_val>, %<u19_val>, %<u20_val>, %<u21_val>, %<u22_val>, %<u23_val>, %<u24_val>, %<u25_val>, %<u26_val>, %<u27_val>, %<u28_val>, %<y2_ptr>, %<y3_ptr>, %<y4_ptr>, %<y5_ptr>, %<y6_ptr>, %<y7_ptr>, %<y8_ptr>, %<y9_ptr>, %<y10_ptr>, %<y11_ptr>, %<y12_ptr>, %<y13_ptr>, %<p1_val>, %<p2_val>);
    %else
        %assign f16PhaseErr = LibBlockOutputSignal(0, "", "", 0)
        %assign pIAB = LibBlockInputSignalAddr(0, "", "", 0)
        %assign pUAB = LibBlockInputSignalAddr(1, "", "", 0)
        %assign f16Velocity = LibBlockInputSignal(2, "", "", 0)
        %assign f16Phase = LibBlockInputSignal(3, "", "", 0)
        %assign pCtrl = LibBlockDWorkAddr(work1, "", "", 0)
        %assign s16ResetStates = LibBlockDWork(work2, "", "", 0)
        %assign f16IGain = LibBlockInputSignal(4, "", "", 0)
        %assign f16UGain = LibBlockInputSignal(5, "", "", 0)
        %assign f16WIGain = LibBlockInputSignal(6, "", "", 0)
        %assign f16EGain = LibBlockInputSignal(7, "", "", 0)
        %assign s16Shift = LibBlockInputSignal(8, "", "", 0)
        %assign f16CC1sc_D = LibBlockInputSignal(9, "", "", 0)
        %assign f16CC2sc_D = LibBlockInputSignal(10, "", "", 0)
        %assign f16UpperLimit_D = LibBlockInputSignal(11, "", "", 0)
        %assign f16LowerLimit_D = LibBlockInputSignal(12, "", "", 0)
        %assign f16CC1sc_Q = LibBlockInputSignal(13, "", "", 0)
        %assign f16CC2sc_Q = LibBlockInputSignal(14, "", "", 0)
        %assign f16UpperLimit_Q = LibBlockInputSignal(15, "", "", 0)
        %assign f16LowerLimit_Q = LibBlockInputSignal(16, "", "", 0)
        %assign u16NShift = LibBlockInputSignal(17, "", "", 0)
        %assign f32Acc_D = LibBlockInputSignal(18, "", "", 0)
        %assign f16InErrK1_D = LibBlockInputSignal(19, "", "", 0)
        %assign f32Acc_Q = LibBlockInputSignal(20, "", "", 0)
        %assign f16InErrK1_Q = LibBlockInputSignal(21, "", "", 0)
        %assign f32IObsrvIn_1L_D = LibBlockInputSignal(22, "", "", 0)
        %assign f16IObsrvIn_1H_D = LibBlockInputSignal(23, "", "", 0)
        %assign f32IObsrvIn_1L_Q = LibBlockInputSignal(24, "", "", 0)
        %assign f16IObsrvIn_1H_Q = LibBlockInputSignal(25, "", "", 0)
        %assign f32IObsrv_D = LibBlockInputSignal(26, "", "", 0)
        %assign f32IObsrv_Q = LibBlockInputSignal(27, "", "", 0)
        %assign f16EObsrv_D_Out = LibBlockOutputSignal(1, "", "", 0)
        %assign f16EObsrv_Q_Out = LibBlockOutputSignal(2, "", "", 0)
        %assign f32Acc_D_Out = LibBlockOutputSignal(3, "", "", 0)
        %assign f16InErrK1_D_Out = LibBlockOutputSignal(4, "", "", 0)
        %assign f32Acc_Q_Out = LibBlockOutputSignal(5, "", "", 0)
        %assign f16InErrK1_Q_Out = LibBlockOutputSignal(6, "", "", 0)
        %assign f32IObsrvIn_1L_D_Out = LibBlockOutputSignal(7, "", "", 0)
        %assign f16IObsrvIn_1H_D_Out = LibBlockOutputSignal(8, "", "", 0)
        %assign f32IObsrvIn_1L_Q_Out = LibBlockOutputSignal(9, "", "", 0)
        %assign f16IObsrvIn_1H_Q_Out = LibBlockOutputSignal(10, "", "", 0)
        %assign f32IObsrv_D_Out = LibBlockOutputSignal(11, "", "", 0)
        %assign f32IObsrv_Q_Out = LibBlockOutputSignal(12, "", "", 0)
        %assign showStates = LibBlockParameter(p1, "", "", 0)
        %assign resetStatesEnable = LibBlockParameter(p2, "", "", 0)
        %% 
        
        %if FEVAL("strcmp", showStates, "2")
          (%<pCtrl>)->pIObsrv.f32Arg1 = (tFrac32)(%<f32IObsrv_D>);
          (%<pCtrl>)->pIObsrv.f32Arg2 = (tFrac32)(%<f32IObsrv_Q>);
          (%<pCtrl>)->pParamD.f16CC1sc = (tFrac16)(%<f16CC1sc_D>);
          (%<pCtrl>)->pParamD.f16CC2sc = (tFrac16)(%<f16CC2sc_D>);
          (%<pCtrl>)->pParamD.f32Acc = (tFrac32)(%<f32Acc_D>);
          (%<pCtrl>)->pParamD.f16InErrK1 = (tFrac16)(%<f16InErrK1_D>);
          (%<pCtrl>)->pParamD.f16UpperLimit = (tFrac16)(%<f16UpperLimit_D>);
          (%<pCtrl>)->pParamD.f16LowerLimit = (tFrac16)(%<f16LowerLimit_D>);
          (%<pCtrl>)->pParamD.u16NShift = (tU16)(%<u16NShift>);
          (%<pCtrl>)->pParamQ.f16CC1sc = (tFrac16)(%<f16CC1sc_Q>);
          (%<pCtrl>)->pParamQ.f16CC2sc = (tFrac16)(%<f16CC2sc_Q>);
          (%<pCtrl>)->pParamQ.f32Acc = (tFrac32)(%<f32Acc_Q>);
          (%<pCtrl>)->pParamQ.f16InErrK1 = (tFrac16)(%<f16InErrK1_Q>);
          (%<pCtrl>)->pParamQ.f16UpperLimit = (tFrac16)(%<f16UpperLimit_Q>);
          (%<pCtrl>)->pParamQ.f16LowerLimit = (tFrac16)(%<f16LowerLimit_Q>);
          (%<pCtrl>)->pParamQ.u16NShift = (tU16)(%<u16NShift>);
          (%<pCtrl>)->pIObsrvIn_1L.f32Arg1 = (tFrac32)(%<f32IObsrvIn_1L_D>);
          (%<pCtrl>)->pIObsrvIn_1L.f32Arg2 = (tFrac32)(%<f32IObsrvIn_1L_Q>);
          (%<pCtrl>)->pIObsrvIn_1H.f16Arg1 = (tFrac16)(%<f16IObsrvIn_1H_D>);
          (%<pCtrl>)->pIObsrvIn_1H.f16Arg2 = (tFrac16)(%<f16IObsrvIn_1H_Q>);
          (%<pCtrl>)->f16IGain = (tFrac16)(%<f16IGain>);
          (%<pCtrl>)->f16UGain = (tFrac16)(%<f16UGain>);
          (%<pCtrl>)->f16WIGain = (tFrac16)(%<f16WIGain>);
          (%<pCtrl>)->f16EGain = (tFrac16)(%<f16EGain>);
          (%<pCtrl>)->s16Shift = (tS16)(%<s16Shift>);
        %endif
        %if FEVAL("strcmp", resetStatesEnable, "1")
          if ((tS16)(%<s16ResetStates>) != (tS16)0)
          {
            %<s16ResetStates> = (tS16)0;
            AMCLIB_BemfObsrvDQSetState_F16((SWLIBS_2Syst_F16 *const)(%<pIAB>), (SWLIBS_2Syst_F16 *const)(%<pUAB>), (tFrac16)(%<f16Velocity>), (tFrac16)(%<f16Phase>), (AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(%<pCtrl>));
            %<f16PhaseErr> = (tFrac16)0;
          }
          else
          {
            %<f16PhaseErr> = AMCLIB_BemfObsrvDQ_F16((SWLIBS_2Syst_F16 *const)(%<pIAB>), (SWLIBS_2Syst_F16 *const)(%<pUAB>), (tFrac16)(%<f16Velocity>), (tFrac16)(%<f16Phase>), (AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(%<pCtrl>));
          }
        %else
          %<f16PhaseErr> = AMCLIB_BemfObsrvDQ_F16((SWLIBS_2Syst_F16 *const)(%<pIAB>), (SWLIBS_2Syst_F16 *const)(%<pUAB>), (tFrac16)(%<f16Velocity>), (tFrac16)(%<f16Phase>), (AMCLIB_BEMF_OBSRV_DQ_T_F16 *const)(%<pCtrl>));
        %endif
        %if FEVAL("strcmp", showStates, "2")
          %<f16EObsrv_D_Out> = (%<pCtrl>)->pEObsrv.f16Arg1;
          %<f16EObsrv_Q_Out> = (%<pCtrl>)->pEObsrv.f16Arg2;
          %<f32Acc_D_Out> = (%<pCtrl>)->pParamD.f32Acc;
          %<f16InErrK1_D_Out> = (%<pCtrl>)->pParamD.f16InErrK1;
          %<f32Acc_Q_Out> = (%<pCtrl>)->pParamQ.f32Acc;
          %<f16InErrK1_Q_Out> = (%<pCtrl>)->pParamQ.f16InErrK1;
          %<f32IObsrvIn_1L_D_Out> = (%<pCtrl>)->pIObsrvIn_1L.f32Arg1;
          %<f32IObsrvIn_1L_Q_Out> = (%<pCtrl>)->pIObsrvIn_1L.f32Arg2;
          %<f16IObsrvIn_1H_D_Out> = (%<pCtrl>)->pIObsrvIn_1H.f16Arg1;
          %<f16IObsrvIn_1H_Q_Out> = (%<pCtrl>)->pIObsrvIn_1H.f16Arg2;
          %<f32IObsrv_D_Out> = (%<pCtrl>)->pIObsrv.f32Arg1;
          %<f32IObsrv_Q_Out> = (%<pCtrl>)->pIObsrv.f32Arg2;
        %endif
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign u1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign u2BUSBUS_addr = "&" + LibBlockPWork("", "", "", 1)
        %assign work1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 2)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (AMCLIB_BemfObsrvDQ_SF_F16_wrapper_freemem(%<u1BUSBUS_addr>, %<u2BUSBUS_addr>, %<work1BUSBUS_addr>)!=0) %<LibSetRTModelErrorStatus("\"Memory free failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% [EOF]
