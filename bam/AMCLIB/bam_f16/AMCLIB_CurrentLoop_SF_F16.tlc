%% file : AMCLIB_CurrentLoop_SF_F16.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for AMCLIB_CurrentLoop_SF_F16
%% 
%% Simulink version      : 9.3 (R2019a) 23-Nov-2018
%% TLC file generated on : 15-Apr-2020 20:57:06

%% Copyright 2019-2020 NXP
%%
%% NXP Confidential. This software is owned or controlled by NXP and may only be used strictly in
%% accordance with the applicable license terms.  By expressly accepting such terms or by
%% downloading, installing, activating and/or otherwise using the software, you are agreeing that
%% you have read, and that you agree to comply with and are bound by, such license terms.  If you
%% do not agree to be bound by the applicable license terms, then you may not retain, install,
%% activate or otherwise use the software.

%implements AMCLIB_CurrentLoop_SF_F16 "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %assign ver = FEVAL("ver", "simulink")
    %assign factor = 1.0
    %assign slVer = 0.0
    %foreach idx = SIZE(ver.Version)[1]
        %if ISEQUAL(ver.Version[idx], ".")
            %assign factor = factor/10.0
        %else
            %assign slVer = slVer + %<ver.Version[idx]>*factor
        %endif
    %endforeach
    
    %if GenerateErtSFunction==1 && slVer < 6.21
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink Object) may not be used in a model for which an ERT S-Function wrapper is being generated")>
    %endif
    
    %if ExtMode==1 && slVer < 6.3
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a model uses External Mode")>
    %endif
    
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %if slVer < 6.21
            %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a referenced model")>
        %endif
        
        %assign hFileName = FcnGenerateUniqueFileName("AMCLIB_CurrentLoop_SF_F16_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif
        
        extern int AMCLIB_CurrentLoop_SF_F16_wrapper_allocmem(void** y1BUS, int_T y1BUSWidth, void** u2BUS, int_T u2BUSWidth, void** u3BUS, int_T u3BUSWidth, void** work1BUS, int_T work1BUSWidth, void** work2BUS, int_T work2BUSWidth);
        extern int AMCLIB_CurrentLoop_SF_F16_wrapper_freemem(void** y1BUS, void** u2BUS, void** u3BUS, void** work1BUS, void** work2BUS);

        extern void AMCLIB_CurrentLoop_SF_F16_wrapper_InitializeConditions( void* work1, void* work1BUS,  void* work2, void* work2BUS,  int16_T* work3, const int16_T p3, const int16_T p4, const uint16_T p5, const int16_T p6, const int16_T p7, const uint16_T p8, const int32_T p2);
        extern void AMCLIB_CurrentLoop_SF_F16_wrapper_Output(const int16_T u1,  void* work1, void* work1BUS,  void* work2, void* work2BUS, const void* u2, void* u2BUS, const void* u3, void* u3BUS,  int16_T* work3, const int16_T u4, const int16_T u5, const int16_T u6, const int16_T u7, const uint16_T u8, const int16_T u9, const int16_T u10, const uint16_T u11, const int32_T u12, const int16_T u13, const int32_T u14, const int16_T u15,  void* y1, void* y1BUS,  int32_T* y2,  int16_T* y3,  int32_T* y4,  int16_T* y5, const int32_T p1, const int32_T p2);
        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("AMCLIB_CurrentLoop_SF_F16_wrapper", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <stdlib.h>
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif

        #include "amclib.h"
        #include "gflib.h"

        #include "SWLIBS_Typedefs.h"
        #include "GFLIB_ControllerPIrAW.h"

        int AMCLIB_CurrentLoop_SF_F16_wrapper_allocmem(void** y1BUS, int_T y1BUSWidth, void** u2BUS, int_T u2BUSWidth, void** u3BUS, int_T u3BUSWidth, void** work1BUS, int_T work1BUSWidth, void** work2BUS, int_T work2BUSWidth) {
            *y1BUS = calloc(sizeof(SWLIBS_2Syst_F16), y1BUSWidth);
            if (*y1BUS==NULL) return -1;
            *u2BUS = calloc(sizeof(SWLIBS_2Syst_F16), u2BUSWidth);
            if (*u2BUS==NULL) return -1;
            *u3BUS = calloc(sizeof(SWLIBS_2Syst_F16), u3BUSWidth);
            if (*u3BUS==NULL) return -1;
            *work1BUS = calloc(sizeof(GFLIB_CONTROLLER_PIAW_R_T_F16), work1BUSWidth);
            if (*work1BUS==NULL) return -1;
            *work2BUS = calloc(sizeof(GFLIB_CONTROLLER_PIAW_R_T_F16), work2BUSWidth);
            if (*work2BUS==NULL) return -1;
            return 0;
        }
        
        int AMCLIB_CurrentLoop_SF_F16_wrapper_freemem(void** y1BUS, void** u2BUS, void** u3BUS, void** work1BUS, void** work2BUS) {
            if (*y1BUS!=NULL) free(*y1BUS);
            *y1BUS = NULL;
            if (*u2BUS!=NULL) free(*u2BUS);
            *u2BUS = NULL;
            if (*u3BUS!=NULL) free(*u3BUS);
            *u3BUS = NULL;
            if (*work1BUS!=NULL) free(*work1BUS);
            *work1BUS = NULL;
            if (*work2BUS!=NULL) free(*work2BUS);
            *work2BUS = NULL;
            return 0;
        }

        void AMCLIB_CurrentLoop_SF_F16_wrapper_InitializeConditions( void* work1, void* work1BUS,  void* work2, void* work2BUS,  int16_T* work3, const int16_T p3, const int16_T p4, const uint16_T p5, const int16_T p6, const int16_T p7, const uint16_T p8, const int32_T p2) {

            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GFLIB_CONTROLLER_PIAW_R_T_F16 *)work1BUS)", "(char *)work1", 0)>


            /* Assign the Simulink structure work2 to user structure work2BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work2)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GFLIB_CONTROLLER_PIAW_R_T_F16 *)work2BUS)", "(char *)work2", 0)>

                AMCLIB_CURRENT_LOOP_T_F16 f16CurrentLoopStateStr;
                
                /* Copy parameters to Simulink states */
                ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work1BUS))->f16CC1sc = (tFrac16)(p3);
                ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work1BUS))->f16CC2sc = (tFrac16)(p4);
                ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work1BUS))->u16NShift = (tU16)(p5);
                ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work2BUS))->f16CC1sc = (tFrac16)(p6);
                ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work2BUS))->f16CC2sc = (tFrac16)(p7);
                ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work2BUS))->u16NShift = (tU16)(p8);
                
                /* Copy Simulink state parameters to state struct */
                f16CurrentLoopStateStr.pPIrAWD.f16CC1sc = ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work1BUS))->f16CC1sc;
                f16CurrentLoopStateStr.pPIrAWD.f16CC2sc = ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work1BUS))->f16CC2sc;
                f16CurrentLoopStateStr.pPIrAWD.u16NShift = ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work1BUS))->u16NShift;
                f16CurrentLoopStateStr.pPIrAWQ.f16CC1sc = ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work2BUS))->f16CC1sc;
                f16CurrentLoopStateStr.pPIrAWQ.f16CC2sc = ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work2BUS))->f16CC2sc;
                f16CurrentLoopStateStr.pPIrAWQ.u16NShift = ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work2BUS))->u16NShift;
                
                AMCLIB_CurrentLoopInit_F16(&f16CurrentLoopStateStr);
            
                /* Copy struct states to Simulink states */
                ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work1BUS))->f32Acc = f16CurrentLoopStateStr.pPIrAWD.f32Acc;
                ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work1BUS))->f16InErrK1 = f16CurrentLoopStateStr.pPIrAWD.f16InErrK1;
                ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work2BUS))->f32Acc = f16CurrentLoopStateStr.pPIrAWQ.f32Acc;
                ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work2BUS))->f16InErrK1 = f16CurrentLoopStateStr.pPIrAWQ.f16InErrK1;
                if ((tS32)1 == (tS32)(p2))
                {
                  *((tS16 *)work3) = (tS16)1;
                }

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(GFLIB_CONTROLLER_PIAW_R_T_F16 *)work1BUS)", 0)>

            /* Assign the user structure work2BUS to the Simulink structure work2 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work2)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work2", "(*(GFLIB_CONTROLLER_PIAW_R_T_F16 *)work2BUS)", 0)>
        }

        void AMCLIB_CurrentLoop_SF_F16_wrapper_Output(const int16_T u1,  void* work1, void* work1BUS,  void* work2, void* work2BUS, const void* u2, void* u2BUS, const void* u3, void* u3BUS,  int16_T* work3, const int16_T u4, const int16_T u5, const int16_T u6, const int16_T u7, const uint16_T u8, const int16_T u9, const int16_T u10, const uint16_T u11, const int32_T u12, const int16_T u13, const int32_T u14, const int16_T u15,  void* y1, void* y1BUS,  int32_T* y2,  int16_T* y3,  int32_T* y4,  int16_T* y5, const int32_T p1, const int32_T p2) {

            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GFLIB_CONTROLLER_PIAW_R_T_F16 *)work1BUS)", "(char *)work1", 0)>


            /* Assign the Simulink structure work2 to user structure work2BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work2)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GFLIB_CONTROLLER_PIAW_R_T_F16 *)work2BUS)", "(char *)work2", 0)>


            /* Assign the Simulink structure u2 to user structure u2BUS */
            %assign dTypeId = LibBlockInputSignalDataTypeId(1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(SWLIBS_2Syst_F16 *)u2BUS)", "(char *)u2", 0)>


            /* Assign the Simulink structure u3 to user structure u3BUS */
            %assign dTypeId = LibBlockInputSignalDataTypeId(2)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(SWLIBS_2Syst_F16 *)u3BUS)", "(char *)u3", 0)>

            AMCLIB_CURRENT_LOOP_T_F16 f16CurrentLoopStateStr;
            
            if((tS32)2 == (tS32)(p1))
            {
              /* Copy inputs to Simulink states*/
              ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work1BUS))->f16CC1sc = (tFrac16)(u6);
              ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work1BUS))->f16CC2sc = (tFrac16)(u7);
              ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work1BUS))->f32Acc = (tFrac32)(u12);
              ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work1BUS))->f16InErrK1 = (tFrac16)(u13);
              ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work1BUS))->u16NShift = (tU16)(u8);
              ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work2BUS))->f16CC1sc = (tFrac16)(u9);
              ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work2BUS))->f16CC2sc = (tFrac16)(u10);
              ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work2BUS))->f32Acc = (tFrac32)(u14);
              ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work2BUS))->f16InErrK1 = (tFrac16)(u15);
              ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work2BUS))->u16NShift = (tU16)(u11);
            }
            
            /* Copy Simulink states to struct states */
            f16CurrentLoopStateStr.pPIrAWD.f16CC1sc = ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work1BUS))->f16CC1sc;
            f16CurrentLoopStateStr.pPIrAWD.f16CC2sc = ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work1BUS))->f16CC2sc;
            f16CurrentLoopStateStr.pPIrAWD.f32Acc = ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work1BUS))->f32Acc;
            f16CurrentLoopStateStr.pPIrAWD.f16InErrK1 = ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work1BUS))->f16InErrK1;
            f16CurrentLoopStateStr.pPIrAWD.u16NShift = ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work1BUS))->u16NShift;
            f16CurrentLoopStateStr.pPIrAWQ.f16CC1sc = ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work2BUS))->f16CC1sc;
            f16CurrentLoopStateStr.pPIrAWQ.f16CC2sc = ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work2BUS))->f16CC2sc;
            f16CurrentLoopStateStr.pPIrAWQ.f32Acc = ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work2BUS))->f32Acc;
            f16CurrentLoopStateStr.pPIrAWQ.f16InErrK1 = ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work2BUS))->f16InErrK1;
            f16CurrentLoopStateStr.pPIrAWQ.u16NShift = ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work2BUS))->u16NShift;
            
            /* Copy inputs to struct states*/
            f16CurrentLoopStateStr.pIDQReq = (SWLIBS_2Syst_F16 *)(u2BUS);
            f16CurrentLoopStateStr.pIDQFbck = (SWLIBS_2Syst_F16 *)(u3BUS);
            
            if ((tS32)1 == (tS32)(p2))
            {
              if (*(tS16 *)(work3) != (tS16)0)
              {
                *((tS16 *)work3) = (tS16)0;
                AMCLIB_CurrentLoopSetState_F16((tFrac16)(u4), (tFrac16)(u5), &f16CurrentLoopStateStr);
                
                /* Set outputs to zero */
                ((SWLIBS_2Syst_F16 *)(y1BUS))->f16Arg1 = (tFrac16)0;
                ((SWLIBS_2Syst_F16 *)(y1BUS))->f16Arg2 = (tFrac16)0;
              }
              else
              {
                AMCLIB_CurrentLoop_F16((tFrac16)(u1), (SWLIBS_2Syst_F16 *)(y1BUS), &f16CurrentLoopStateStr);
              }
            }
            else
            {
              AMCLIB_CurrentLoop_F16((tFrac16)(u1), (SWLIBS_2Syst_F16 *)(y1BUS), &f16CurrentLoopStateStr);
            }
            
            /* Copy struct states to Simulink states */
            ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work1BUS))->f32Acc = f16CurrentLoopStateStr.pPIrAWD.f32Acc;
            ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work1BUS))->f16InErrK1 = f16CurrentLoopStateStr.pPIrAWD.f16InErrK1;
            ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work2BUS))->f32Acc = f16CurrentLoopStateStr.pPIrAWQ.f32Acc;
            ((GFLIB_CONTROLLER_PIAW_R_T_F16 *)(work2BUS))->f16InErrK1 = f16CurrentLoopStateStr.pPIrAWQ.f16InErrK1;
            
            if((tS32)2 == (tS32)(p1))
            {
              /* Copy struct states to outputs */
              *((tFrac32 *)y2) = f16CurrentLoopStateStr.pPIrAWD.f32Acc;
              *((tFrac16 *)y3) = f16CurrentLoopStateStr.pPIrAWD.f16InErrK1;
              *((tFrac32 *)y4) = f16CurrentLoopStateStr.pPIrAWQ.f32Acc;
              *((tFrac16 *)y5) = f16CurrentLoopStateStr.pPIrAWQ.f16InErrK1;
            }

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(GFLIB_CONTROLLER_PIAW_R_T_F16 *)work1BUS)", 0)>

            /* Assign the user structure work2BUS to the Simulink structure work2 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work2)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work2", "(*(GFLIB_CONTROLLER_PIAW_R_T_F16 *)work2BUS)", 0)>

            /* Assign the user structure y1BUS to the Simulink structure y1 */
            %assign dTypeId = LibBlockOutputSignalDataTypeId(0)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)y1", "(*(SWLIBS_2Syst_F16 *)y1BUS)", 0)>
        }

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %<LibAddToModelSources("%<cFileName>")>
    %else
        %<LibAddToCommonIncludes("amclib.h")>
        %<LibAddToCommonIncludes("gflib.h")>
        %<LibAddToCommonIncludes("SWLIBS_Typedefs.h")>
        %<LibAddToCommonIncludes("GFLIB_ControllerPIrAW.h")>
    %endif
    %assign ::instanceCnt = 0
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif

    %assign ::instanceCnt = %<::instanceCnt> + 1

    %openfile tmpParamExternBuf
      %if ::instanceCnt == 1
        #include "amclib.h"
      %endif
      extern AMCLIB_CURRENT_LOOP_T_F16 f16CurrentLoopStateStr_%<SYSNAME(Name)[0]>;
    %closefile tmpParamExternBuf
    %<LibCacheExtern(tmpParamExternBuf)>

    %assign cDataFileName = LibGetMdlDataSrcBaseName()
    %assign cDataFile = LibCreateSourceFile("Source", "Simulink", cDataFileName)
    %openfile tmpParamBuf
      %if ::instanceCnt == 1
        #include "amclib.h"
      %endif
      AMCLIB_CURRENT_LOOP_T_F16 f16CurrentLoopStateStr_%<SYSNAME(Name)[0]>;
    %closefile tmpParamBuf
    %<LibSetSourceFileSection(cDataFile , "Definitions", tmpParamBuf)>
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign y1BUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign u2BUS_addr = "&" + LibBlockPWork("", "", "", 1)
        %assign u3BUS_addr = "&" + LibBlockPWork("", "", "", 2)
        %assign work1BUS_addr = "&" + LibBlockPWork("", "", "", 3)
        %assign work2BUS_addr = "&" + LibBlockPWork("", "", "", 4)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (AMCLIB_CurrentLoop_SF_F16_wrapper_allocmem(%<y1BUS_addr>, %<LibBlockOutputSignalWidth(0)>, %<u2BUS_addr>, %<LibBlockInputSignalWidth(1)>, %<u3BUS_addr>, %<LibBlockInputSignalWidth(2)>, %<work1BUS_addr>, %<LibBlockDWorkWidth(work1)>, %<work2BUS_addr>, %<LibBlockDWorkWidth(work2)>)!=0) %<LibSetRTModelErrorStatus("\"Memory allocation failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% Function: InitializeConditions =========================================
%function InitializeConditions (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign work1_ptr = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 3)
        %assign work2_ptr = LibBlockDWorkAddr(work2, "", "", 0)
        %assign work2BUS_ptr = LibBlockPWork("", "", "", 4)
        %assign work3_ptr = LibBlockDWorkAddr(work3, "", "", 0)
        %assign p3_val = LibBlockParameter(p3, "", "", 0)
        %assign p4_val = LibBlockParameter(p4, "", "", 0)
        %assign p5_val = LibBlockParameter(p5, "", "", 0)
        %assign p6_val = LibBlockParameter(p6, "", "", 0)
        %assign p7_val = LibBlockParameter(p7, "", "", 0)
        %assign p8_val = LibBlockParameter(p8, "", "", 0)
        %assign p2_val = LibBlockParameter(p2, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        AMCLIB_CurrentLoop_SF_F16_wrapper_InitializeConditions(%<work1_ptr>, %<work1BUS_ptr>, %<work2_ptr>, %<work2BUS_ptr>, %<work3_ptr>, %<p3_val>, %<p4_val>, %<p5_val>, %<p6_val>, %<p7_val>, %<p8_val>, %<p2_val>);
    %else
        %assign pPIrAWD = LibBlockDWork(work1, "", "", 0)
        %assign pPIrAWQ = LibBlockDWork(work2, "", "", 0)
        %assign s16ResetStates = LibBlockDWork(work3, "", "", 0)
        %assign f16CC1sc_D = LibBlockParameter(p3, "", "", 0)
        %assign f16CC2sc_D = LibBlockParameter(p4, "", "", 0)
        %assign u16NShift_D = LibBlockParameter(p5, "", "", 0)
        %assign f16CC1sc_Q = LibBlockParameter(p6, "", "", 0)
        %assign f16CC2sc_Q = LibBlockParameter(p7, "", "", 0)
        %assign u16NShift_Q = LibBlockParameter(p8, "", "", 0)
        %assign resetStatesEnable = LibBlockParameter(p2, "", "", 0)
        %% 
        /* Copy parameters to state struct */
        f16CurrentLoopStateStr_%<SYSNAME(Name)[0]>.pPIrAWD.f16CC1sc = (tFrac16)(%<f16CC1sc_D>);
        f16CurrentLoopStateStr_%<SYSNAME(Name)[0]>.pPIrAWD.f16CC2sc = (tFrac16)(%<f16CC2sc_D>);
        f16CurrentLoopStateStr_%<SYSNAME(Name)[0]>.pPIrAWD.u16NShift = (tU16)(%<u16NShift_D>);
        f16CurrentLoopStateStr_%<SYSNAME(Name)[0]>.pPIrAWQ.f16CC1sc = (tFrac16)(%<f16CC1sc_Q>);
        f16CurrentLoopStateStr_%<SYSNAME(Name)[0]>.pPIrAWQ.f16CC2sc = (tFrac16)(%<f16CC2sc_Q>);
        f16CurrentLoopStateStr_%<SYSNAME(Name)[0]>.pPIrAWQ.u16NShift = (tU16)(%<u16NShift_Q>);
        AMCLIB_CurrentLoopInit_F16(&f16CurrentLoopStateStr_%<SYSNAME(Name)[0]>);
        %if FEVAL("strcmp", resetStatesEnable, "1")
          %<s16ResetStates> = (tS16)1;
        %endif
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign u1_val = LibBlockInputSignal(0, "", "", 0)
        %assign work1_ptr = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 3)
        %assign work2_ptr = LibBlockDWorkAddr(work2, "", "", 0)
        %assign work2BUS_ptr = LibBlockPWork("", "", "", 4)
        %assign u2_ptr = LibBlockInputSignalAddr(1, "", "", 0)
        %assign u2BUS_ptr = LibBlockPWork("", "", "", 1)
        %assign u3_ptr = LibBlockInputSignalAddr(2, "", "", 0)
        %assign u3BUS_ptr = LibBlockPWork("", "", "", 2)
        %assign work3_ptr = LibBlockDWorkAddr(work3, "", "", 0)
        %assign u4_val = LibBlockInputSignal(3, "", "", 0)
        %assign u5_val = LibBlockInputSignal(4, "", "", 0)
        %assign u6_val = LibBlockInputSignal(5, "", "", 0)
        %assign u7_val = LibBlockInputSignal(6, "", "", 0)
        %assign u8_val = LibBlockInputSignal(7, "", "", 0)
        %assign u9_val = LibBlockInputSignal(8, "", "", 0)
        %assign u10_val = LibBlockInputSignal(9, "", "", 0)
        %assign u11_val = LibBlockInputSignal(10, "", "", 0)
        %assign u12_val = LibBlockInputSignal(11, "", "", 0)
        %assign u13_val = LibBlockInputSignal(12, "", "", 0)
        %assign u14_val = LibBlockInputSignal(13, "", "", 0)
        %assign u15_val = LibBlockInputSignal(14, "", "", 0)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign y1BUS_ptr = LibBlockPWork("", "", "", 0)
        %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign y3_ptr = LibBlockOutputSignalAddr(2, "", "", 0)
        %assign y4_ptr = LibBlockOutputSignalAddr(3, "", "", 0)
        %assign y5_ptr = LibBlockOutputSignalAddr(4, "", "", 0)
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign p2_val = LibBlockParameter(p2, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        AMCLIB_CurrentLoop_SF_F16_wrapper_Output(%<u1_val>, %<work1_ptr>, %<work1BUS_ptr>, %<work2_ptr>, %<work2BUS_ptr>, %<u2_ptr>, %<u2BUS_ptr>, %<u3_ptr>, %<u3BUS_ptr>, %<work3_ptr>, %<u4_val>, %<u5_val>, %<u6_val>, %<u7_val>, %<u8_val>, %<u9_val>, %<u10_val>, %<u11_val>, %<u12_val>, %<u13_val>, %<u14_val>, %<u15_val>, %<y1_ptr>, %<y1BUS_ptr>, %<y2_ptr>, %<y3_ptr>, %<y4_ptr>, %<y5_ptr>, %<p1_val>, %<p2_val>);
    %else
        %assign f16UDcBus = LibBlockInputSignal(0, "", "", 0)
        %assign pPIrAWD = LibBlockDWork(work1, "", "", 0)
        %assign pPIrAWQ = LibBlockDWork(work2, "", "", 0)
        %assign pIDQReq = LibBlockInputSignalAddr(1, "", "", 0)
        %assign pIDQFbck = LibBlockInputSignalAddr(2, "", "", 0)
        %assign s16ResetStates = LibBlockDWork(work3, "", "", 0)
        %assign f16ControllerPIrAWDOut = LibBlockInputSignal(3, "", "", 0)
        %assign f16ControllerPIrAWQOut = LibBlockInputSignal(4, "", "", 0)
        %assign f16CC1sc_D = LibBlockInputSignal(5, "", "", 0)
        %assign f16CC2sc_D = LibBlockInputSignal(6, "", "", 0)
        %assign u16NShift_D = LibBlockInputSignal(7, "", "", 0)
        %assign f16CC1sc_Q = LibBlockInputSignal(8, "", "", 0)
        %assign f16CC2sc_Q = LibBlockInputSignal(9, "", "", 0)
        %assign u16NShift_Q = LibBlockInputSignal(10, "", "", 0)
        %assign f32Acc_D = LibBlockInputSignal(11, "", "", 0)
        %assign f16InErrK1_D = LibBlockInputSignal(12, "", "", 0)
        %assign f32Acc_Q = LibBlockInputSignal(13, "", "", 0)
        %assign f16InErrK1_Q = LibBlockInputSignal(14, "", "", 0)
        %assign pUDQReq = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign f32Acc_D_Out = LibBlockOutputSignal(1, "", "", 0)
        %assign f16InErrK1_D_Out = LibBlockOutputSignal(2, "", "", 0)
        %assign f32Acc_Q_Out = LibBlockOutputSignal(3, "", "", 0)
        %assign f16InErrK1_Q_Out = LibBlockOutputSignal(4, "", "", 0)
        %assign showStates = LibBlockParameter(p1, "", "", 0)
        %assign resetStatesEnable = LibBlockParameter(p2, "", "", 0)
        %% 
        %if FEVAL("strcmp", showStates, "2")
          /* Copy inputs to struct states*/
          f16CurrentLoopStateStr_%<SYSNAME(Name)[0]>.pPIrAWD.f16CC1sc = (tFrac16)(%<f16CC1sc_D>);
          f16CurrentLoopStateStr_%<SYSNAME(Name)[0]>.pPIrAWD.f16CC2sc = (tFrac16)(%<f16CC2sc_D>);
          f16CurrentLoopStateStr_%<SYSNAME(Name)[0]>.pPIrAWD.f32Acc = (tFrac32)(%<f32Acc_D>);
          f16CurrentLoopStateStr_%<SYSNAME(Name)[0]>.pPIrAWD.f16InErrK1 = (tFrac16)(%<f16InErrK1_D>);
          f16CurrentLoopStateStr_%<SYSNAME(Name)[0]>.pPIrAWD.u16NShift = (tU16)(%<u16NShift_D>);
          f16CurrentLoopStateStr_%<SYSNAME(Name)[0]>.pPIrAWQ.f16CC1sc = (tFrac16)(%<f16CC1sc_Q>);
          f16CurrentLoopStateStr_%<SYSNAME(Name)[0]>.pPIrAWQ.f16CC2sc = (tFrac16)(%<f16CC2sc_Q>);
          f16CurrentLoopStateStr_%<SYSNAME(Name)[0]>.pPIrAWQ.f32Acc = (tFrac32)(%<f32Acc_Q>);
          f16CurrentLoopStateStr_%<SYSNAME(Name)[0]>.pPIrAWQ.f16InErrK1 = (tFrac16)(%<f16InErrK1_Q>);
          f16CurrentLoopStateStr_%<SYSNAME(Name)[0]>.pPIrAWQ.u16NShift = (tU16)(%<u16NShift_Q>);
        %endif
        
        /* Copy inputs to struct states*/
        f16CurrentLoopStateStr_%<SYSNAME(Name)[0]>.pIDQReq = (SWLIBS_2Syst_F16 *)(%<pIDQReq>);
        f16CurrentLoopStateStr_%<SYSNAME(Name)[0]>.pIDQFbck = (SWLIBS_2Syst_F16 *)(%<pIDQFbck>);
        
        %if FEVAL("strcmp", resetStatesEnable, "1")
          if ((tS16)(%<s16ResetStates>) != (tS16)0)
          {
            %<s16ResetStates> = (tS16)0;
            AMCLIB_CurrentLoopSetState_F16((tFrac16)(%<f16ControllerPIrAWDOut>), (tFrac16)(%<f16ControllerPIrAWQOut>), &f16CurrentLoopStateStr_%<SYSNAME(Name)[0]>);
            
            /* Set outputs to zero */
            (%<pUDQReq>)->f16Arg1 = (tFrac16)0;
            (%<pUDQReq>)->f16Arg2 = (tFrac16)0;
          }
          else
          {
            AMCLIB_CurrentLoop_F16((tFrac16)(%<f16UDcBus>), (SWLIBS_2Syst_F16 *)(%<pUDQReq>), &f16CurrentLoopStateStr_%<SYSNAME(Name)[0]>);
          }
        %else
          AMCLIB_CurrentLoop_F16((tFrac16)(%<f16UDcBus>), (SWLIBS_2Syst_F16 *)(%<pUDQReq>), &f16CurrentLoopStateStr_%<SYSNAME(Name)[0]>);
        %endif
        
        %if FEVAL("strcmp", showStates, "2")
          /* Copy struct states to outputs */
          %<f32Acc_D_Out> = f16CurrentLoopStateStr_%<SYSNAME(Name)[0]>.pPIrAWD.f32Acc;
          %<f16InErrK1_D_Out> = f16CurrentLoopStateStr_%<SYSNAME(Name)[0]>.pPIrAWD.f16InErrK1;
          %<f32Acc_Q_Out> = f16CurrentLoopStateStr_%<SYSNAME(Name)[0]>.pPIrAWQ.f32Acc;
          %<f16InErrK1_Q_Out> = f16CurrentLoopStateStr_%<SYSNAME(Name)[0]>.pPIrAWQ.f16InErrK1;
        %endif
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign y1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign u2BUSBUS_addr = "&" + LibBlockPWork("", "", "", 1)
        %assign u3BUSBUS_addr = "&" + LibBlockPWork("", "", "", 2)
        %assign work1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 3)
        %assign work2BUSBUS_addr = "&" + LibBlockPWork("", "", "", 4)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (AMCLIB_CurrentLoop_SF_F16_wrapper_freemem(%<y1BUSBUS_addr>, %<u2BUSBUS_addr>, %<u3BUSBUS_addr>, %<work1BUSBUS_addr>, %<work2BUSBUS_addr>)!=0) %<LibSetRTModelErrorStatus("\"Memory free failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% [EOF]
