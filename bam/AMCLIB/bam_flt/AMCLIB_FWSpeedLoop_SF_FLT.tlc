%% file : AMCLIB_FWSpeedLoop_SF_FLT.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for AMCLIB_FWSpeedLoop_SF_FLT
%% 
%% Simulink version      : 9.3 (R2019a) 23-Nov-2018
%% TLC file generated on : 15-Apr-2020 20:58:12

%% Copyright 2019-2020 NXP
%%
%% NXP Confidential. This software is owned or controlled by NXP and may only be used strictly in
%% accordance with the applicable license terms.  By expressly accepting such terms or by
%% downloading, installing, activating and/or otherwise using the software, you are agreeing that
%% you have read, and that you agree to comply with and are bound by, such license terms.  If you
%% do not agree to be bound by the applicable license terms, then you may not retain, install,
%% activate or otherwise use the software.

%implements AMCLIB_FWSpeedLoop_SF_FLT "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %assign ver = FEVAL("ver", "simulink")
    %assign factor = 1.0
    %assign slVer = 0.0
    %foreach idx = SIZE(ver.Version)[1]
        %if ISEQUAL(ver.Version[idx], ".")
            %assign factor = factor/10.0
        %else
            %assign slVer = slVer + %<ver.Version[idx]>*factor
        %endif
    %endforeach
    
    %if GenerateErtSFunction==1 && slVer < 6.21
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink Object) may not be used in a model for which an ERT S-Function wrapper is being generated")>
    %endif
    
    %if ExtMode==1 && slVer < 6.3
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a model uses External Mode")>
    %endif
    
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %if slVer < 6.21
            %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a referenced model")>
        %endif
        
        %assign hFileName = FcnGenerateUniqueFileName("AMCLIB_FWSpeedLoop_SF_FLT_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif
        
        extern int AMCLIB_FWSpeedLoop_SF_FLT_wrapper_allocmem(void** y1BUS, int_T y1BUSWidth, void** work1BUS, int_T work1BUSWidth, void** work2BUS, int_T work2BUSWidth, void** work3BUS, int_T work3BUSWidth, void** work4BUS, int_T work4BUSWidth, void** work5BUS, int_T work5BUSWidth, void** work6BUS, int_T work6BUSWidth);
        extern int AMCLIB_FWSpeedLoop_SF_FLT_wrapper_freemem(void** y1BUS, void** work1BUS, void** work2BUS, void** work3BUS, void** work4BUS, void** work5BUS, void** work6BUS);

        extern void AMCLIB_FWSpeedLoop_SF_FLT_wrapper_InitializeConditions( void* work1, void* work1BUS,  void* work2, void* work2BUS,  void* work3, void* work3BUS,  void* work4, void* work4BUS,  void* work5, void* work5BUS,  void* work6, void* work6BUS,  int32_T* work7,  real32_T* work8, const real32_T p4, const real32_T p5, const real32_T p6, const real32_T p7, const real32_T p8, const real32_T p9, const real32_T p10, const real32_T p11, const real32_T p12, const real32_T p13, const real32_T p14, const real32_T p15, const real32_T p16, const int32_T p1, const int32_T p2, const int32_T p3);
        extern void AMCLIB_FWSpeedLoop_SF_FLT_wrapper_Output(const real32_T u1, const real32_T u2,  void* work1, void* work1BUS,  void* work2, void* work2BUS,  void* work3, void* work3BUS,  void* work4, void* work4BUS,  void* work5, void* work5BUS,  void* work6, void* work6BUS,  int32_T* work7,  real32_T* work8, const real32_T* u3, const real32_T* u4, const real32_T* u5, const real32_T u6, const real32_T u7, const real32_T u8, const real32_T u9, const real32_T u10, const real32_T u11, const real32_T u12, const real32_T u13, const real32_T u14, const real32_T u15, const real32_T u16, const real32_T u17, const real32_T u18, const real32_T u19, const real32_T u20, const real32_T u21, const real32_T u22, const real32_T u23, const real32_T u24, const real32_T u25, const real32_T u26, const real32_T u27, const real32_T u28, const real32_T u29, const real32_T u30, const real32_T u31,  void* y1, void* y1BUS,  uint16_T* y2,  uint16_T* y3,  real32_T* y4,  real32_T* y5,  real32_T* y6,  real32_T* y7,  real32_T* y8,  real32_T* y9,  real32_T* y10,  real32_T* y11,  real32_T* y12,  real32_T* y13,  real32_T* y14,  real32_T* y15,  real32_T* y16,  real32_T* y17,  real32_T* y18,  real32_T* y19,  real32_T* y20,  real32_T* y21,  real32_T* y22, const int32_T p1, const int32_T p2, const int32_T p3);
        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("AMCLIB_FWSpeedLoop_SF_FLT_wrapper", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <stdlib.h>
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif

        #include "amclib.h"
        #include "gflib.h"
        #include "gdflib.h"

        #include "SWLIBS_Typedefs.h"
        #include "GDFLIB_FilterMA.h"
        #include "GFLIB_ControllerPIpAW.h"
        #include "GFLIB_Ramp.h"

        int AMCLIB_FWSpeedLoop_SF_FLT_wrapper_allocmem(void** y1BUS, int_T y1BUSWidth, void** work1BUS, int_T work1BUSWidth, void** work2BUS, int_T work2BUSWidth, void** work3BUS, int_T work3BUSWidth, void** work4BUS, int_T work4BUSWidth, void** work5BUS, int_T work5BUSWidth, void** work6BUS, int_T work6BUSWidth) {
            *y1BUS = calloc(sizeof(SWLIBS_2Syst_FLT), y1BUSWidth);
            if (*y1BUS==NULL) return -1;
            *work1BUS = calloc(sizeof(SWLIBS_2Syst_FLT), work1BUSWidth);
            if (*work1BUS==NULL) return -1;
            *work2BUS = calloc(sizeof(GDFLIB_FILTER_MA_T_FLT), work2BUSWidth);
            if (*work2BUS==NULL) return -1;
            *work3BUS = calloc(sizeof(GDFLIB_FILTER_MA_T_FLT), work3BUSWidth);
            if (*work3BUS==NULL) return -1;
            *work4BUS = calloc(sizeof(GFLIB_CONTROLLER_PIAW_P_T_FLT), work4BUSWidth);
            if (*work4BUS==NULL) return -1;
            *work5BUS = calloc(sizeof(GFLIB_CONTROLLER_PIAW_P_T_FLT), work5BUSWidth);
            if (*work5BUS==NULL) return -1;
            *work6BUS = calloc(sizeof(GFLIB_RAMP_T_FLT), work6BUSWidth);
            if (*work6BUS==NULL) return -1;
            return 0;
        }
        
        int AMCLIB_FWSpeedLoop_SF_FLT_wrapper_freemem(void** y1BUS, void** work1BUS, void** work2BUS, void** work3BUS, void** work4BUS, void** work5BUS, void** work6BUS) {
            if (*y1BUS!=NULL) free(*y1BUS);
            *y1BUS = NULL;
            if (*work1BUS!=NULL) free(*work1BUS);
            *work1BUS = NULL;
            if (*work2BUS!=NULL) free(*work2BUS);
            *work2BUS = NULL;
            if (*work3BUS!=NULL) free(*work3BUS);
            *work3BUS = NULL;
            if (*work4BUS!=NULL) free(*work4BUS);
            *work4BUS = NULL;
            if (*work5BUS!=NULL) free(*work5BUS);
            *work5BUS = NULL;
            if (*work6BUS!=NULL) free(*work6BUS);
            *work6BUS = NULL;
            return 0;
        }

        void AMCLIB_FWSpeedLoop_SF_FLT_wrapper_InitializeConditions( void* work1, void* work1BUS,  void* work2, void* work2BUS,  void* work3, void* work3BUS,  void* work4, void* work4BUS,  void* work5, void* work5BUS,  void* work6, void* work6BUS,  int32_T* work7,  real32_T* work8, const real32_T p4, const real32_T p5, const real32_T p6, const real32_T p7, const real32_T p8, const real32_T p9, const real32_T p10, const real32_T p11, const real32_T p12, const real32_T p13, const real32_T p14, const real32_T p15, const real32_T p16, const int32_T p1, const int32_T p2, const int32_T p3) {

            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(SWLIBS_2Syst_FLT *)work1BUS)", "(char *)work1", 0)>


            /* Assign the Simulink structure work2 to user structure work2BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work2)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GDFLIB_FILTER_MA_T_FLT *)work2BUS)", "(char *)work2", 0)>


            /* Assign the Simulink structure work3 to user structure work3BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work3)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GDFLIB_FILTER_MA_T_FLT *)work3BUS)", "(char *)work3", 0)>


            /* Assign the Simulink structure work4 to user structure work4BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work4)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GFLIB_CONTROLLER_PIAW_P_T_FLT *)work4BUS)", "(char *)work4", 0)>


            /* Assign the Simulink structure work5 to user structure work5BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work5)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GFLIB_CONTROLLER_PIAW_P_T_FLT *)work5BUS)", "(char *)work5", 0)>


            /* Assign the Simulink structure work6 to user structure work6BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work6)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GFLIB_RAMP_T_FLT *)work6BUS)", "(char *)work6", 0)>

                AMCLIB_FW_SPEED_LOOP_T_FLT fltFWSpeedLoopStateStr;
                
                /* Copy parameters to Simulink states */
                ((GDFLIB_FILTER_MA_T_FLT *)(work2BUS))->fltLambda = (tFloat)(p5);
                ((GDFLIB_FILTER_MA_T_FLT *)(work3BUS))->fltLambda = (tFloat)(p6);
                ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work4BUS))->fltPropGain = (tFloat)(p7);
                ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work4BUS))->fltIntegGain = (tFloat)(p8);
                ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work4BUS))->fltLowerLimit = (tFloat)(p9);
                ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work4BUS))->fltUpperLimit = (tFloat)(p10);
                ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work5BUS))->fltPropGain = (tFloat)(p11);
                ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work5BUS))->fltIntegGain = (tFloat)(p12);
                ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work5BUS))->fltLowerLimit = (tFloat)(p13);
                ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work5BUS))->fltUpperLimit = (tFloat)(p14);
                ((GFLIB_RAMP_T_FLT *)(work6BUS))->fltRampUp = (tFloat)(p15);
                ((GFLIB_RAMP_T_FLT *)(work6BUS))->fltRampDown = (tFloat)(p16);
                *((tFloat *)work8) = (tFloat)(p4);
            
                /* Copy Simulink state parameters to state struct */
                fltFWSpeedLoopStateStr.pFilterW.fltLambda = ((GDFLIB_FILTER_MA_T_FLT *)(work2BUS))->fltLambda;
                fltFWSpeedLoopStateStr.pFilterFW.fltLambda = ((GDFLIB_FILTER_MA_T_FLT *)(work3BUS))->fltLambda;
                fltFWSpeedLoopStateStr.pPIpAWQ.fltPropGain = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work4BUS))->fltPropGain;
                fltFWSpeedLoopStateStr.pPIpAWQ.fltIntegGain = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work4BUS))->fltIntegGain;
                fltFWSpeedLoopStateStr.pPIpAWQ.fltLowerLimit = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work4BUS))->fltLowerLimit;
                fltFWSpeedLoopStateStr.pPIpAWQ.fltUpperLimit = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work4BUS))->fltUpperLimit;
                fltFWSpeedLoopStateStr.pPIpAWFW.fltPropGain = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work5BUS))->fltPropGain;
                fltFWSpeedLoopStateStr.pPIpAWFW.fltIntegGain = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work5BUS))->fltIntegGain;
                fltFWSpeedLoopStateStr.pPIpAWFW.fltLowerLimit = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work5BUS))->fltLowerLimit;
                fltFWSpeedLoopStateStr.pPIpAWFW.fltUpperLimit = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work5BUS))->fltUpperLimit;
                fltFWSpeedLoopStateStr.pRamp.fltRampUp = ((GFLIB_RAMP_T_FLT *)(work6BUS))->fltRampUp;
                fltFWSpeedLoopStateStr.pRamp.fltRampDown = ((GFLIB_RAMP_T_FLT *)(work6BUS))->fltRampDown;
                fltFWSpeedLoopStateStr.fltUmaxDivImax = *(tFloat *)(work8);
                
                AMCLIB_FWSpeedLoopInit_FLT(&fltFWSpeedLoopStateStr);
            
                /* Set Simulink state to zero */
                ((SWLIBS_2Syst_FLT *)(work1BUS))->fltArg1 = 0.0f;
                ((SWLIBS_2Syst_FLT *)(work1BUS))->fltArg2 = 0.0f;
                
                /* Copy struct states to Simulink states */
                ((GDFLIB_FILTER_MA_T_FLT *)(work2BUS))->fltAcc = fltFWSpeedLoopStateStr.pFilterW.fltAcc;
                ((GDFLIB_FILTER_MA_T_FLT *)(work3BUS))->fltAcc = fltFWSpeedLoopStateStr.pFilterFW.fltAcc;
                ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work4BUS))->fltIntegPartK_1 = fltFWSpeedLoopStateStr.pPIpAWQ.fltIntegPartK_1;
                ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work4BUS))->fltInK_1 = fltFWSpeedLoopStateStr.pPIpAWQ.fltInK_1;
                ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work5BUS))->fltIntegPartK_1 = fltFWSpeedLoopStateStr.pPIpAWFW.fltIntegPartK_1;
                ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work5BUS))->fltInK_1 = fltFWSpeedLoopStateStr.pPIpAWFW.fltInK_1;
                ((GFLIB_RAMP_T_FLT *)(work6BUS))->fltState = fltFWSpeedLoopStateStr.pRamp.fltState;
                
                if ((tS32)1 == (tS32)(p2))
                {
                  *((tS32 *)work7) = (tS32)1;
                }

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(SWLIBS_2Syst_FLT *)work1BUS)", 0)>

            /* Assign the user structure work2BUS to the Simulink structure work2 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work2)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work2", "(*(GDFLIB_FILTER_MA_T_FLT *)work2BUS)", 0)>

            /* Assign the user structure work3BUS to the Simulink structure work3 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work3)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work3", "(*(GDFLIB_FILTER_MA_T_FLT *)work3BUS)", 0)>

            /* Assign the user structure work4BUS to the Simulink structure work4 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work4)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work4", "(*(GFLIB_CONTROLLER_PIAW_P_T_FLT *)work4BUS)", 0)>

            /* Assign the user structure work5BUS to the Simulink structure work5 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work5)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work5", "(*(GFLIB_CONTROLLER_PIAW_P_T_FLT *)work5BUS)", 0)>

            /* Assign the user structure work6BUS to the Simulink structure work6 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work6)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work6", "(*(GFLIB_RAMP_T_FLT *)work6BUS)", 0)>
        }

        void AMCLIB_FWSpeedLoop_SF_FLT_wrapper_Output(const real32_T u1, const real32_T u2,  void* work1, void* work1BUS,  void* work2, void* work2BUS,  void* work3, void* work3BUS,  void* work4, void* work4BUS,  void* work5, void* work5BUS,  void* work6, void* work6BUS,  int32_T* work7,  real32_T* work8, const real32_T* u3, const real32_T* u4, const real32_T* u5, const real32_T u6, const real32_T u7, const real32_T u8, const real32_T u9, const real32_T u10, const real32_T u11, const real32_T u12, const real32_T u13, const real32_T u14, const real32_T u15, const real32_T u16, const real32_T u17, const real32_T u18, const real32_T u19, const real32_T u20, const real32_T u21, const real32_T u22, const real32_T u23, const real32_T u24, const real32_T u25, const real32_T u26, const real32_T u27, const real32_T u28, const real32_T u29, const real32_T u30, const real32_T u31,  void* y1, void* y1BUS,  uint16_T* y2,  uint16_T* y3,  real32_T* y4,  real32_T* y5,  real32_T* y6,  real32_T* y7,  real32_T* y8,  real32_T* y9,  real32_T* y10,  real32_T* y11,  real32_T* y12,  real32_T* y13,  real32_T* y14,  real32_T* y15,  real32_T* y16,  real32_T* y17,  real32_T* y18,  real32_T* y19,  real32_T* y20,  real32_T* y21,  real32_T* y22, const int32_T p1, const int32_T p2, const int32_T p3) {

            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(SWLIBS_2Syst_FLT *)work1BUS)", "(char *)work1", 0)>


            /* Assign the Simulink structure work2 to user structure work2BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work2)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GDFLIB_FILTER_MA_T_FLT *)work2BUS)", "(char *)work2", 0)>


            /* Assign the Simulink structure work3 to user structure work3BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work3)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GDFLIB_FILTER_MA_T_FLT *)work3BUS)", "(char *)work3", 0)>


            /* Assign the Simulink structure work4 to user structure work4BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work4)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GFLIB_CONTROLLER_PIAW_P_T_FLT *)work4BUS)", "(char *)work4", 0)>


            /* Assign the Simulink structure work5 to user structure work5BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work5)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GFLIB_CONTROLLER_PIAW_P_T_FLT *)work5BUS)", "(char *)work5", 0)>


            /* Assign the Simulink structure work6 to user structure work6BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work6)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GFLIB_RAMP_T_FLT *)work6BUS)", "(char *)work6", 0)>

            AMCLIB_FW_SPEED_LOOP_T_FLT fltFWSpeedLoopStateStr;
            AMCLIB_FW_SPEED_LOOP_DEBUG_T_FLT fltFWSpeedLoopDebugStateStr;
            
            if((tS32)2 == (tS32)(p1))
            {
              /* Copy inputs to Simulink states */
              ((SWLIBS_2Syst_FLT *)(work1BUS))->fltArg2 = (tFloat)(u24);
              ((GDFLIB_FILTER_MA_T_FLT *)(work2BUS))->fltAcc = (tFloat)(u25);
              ((GDFLIB_FILTER_MA_T_FLT *)(work2BUS))->fltLambda = (tFloat)(u12);
              ((GDFLIB_FILTER_MA_T_FLT *)(work3BUS))->fltAcc = (tFloat)(u26);
              ((GDFLIB_FILTER_MA_T_FLT *)(work3BUS))->fltLambda = (tFloat)(u13);
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work4BUS))->fltPropGain = (tFloat)(u14);
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work4BUS))->fltIntegGain = (tFloat)(u15);
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work4BUS))->fltLowerLimit = (tFloat)(u16);
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work4BUS))->fltUpperLimit = (tFloat)(u17);
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work4BUS))->fltIntegPartK_1 = (tFloat)(u27);
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work4BUS))->fltInK_1 = (tFloat)(u28);
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work5BUS))->fltPropGain = (tFloat)(u18);
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work5BUS))->fltIntegGain = (tFloat)(u19);
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work5BUS))->fltLowerLimit = (tFloat)(u20);
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work5BUS))->fltUpperLimit = (tFloat)(u21);
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work5BUS))->fltIntegPartK_1 = (tFloat)(u29);
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work5BUS))->fltInK_1 = (tFloat)(u30);
              ((GFLIB_RAMP_T_FLT *)(work6BUS))->fltState = (tFloat)(u31);
              ((GFLIB_RAMP_T_FLT *)(work6BUS))->fltRampUp = (tFloat)(u22);
              ((GFLIB_RAMP_T_FLT *)(work6BUS))->fltRampDown = (tFloat)(u23);
              *((tFloat *)work8) = (tFloat)(u11);
            
              /* Copy Simulink states to DEBUG struct states */
              fltFWSpeedLoopDebugStateStr.pFilterW.fltAcc = ((GDFLIB_FILTER_MA_T_FLT *)(work2BUS))->fltAcc;
              fltFWSpeedLoopDebugStateStr.pFilterW.fltLambda = ((GDFLIB_FILTER_MA_T_FLT *)(work2BUS))->fltLambda;
              fltFWSpeedLoopDebugStateStr.pFilterFW.fltAcc = ((GDFLIB_FILTER_MA_T_FLT *)(work3BUS))->fltAcc;
              fltFWSpeedLoopDebugStateStr.pFilterFW.fltLambda = ((GDFLIB_FILTER_MA_T_FLT *)(work3BUS))->fltLambda;
              fltFWSpeedLoopDebugStateStr.pPIpAWFW.fltPropGain = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work5BUS))->fltPropGain;
              fltFWSpeedLoopDebugStateStr.pPIpAWFW.fltIntegGain = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work5BUS))->fltIntegGain;
              fltFWSpeedLoopDebugStateStr.pPIpAWFW.fltLowerLimit = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work5BUS))->fltLowerLimit;
              fltFWSpeedLoopDebugStateStr.pPIpAWFW.fltUpperLimit = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work5BUS))->fltUpperLimit;
              fltFWSpeedLoopDebugStateStr.pPIpAWFW.fltIntegPartK_1 = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work5BUS))->fltIntegPartK_1;
              fltFWSpeedLoopDebugStateStr.pPIpAWFW.fltInK_1 = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work5BUS))->fltInK_1;
              fltFWSpeedLoopDebugStateStr.pPIpAWQ.fltPropGain = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work4BUS))->fltPropGain;
              fltFWSpeedLoopDebugStateStr.pPIpAWQ.fltIntegGain = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work4BUS))->fltIntegGain;
              fltFWSpeedLoopDebugStateStr.pPIpAWQ.fltLowerLimit = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work4BUS))->fltLowerLimit;
              fltFWSpeedLoopDebugStateStr.pPIpAWQ.fltUpperLimit = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work4BUS))->fltUpperLimit;
              fltFWSpeedLoopDebugStateStr.pPIpAWQ.fltIntegPartK_1 = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work4BUS))->fltIntegPartK_1;
              fltFWSpeedLoopDebugStateStr.pPIpAWQ.fltInK_1 = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work4BUS))->fltInK_1;
              fltFWSpeedLoopDebugStateStr.pRamp.fltState = ((GFLIB_RAMP_T_FLT *)(work6BUS))->fltState;
              fltFWSpeedLoopDebugStateStr.pRamp.fltRampUp = ((GFLIB_RAMP_T_FLT *)(work6BUS))->fltRampUp;
              fltFWSpeedLoopDebugStateStr.pRamp.fltRampDown = ((GFLIB_RAMP_T_FLT *)(work6BUS))->fltRampDown;
              fltFWSpeedLoopDebugStateStr.fltUmaxDivImax = *(tFloat *)(work8);
              
              /* Copy inputs to DEBUG struct states */
              fltFWSpeedLoopDebugStateStr.pIQFbck = (tFloat *)(u3);
              fltFWSpeedLoopDebugStateStr.pUQReq = (tFloat *)(u4);
              fltFWSpeedLoopDebugStateStr.pUQLim = (tFloat *)(u5);
            }
            
            /* Copy Simulink states to struct states */
            fltFWSpeedLoopStateStr.pFilterW.fltAcc = ((GDFLIB_FILTER_MA_T_FLT *)(work2BUS))->fltAcc;
            fltFWSpeedLoopStateStr.pFilterW.fltLambda = ((GDFLIB_FILTER_MA_T_FLT *)(work2BUS))->fltLambda;
            fltFWSpeedLoopStateStr.pFilterFW.fltAcc = ((GDFLIB_FILTER_MA_T_FLT *)(work3BUS))->fltAcc;
            fltFWSpeedLoopStateStr.pFilterFW.fltLambda = ((GDFLIB_FILTER_MA_T_FLT *)(work3BUS))->fltLambda;
            fltFWSpeedLoopStateStr.pPIpAWQ.fltPropGain = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work4BUS))->fltPropGain;
            fltFWSpeedLoopStateStr.pPIpAWQ.fltIntegGain = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work4BUS))->fltIntegGain;
            fltFWSpeedLoopStateStr.pPIpAWQ.fltLowerLimit = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work4BUS))->fltLowerLimit;
            fltFWSpeedLoopStateStr.pPIpAWQ.fltUpperLimit = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work4BUS))->fltUpperLimit;
            fltFWSpeedLoopStateStr.pPIpAWQ.fltIntegPartK_1 = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work4BUS))->fltIntegPartK_1;
            fltFWSpeedLoopStateStr.pPIpAWQ.fltInK_1 = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work4BUS))->fltInK_1;
            fltFWSpeedLoopStateStr.pPIpAWFW.fltPropGain = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work5BUS))->fltPropGain;
            fltFWSpeedLoopStateStr.pPIpAWFW.fltIntegGain = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work5BUS))->fltIntegGain;
            fltFWSpeedLoopStateStr.pPIpAWFW.fltLowerLimit = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work5BUS))->fltLowerLimit;
            fltFWSpeedLoopStateStr.pPIpAWFW.fltUpperLimit = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work5BUS))->fltUpperLimit;
            fltFWSpeedLoopStateStr.pPIpAWFW.fltIntegPartK_1 = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work5BUS))->fltIntegPartK_1;
            fltFWSpeedLoopStateStr.pPIpAWFW.fltInK_1 = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work5BUS))->fltInK_1;
            fltFWSpeedLoopStateStr.pRamp.fltState = ((GFLIB_RAMP_T_FLT *)(work6BUS))->fltState;
            fltFWSpeedLoopStateStr.pRamp.fltRampUp = ((GFLIB_RAMP_T_FLT *)(work6BUS))->fltRampUp;
            fltFWSpeedLoopStateStr.pRamp.fltRampDown = ((GFLIB_RAMP_T_FLT *)(work6BUS))->fltRampDown;
            fltFWSpeedLoopStateStr.fltUmaxDivImax = *(tFloat *)(work8);
            
            /* Copy inputs to struct states */
            fltFWSpeedLoopStateStr.pIQFbck = (tFloat *)(u3);
            fltFWSpeedLoopStateStr.pUQReq = (tFloat *)(u4);
            fltFWSpeedLoopStateStr.pUQLim = (tFloat *)(u5);
            
            if ((tS32)1 == (tS32)(p2))
            {
              if (*(tS32 *)(work7) != (tS32)0)
              {
                *((tS32 *)work7) = (tS32)0;
                AMCLIB_FWSpeedLoopSetState_FLT((tFloat)(u6), (tFloat)(u7), (tFloat)(u8),
                  fltControllerPIpAWFWOut, (tFloat)(u10), &fltFWSpeedLoopStateStr);
                if((tS32)2 == (tS32)(p1))
                {
                  /* Copy struct states to DEBUG struct states */
                  fltFWSpeedLoopDebugStateStr.pFilterW.fltAcc = fltFWSpeedLoopStateStr.pFilterW.fltAcc;
                  fltFWSpeedLoopDebugStateStr.pFilterFW.fltAcc = fltFWSpeedLoopStateStr.pFilterFW.fltAcc;
                  fltFWSpeedLoopDebugStateStr.pPIpAWQ.fltIntegPartK_1 = fltFWSpeedLoopStateStr.pPIpAWQ.fltIntegPartK_1;
                  fltFWSpeedLoopDebugStateStr.pPIpAWQ.fltInK_1 = fltFWSpeedLoopStateStr.pPIpAWQ.fltInK_1;
                  fltFWSpeedLoopDebugStateStr.pPIpAWFW.fltIntegPartK_1 = fltFWSpeedLoopStateStr.pPIpAWFW.fltIntegPartK_1;
                  fltFWSpeedLoopDebugStateStr.pPIpAWFW.fltInK_1 = fltFWSpeedLoopStateStr.pPIpAWFW.fltInK_1;
                  fltFWSpeedLoopDebugStateStr.pRamp.fltState = fltFWSpeedLoopStateStr.pRamp.fltState;
                }
                /* Set Simulink state to zero */
                ((SWLIBS_2Syst_FLT *)(work1BUS))->fltArg1 = 0.0f;
                ((SWLIBS_2Syst_FLT *)(work1BUS))->fltArg2 = 0.0f;
              }
              else
              {
                if((tS32)2 == (tS32)(p1))
                {
                  AMCLIB_FWSpeedLoopDebug_FLT((tFloat)(u1), (tFloat)(u2), (SWLIBS_2Syst_FLT *)(work1BUS), &fltFWSpeedLoopDebugStateStr);
                }
                else
                {
                  AMCLIB_FWSpeedLoop_FLT((tFloat)(u1), (tFloat)(u2), (SWLIBS_2Syst_FLT *)(work1BUS), &fltFWSpeedLoopStateStr);
                }
              }
            }
            else
            {
              if((tS32)2 == (tS32)(p1))
              {
                AMCLIB_FWSpeedLoopDebug_FLT((tFloat)(u1), (tFloat)(u2), (SWLIBS_2Syst_FLT *)(work1BUS), &fltFWSpeedLoopDebugStateStr);
              }
              else
              {
                AMCLIB_FWSpeedLoop_FLT((tFloat)(u1), (tFloat)(u2), (SWLIBS_2Syst_FLT *)(work1BUS), &fltFWSpeedLoopStateStr);
              }
            }
            
            /* Copy Simulink states to output */
            ((SWLIBS_2Syst_FLT *)(y1BUS))->fltArg1 = ((SWLIBS_2Syst_FLT *)(work1BUS))->fltArg1;
            ((SWLIBS_2Syst_FLT *)(y1BUS))->fltArg2 = ((SWLIBS_2Syst_FLT *)(work1BUS))->fltArg2;
            
            if((tS32)2 == (tS32)(p1))
            {
              /* Copy DEBUG struct states to Simulink states */
              ((GDFLIB_FILTER_MA_T_FLT *)(work2BUS))->fltAcc = fltFWSpeedLoopDebugStateStr.pFilterW.fltAcc;
              ((GDFLIB_FILTER_MA_T_FLT *)(work3BUS))->fltAcc = fltFWSpeedLoopDebugStateStr.pFilterFW.fltAcc;
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work4BUS))->fltIntegPartK_1 = fltFWSpeedLoopDebugStateStr.pPIpAWQ.fltIntegPartK_1;
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work4BUS))->fltInK_1 = fltFWSpeedLoopDebugStateStr.pPIpAWQ.fltInK_1;
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work5BUS))->fltIntegPartK_1 = fltFWSpeedLoopDebugStateStr.pPIpAWFW.fltIntegPartK_1;
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work5BUS))->fltInK_1 = fltFWSpeedLoopDebugStateStr.pPIpAWFW.fltInK_1;
              ((GFLIB_RAMP_T_FLT *)(work6BUS))->fltState = fltFWSpeedLoopDebugStateStr.pRamp.fltState;
              
              /* Copy DEBUG struct states to outputs */
              *((tU16 *)y2) = fltFWSpeedLoopDebugStateStr.pPIpAWQ.u16LimitFlag;
              *((tU16 *)y3) = fltFWSpeedLoopDebugStateStr.pPIpAWFW.u16LimitFlag;
              *((tFloat *)y4) = fltFWSpeedLoopDebugStateStr.fltWReqFilt;
              *((tFloat *)y5) = fltFWSpeedLoopDebugStateStr.fltWErr;
              *((tFloat *)y6) = fltFWSpeedLoopDebugStateStr.fltIDQReqAmp;
              *((tFloat *)y7) = fltFWSpeedLoopDebugStateStr.fltWFbckFilt;
              *((tFloat *)y8) = fltFWSpeedLoopDebugStateStr.fltIQErrSign;
              *((tFloat *)y10) = fltFWSpeedLoopDebugStateStr.fltIQErr;
              *((tFloat *)y9) = fltFWSpeedLoopDebugStateStr.fltFWErr;
              *((tFloat *)y11) = fltFWSpeedLoopDebugStateStr.fltUQErr;
              *((tFloat *)y12) = fltFWSpeedLoopDebugStateStr.fltFWErrFilt;
              *((tFloat *)y13) = fltFWSpeedLoopDebugStateStr.fltFWAngle;
              *((tFloat *)y14) = fltFWSpeedLoopDebugStateStr.fltFWSin;
              *((tFloat *)y15) = fltFWSpeedLoopDebugStateStr.fltFWCos;
              *((tFloat *)y16) = fltFWSpeedLoopDebugStateStr.pFilterW.fltAcc;
              *((tFloat *)y17) = fltFWSpeedLoopDebugStateStr.pFilterFW.fltAcc;
              *((tFloat *)y18) = fltFWSpeedLoopDebugStateStr.pPIpAWQ.fltIntegPartK_1;
              *((tFloat *)y19) = fltFWSpeedLoopDebugStateStr.pPIpAWQ.fltInK_1;
              *((tFloat *)y20) = fltFWSpeedLoopDebugStateStr.pPIpAWFW.fltIntegPartK_1;
              *((tFloat *)y21) = fltFWSpeedLoopDebugStateStr.pPIpAWFW.fltInK_1;
              *((tFloat *)y22) = fltFWSpeedLoopDebugStateStr.pRamp.fltState;
            }
            else
            {
              /* Copy struct states to Simulink states */
              ((GDFLIB_FILTER_MA_T_FLT *)(work2BUS))->fltAcc = fltFWSpeedLoopStateStr.pFilterW.fltAcc;
              ((GDFLIB_FILTER_MA_T_FLT *)(work3BUS))->fltAcc = fltFWSpeedLoopStateStr.pFilterFW.fltAcc;
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work4BUS))->fltIntegPartK_1 = fltFWSpeedLoopStateStr.pPIpAWQ.fltIntegPartK_1;
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work4BUS))->fltInK_1 = fltFWSpeedLoopStateStr.pPIpAWQ.fltInK_1;
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work5BUS))->fltIntegPartK_1 = fltFWSpeedLoopStateStr.pPIpAWFW.fltIntegPartK_1;
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work5BUS))->fltInK_1 = fltFWSpeedLoopStateStr.pPIpAWFW.fltInK_1;
              ((GFLIB_RAMP_T_FLT *)(work6BUS))->fltState = fltFWSpeedLoopStateStr.pRamp.fltState;
            
              /* Copy struct states to outputs */
              *((tU16 *)y2) = fltFWSpeedLoopStateStr.pPIpAWQ.u16LimitFlag;
              *((tU16 *)y3) = fltFWSpeedLoopStateStr.pPIpAWFW.u16LimitFlag;
            }

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(SWLIBS_2Syst_FLT *)work1BUS)", 0)>

            /* Assign the user structure work2BUS to the Simulink structure work2 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work2)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work2", "(*(GDFLIB_FILTER_MA_T_FLT *)work2BUS)", 0)>

            /* Assign the user structure work3BUS to the Simulink structure work3 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work3)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work3", "(*(GDFLIB_FILTER_MA_T_FLT *)work3BUS)", 0)>

            /* Assign the user structure work4BUS to the Simulink structure work4 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work4)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work4", "(*(GFLIB_CONTROLLER_PIAW_P_T_FLT *)work4BUS)", 0)>

            /* Assign the user structure work5BUS to the Simulink structure work5 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work5)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work5", "(*(GFLIB_CONTROLLER_PIAW_P_T_FLT *)work5BUS)", 0)>

            /* Assign the user structure work6BUS to the Simulink structure work6 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work6)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work6", "(*(GFLIB_RAMP_T_FLT *)work6BUS)", 0)>

            /* Assign the user structure y1BUS to the Simulink structure y1 */
            %assign dTypeId = LibBlockOutputSignalDataTypeId(0)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)y1", "(*(SWLIBS_2Syst_FLT *)y1BUS)", 0)>
        }

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %<LibAddToModelSources("%<cFileName>")>
    %else
        %<LibAddToCommonIncludes("amclib.h")>
        %<LibAddToCommonIncludes("gflib.h")>
        %<LibAddToCommonIncludes("gdflib.h")>
        %<LibAddToCommonIncludes("SWLIBS_Typedefs.h")>
        %<LibAddToCommonIncludes("GDFLIB_FilterMA.h")>
        %<LibAddToCommonIncludes("GFLIB_ControllerPIpAW.h")>
        %<LibAddToCommonIncludes("GFLIB_Ramp.h")>
    %endif
    %assign ::instanceCnt = 0
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif

    %assign ::instanceCnt = %<::instanceCnt> + 1

    %openfile tmpParamExternBuf
      %if ::instanceCnt == 1
        #include "amclib.h"
      %endif
      extern AMCLIB_FW_SPEED_LOOP_T_FLT fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>;
      extern AMCLIB_FW_SPEED_LOOP_DEBUG_T_FLT fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>;
    %closefile tmpParamExternBuf
    %<LibCacheExtern(tmpParamExternBuf)>

    %assign cDataFileName = LibGetMdlDataSrcBaseName()
    %assign cDataFile = LibCreateSourceFile("Source", "Simulink", cDataFileName)
    %openfile tmpParamBuf
      %if ::instanceCnt == 1
        #include "amclib.h"
      %endif
      AMCLIB_FW_SPEED_LOOP_T_FLT fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>;
      AMCLIB_FW_SPEED_LOOP_DEBUG_T_FLT fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>;
    %closefile tmpParamBuf
    %<LibSetSourceFileSection(cDataFile , "Definitions", tmpParamBuf)>
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign y1BUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign work1BUS_addr = "&" + LibBlockPWork("", "", "", 1)
        %assign work2BUS_addr = "&" + LibBlockPWork("", "", "", 2)
        %assign work3BUS_addr = "&" + LibBlockPWork("", "", "", 3)
        %assign work4BUS_addr = "&" + LibBlockPWork("", "", "", 4)
        %assign work5BUS_addr = "&" + LibBlockPWork("", "", "", 5)
        %assign work6BUS_addr = "&" + LibBlockPWork("", "", "", 6)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (AMCLIB_FWSpeedLoop_SF_FLT_wrapper_allocmem(%<y1BUS_addr>, %<LibBlockOutputSignalWidth(0)>, %<work1BUS_addr>, %<LibBlockDWorkWidth(work1)>, %<work2BUS_addr>, %<LibBlockDWorkWidth(work2)>, %<work3BUS_addr>, %<LibBlockDWorkWidth(work3)>, %<work4BUS_addr>, %<LibBlockDWorkWidth(work4)>, %<work5BUS_addr>, %<LibBlockDWorkWidth(work5)>, %<work6BUS_addr>, %<LibBlockDWorkWidth(work6)>)!=0) %<LibSetRTModelErrorStatus("\"Memory allocation failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% Function: InitializeConditions =========================================
%function InitializeConditions (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign work1_ptr = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 1)
        %assign work2_ptr = LibBlockDWorkAddr(work2, "", "", 0)
        %assign work2BUS_ptr = LibBlockPWork("", "", "", 2)
        %assign work3_ptr = LibBlockDWorkAddr(work3, "", "", 0)
        %assign work3BUS_ptr = LibBlockPWork("", "", "", 3)
        %assign work4_ptr = LibBlockDWorkAddr(work4, "", "", 0)
        %assign work4BUS_ptr = LibBlockPWork("", "", "", 4)
        %assign work5_ptr = LibBlockDWorkAddr(work5, "", "", 0)
        %assign work5BUS_ptr = LibBlockPWork("", "", "", 5)
        %assign work6_ptr = LibBlockDWorkAddr(work6, "", "", 0)
        %assign work6BUS_ptr = LibBlockPWork("", "", "", 6)
        %assign work7_ptr = LibBlockDWorkAddr(work7, "", "", 0)
        %assign work8_ptr = LibBlockDWorkAddr(work8, "", "", 0)
        %assign p4_val = LibBlockParameter(p4, "", "", 0)
        %assign p5_val = LibBlockParameter(p5, "", "", 0)
        %assign p6_val = LibBlockParameter(p6, "", "", 0)
        %assign p7_val = LibBlockParameter(p7, "", "", 0)
        %assign p8_val = LibBlockParameter(p8, "", "", 0)
        %assign p9_val = LibBlockParameter(p9, "", "", 0)
        %assign p10_val = LibBlockParameter(p10, "", "", 0)
        %assign p11_val = LibBlockParameter(p11, "", "", 0)
        %assign p12_val = LibBlockParameter(p12, "", "", 0)
        %assign p13_val = LibBlockParameter(p13, "", "", 0)
        %assign p14_val = LibBlockParameter(p14, "", "", 0)
        %assign p15_val = LibBlockParameter(p15, "", "", 0)
        %assign p16_val = LibBlockParameter(p16, "", "", 0)
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign p2_val = LibBlockParameter(p2, "", "", 0)
        %assign p3_val = LibBlockParameter(p3, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        AMCLIB_FWSpeedLoop_SF_FLT_wrapper_InitializeConditions(%<work1_ptr>, %<work1BUS_ptr>, %<work2_ptr>, %<work2BUS_ptr>, %<work3_ptr>, %<work3BUS_ptr>, %<work4_ptr>, %<work4BUS_ptr>, %<work5_ptr>, %<work5BUS_ptr>, %<work6_ptr>, %<work6BUS_ptr>, %<work7_ptr>, %<work8_ptr>, %<p4_val>, %<p5_val>, %<p6_val>, %<p7_val>, %<p8_val>, %<p9_val>, %<p10_val>, %<p11_val>, %<p12_val>, %<p13_val>, %<p14_val>, %<p15_val>, %<p16_val>, %<p1_val>, %<p2_val>, %<p3_val>);
    %else
        %assign pIDQReqState = LibBlockDWork(work1, "", "", 0)
        %assign pFilterW = LibBlockDWork(work2, "", "", 0)
        %assign pFilterFW = LibBlockDWork(work3, "", "", 0)
        %assign pPIpAWQ = LibBlockDWork(work4, "", "", 0)
        %assign pPIpAWFW = LibBlockDWork(work5, "", "", 0)
        %assign pRamp = LibBlockDWork(work6, "", "", 0)
        %assign s32ResetStates = LibBlockDWork(work7, "", "", 0)
        %assign fltFWParam_fltUmaxDivImax = LibBlockDWork(work8, "", "", 0)
        %assign fltUmaxDivImax = LibBlockParameter(p4, "", "", 0)
        %assign fltLambdaW = LibBlockParameter(p5, "", "", 0)
        %assign fltLambdaFW = LibBlockParameter(p6, "", "", 0)
        %assign fltPropGainQ = LibBlockParameter(p7, "", "", 0)
        %assign fltIntegGainQ = LibBlockParameter(p8, "", "", 0)
        %assign fltLowerLimitQ = LibBlockParameter(p9, "", "", 0)
        %assign fltUpperLimitQ = LibBlockParameter(p10, "", "", 0)
        %assign fltPropGainFW = LibBlockParameter(p11, "", "", 0)
        %assign fltIntegGainFW = LibBlockParameter(p12, "", "", 0)
        %assign fltLowerLimitFW = LibBlockParameter(p13, "", "", 0)
        %assign fltUpperLimitFW = LibBlockParameter(p14, "", "", 0)
        %assign fltRampUp = LibBlockParameter(p15, "", "", 0)
        %assign fltRampDown = LibBlockParameter(p16, "", "", 0)
        %assign showStates = LibBlockParameter(p1, "", "", 0)
        %assign resetStatesEnable = LibBlockParameter(p2, "", "", 0)
        %assign showDebugOutputs = LibBlockParameter(p3, "", "", 0)
        %% 
        %if FEVAL("strcmp", showStates, "2")
          %if FEVAL("strcmp", showDebugOutputs, "2")
            /* Copy parameters to DEBUG state struct */
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pFilterW.fltLambda = (tFloat)(%<fltLambdaW>);
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pFilterFW.fltLambda = (tFloat)(%<fltLambdaFW>);
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltPropGain = (tFloat)(%<fltPropGainQ>);
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltIntegGain = (tFloat)(%<fltIntegGainQ>);
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltLowerLimit = (tFloat)(%<fltLowerLimitQ>);
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltUpperLimit = (tFloat)(%<fltUpperLimitQ>);
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltPropGain = (tFloat)(%<fltPropGainFW>);
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltIntegGain = (tFloat)(%<fltIntegGainFW>);
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltLowerLimit = (tFloat)(%<fltLowerLimitFW>);
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltUpperLimit = (tFloat)(%<fltUpperLimitFW>);
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pRamp.fltRampUp = (tFloat)(%<fltRampUp>);
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pRamp.fltRampDown = (tFloat)(%<fltRampDown>);
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.fltUmaxDivImax = (tFloat)(%<fltUmaxDivImax>);
          %endif
        %endif
        
        /* Copy parameters to state struct */
        fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pFilterW.fltLambda = (tFloat)(%<fltLambdaW>);
        fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pFilterFW.fltLambda = (tFloat)(%<fltLambdaFW>);
        fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltPropGain = (tFloat)(%<fltPropGainQ>);
        fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltIntegGain = (tFloat)(%<fltIntegGainQ>);
        fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltLowerLimit = (tFloat)(%<fltLowerLimitQ>);
        fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltUpperLimit = (tFloat)(%<fltUpperLimitQ>);
        fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltPropGain = (tFloat)(%<fltPropGainFW>);
        fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltIntegGain = (tFloat)(%<fltIntegGainFW>);
        fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltLowerLimit = (tFloat)(%<fltLowerLimitFW>);
        fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltUpperLimit = (tFloat)(%<fltUpperLimitFW>);
        fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pRamp.fltRampUp = (tFloat)(%<fltRampUp>);
        fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pRamp.fltRampDown = (tFloat)(%<fltRampDown>);
        fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.fltUmaxDivImax = (tFloat)(%<fltUmaxDivImax>);
        
        AMCLIB_FWSpeedLoopInit_FLT(&fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>);
        
        /* Set Simulink state to zero */
        (%<pIDQReqState>).fltArg1 = 0.0f;
        (%<pIDQReqState>).fltArg2 = 0.0f;
        
        %if FEVAL("strcmp", showStates, "2")
          %if FEVAL("strcmp", showDebugOutputs, "2")
            /* Copy struct states to DEBUG struct states */
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pFilterW.fltAcc = fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pFilterW.fltAcc;
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pFilterFW.fltAcc = fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pFilterFW.fltAcc;
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltIntegPartK_1 = fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltIntegPartK_1;
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltInK_1 = fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltInK_1;
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltIntegPartK_1 = fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltIntegPartK_1;
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltInK_1 = fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltInK_1;
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pRamp.fltState = fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pRamp.fltState;
          %endif
        %endif
        
        %if FEVAL("strcmp", resetStatesEnable, "1")
          %<s32ResetStates> = (tS32)1;
        %endif
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign u1_val = LibBlockInputSignal(0, "", "", 0)
        %assign u2_val = LibBlockInputSignal(1, "", "", 0)
        %assign work1_ptr = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 1)
        %assign work2_ptr = LibBlockDWorkAddr(work2, "", "", 0)
        %assign work2BUS_ptr = LibBlockPWork("", "", "", 2)
        %assign work3_ptr = LibBlockDWorkAddr(work3, "", "", 0)
        %assign work3BUS_ptr = LibBlockPWork("", "", "", 3)
        %assign work4_ptr = LibBlockDWorkAddr(work4, "", "", 0)
        %assign work4BUS_ptr = LibBlockPWork("", "", "", 4)
        %assign work5_ptr = LibBlockDWorkAddr(work5, "", "", 0)
        %assign work5BUS_ptr = LibBlockPWork("", "", "", 5)
        %assign work6_ptr = LibBlockDWorkAddr(work6, "", "", 0)
        %assign work6BUS_ptr = LibBlockPWork("", "", "", 6)
        %assign work7_ptr = LibBlockDWorkAddr(work7, "", "", 0)
        %assign work8_ptr = LibBlockDWorkAddr(work8, "", "", 0)
        %assign u3_ptr = LibBlockInputSignalAddr(2, "", "", 0)
        %assign u4_ptr = LibBlockInputSignalAddr(3, "", "", 0)
        %assign u5_ptr = LibBlockInputSignalAddr(4, "", "", 0)
        %assign u6_val = LibBlockInputSignal(5, "", "", 0)
        %assign u7_val = LibBlockInputSignal(6, "", "", 0)
        %assign u8_val = LibBlockInputSignal(7, "", "", 0)
        %assign u9_val = LibBlockInputSignal(8, "", "", 0)
        %assign u10_val = LibBlockInputSignal(9, "", "", 0)
        %assign u11_val = LibBlockInputSignal(10, "", "", 0)
        %assign u12_val = LibBlockInputSignal(11, "", "", 0)
        %assign u13_val = LibBlockInputSignal(12, "", "", 0)
        %assign u14_val = LibBlockInputSignal(13, "", "", 0)
        %assign u15_val = LibBlockInputSignal(14, "", "", 0)
        %assign u16_val = LibBlockInputSignal(15, "", "", 0)
        %assign u17_val = LibBlockInputSignal(16, "", "", 0)
        %assign u18_val = LibBlockInputSignal(17, "", "", 0)
        %assign u19_val = LibBlockInputSignal(18, "", "", 0)
        %assign u20_val = LibBlockInputSignal(19, "", "", 0)
        %assign u21_val = LibBlockInputSignal(20, "", "", 0)
        %assign u22_val = LibBlockInputSignal(21, "", "", 0)
        %assign u23_val = LibBlockInputSignal(22, "", "", 0)
        %assign u24_val = LibBlockInputSignal(23, "", "", 0)
        %assign u25_val = LibBlockInputSignal(24, "", "", 0)
        %assign u26_val = LibBlockInputSignal(25, "", "", 0)
        %assign u27_val = LibBlockInputSignal(26, "", "", 0)
        %assign u28_val = LibBlockInputSignal(27, "", "", 0)
        %assign u29_val = LibBlockInputSignal(28, "", "", 0)
        %assign u30_val = LibBlockInputSignal(29, "", "", 0)
        %assign u31_val = LibBlockInputSignal(30, "", "", 0)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign y1BUS_ptr = LibBlockPWork("", "", "", 0)
        %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign y3_ptr = LibBlockOutputSignalAddr(2, "", "", 0)
        %assign y4_ptr = LibBlockOutputSignalAddr(3, "", "", 0)
        %assign y5_ptr = LibBlockOutputSignalAddr(4, "", "", 0)
        %assign y6_ptr = LibBlockOutputSignalAddr(5, "", "", 0)
        %assign y7_ptr = LibBlockOutputSignalAddr(6, "", "", 0)
        %assign y8_ptr = LibBlockOutputSignalAddr(7, "", "", 0)
        %assign y9_ptr = LibBlockOutputSignalAddr(8, "", "", 0)
        %assign y10_ptr = LibBlockOutputSignalAddr(9, "", "", 0)
        %assign y11_ptr = LibBlockOutputSignalAddr(10, "", "", 0)
        %assign y12_ptr = LibBlockOutputSignalAddr(11, "", "", 0)
        %assign y13_ptr = LibBlockOutputSignalAddr(12, "", "", 0)
        %assign y14_ptr = LibBlockOutputSignalAddr(13, "", "", 0)
        %assign y15_ptr = LibBlockOutputSignalAddr(14, "", "", 0)
        %assign y16_ptr = LibBlockOutputSignalAddr(15, "", "", 0)
        %assign y17_ptr = LibBlockOutputSignalAddr(16, "", "", 0)
        %assign y18_ptr = LibBlockOutputSignalAddr(17, "", "", 0)
        %assign y19_ptr = LibBlockOutputSignalAddr(18, "", "", 0)
        %assign y20_ptr = LibBlockOutputSignalAddr(19, "", "", 0)
        %assign y21_ptr = LibBlockOutputSignalAddr(20, "", "", 0)
        %assign y22_ptr = LibBlockOutputSignalAddr(21, "", "", 0)
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign p2_val = LibBlockParameter(p2, "", "", 0)
        %assign p3_val = LibBlockParameter(p3, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        AMCLIB_FWSpeedLoop_SF_FLT_wrapper_Output(%<u1_val>, %<u2_val>, %<work1_ptr>, %<work1BUS_ptr>, %<work2_ptr>, %<work2BUS_ptr>, %<work3_ptr>, %<work3BUS_ptr>, %<work4_ptr>, %<work4BUS_ptr>, %<work5_ptr>, %<work5BUS_ptr>, %<work6_ptr>, %<work6BUS_ptr>, %<work7_ptr>, %<work8_ptr>, %<u3_ptr>, %<u4_ptr>, %<u5_ptr>, %<u6_val>, %<u7_val>, %<u8_val>, %<u9_val>, %<u10_val>, %<u11_val>, %<u12_val>, %<u13_val>, %<u14_val>, %<u15_val>, %<u16_val>, %<u17_val>, %<u18_val>, %<u19_val>, %<u20_val>, %<u21_val>, %<u22_val>, %<u23_val>, %<u24_val>, %<u25_val>, %<u26_val>, %<u27_val>, %<u28_val>, %<u29_val>, %<u30_val>, %<u31_val>, %<y1_ptr>, %<y1BUS_ptr>, %<y2_ptr>, %<y3_ptr>, %<y4_ptr>, %<y5_ptr>, %<y6_ptr>, %<y7_ptr>, %<y8_ptr>, %<y9_ptr>, %<y10_ptr>, %<y11_ptr>, %<y12_ptr>, %<y13_ptr>, %<y14_ptr>, %<y15_ptr>, %<y16_ptr>, %<y17_ptr>, %<y18_ptr>, %<y19_ptr>, %<y20_ptr>, %<y21_ptr>, %<y22_ptr>, %<p1_val>, %<p2_val>, %<p3_val>);
    %else
        %assign fltVelocityReq = LibBlockInputSignal(0, "", "", 0)
        %assign fltVelocityFbck = LibBlockInputSignal(1, "", "", 0)
        %assign pIDQReqState = LibBlockDWorkAddr(work1, "", "", 0)
        %assign pFilterW = LibBlockDWork(work2, "", "", 0)
        %assign pFilterFW = LibBlockDWork(work3, "", "", 0)
        %assign pPIpAWQ = LibBlockDWork(work4, "", "", 0)
        %assign pPIpAWFW = LibBlockDWork(work5, "", "", 0)
        %assign pRamp = LibBlockDWork(work6, "", "", 0)
        %assign s32ResetStates = LibBlockDWork(work7, "", "", 0)
        %assign fltFWParam_fltUmaxDivImax = LibBlockDWork(work8, "", "", 0)
        %assign fltIQFbck = LibBlockInputSignalAddr(2, "", "", 0)
        %assign fltUQReq = LibBlockInputSignalAddr(3, "", "", 0)
        %assign fltUQLim = LibBlockInputSignalAddr(4, "", "", 0)
        %assign fltFilterMAWOut = LibBlockInputSignal(5, "", "", 0)
        %assign fltFilterMAFWOut = LibBlockInputSignal(6, "", "", 0)
        %assign fltControllerPIpAWQOut = LibBlockInputSignal(7, "", "", 0)
        %assign fltControllerPIpAWFWOut = LibBlockInputSignal(8, "", "", 0)
        %assign fltRampOut = LibBlockInputSignal(9, "", "", 0)
        %assign fltUmaxDivImax = LibBlockInputSignal(10, "", "", 0)
        %assign fltLambdaW = LibBlockInputSignal(11, "", "", 0)
        %assign fltLambdaFW = LibBlockInputSignal(12, "", "", 0)
        %assign fltPropGainQ = LibBlockInputSignal(13, "", "", 0)
        %assign fltIntegGainQ = LibBlockInputSignal(14, "", "", 0)
        %assign fltLowerLimitQ = LibBlockInputSignal(15, "", "", 0)
        %assign fltUpperLimitQ = LibBlockInputSignal(16, "", "", 0)
        %assign fltPropGainFW = LibBlockInputSignal(17, "", "", 0)
        %assign fltIntegGainFW = LibBlockInputSignal(18, "", "", 0)
        %assign fltLowerLimitFW = LibBlockInputSignal(19, "", "", 0)
        %assign fltUpperLimitFW = LibBlockInputSignal(20, "", "", 0)
        %assign fltRampUp = LibBlockInputSignal(21, "", "", 0)
        %assign fltRampDown = LibBlockInputSignal(22, "", "", 0)
        %assign fltIQReqK_1 = LibBlockInputSignal(23, "", "", 0)
        %assign fltAccW = LibBlockInputSignal(24, "", "", 0)
        %assign fltAccFW = LibBlockInputSignal(25, "", "", 0)
        %assign fltIntegPartK_1Q = LibBlockInputSignal(26, "", "", 0)
        %assign fltInK_1Q = LibBlockInputSignal(27, "", "", 0)
        %assign fltIntegPartK_1FW = LibBlockInputSignal(28, "", "", 0)
        %assign fltInK_1FW = LibBlockInputSignal(29, "", "", 0)
        %assign fltState = LibBlockInputSignal(30, "", "", 0)
        %assign pIDQReq = LibBlockOutputSignal(0, "", "", 0)
        %assign u16LimitFlagQ = LibBlockOutputSignal(1, "", "", 0)
        %assign u16LimitFlagFW = LibBlockOutputSignal(2, "", "", 0)
        %assign fltWReqFilt = LibBlockOutputSignal(3, "", "", 0)
        %assign fltWErr = LibBlockOutputSignal(4, "", "", 0)
        %assign fltIDQReqAmp = LibBlockOutputSignal(5, "", "", 0)
        %assign fltWFbckFilt = LibBlockOutputSignal(6, "", "", 0)
        %assign fltIQErrSign = LibBlockOutputSignal(7, "", "", 0)
        %assign fltFWErr = LibBlockOutputSignal(8, "", "", 0)
        %assign fltIQErr = LibBlockOutputSignal(9, "", "", 0)
        %assign fltUQErr = LibBlockOutputSignal(10, "", "", 0)
        %assign fltFWErrFilt = LibBlockOutputSignal(11, "", "", 0)
        %assign fltFWAngle = LibBlockOutputSignal(12, "", "", 0)
        %assign fltFWSin = LibBlockOutputSignal(13, "", "", 0)
        %assign fltFWCos = LibBlockOutputSignal(14, "", "", 0)
        %assign fltAccW_Out = LibBlockOutputSignal(15, "", "", 0)
        %assign fltAccFW_Out = LibBlockOutputSignal(16, "", "", 0)
        %assign fltIntegPartK_1Q_Out = LibBlockOutputSignal(17, "", "", 0)
        %assign fltInK_1Q_Out = LibBlockOutputSignal(18, "", "", 0)
        %assign fltIntegPartK_1FW_Out = LibBlockOutputSignal(19, "", "", 0)
        %assign fltInK_1FW_Out = LibBlockOutputSignal(20, "", "", 0)
        %assign fltState_Out = LibBlockOutputSignal(21, "", "", 0)
        %assign showStates = LibBlockParameter(p1, "", "", 0)
        %assign resetStatesEnable = LibBlockParameter(p2, "", "", 0)
        %assign showDebugOutputs = LibBlockParameter(p3, "", "", 0)
        %% 
        %if FEVAL("strcmp", showStates, "2")
          /* Copy inputs to Simulink states */
          (%<pIDQReqState>)->fltArg2 = (tFloat)(%<fltIQReqK_1>);
        
          %if FEVAL("strcmp", showDebugOutputs, "2")
            /* Copy inputs to DEBUG struct states */
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pFilterW.fltAcc = (tFloat)(%<fltAccW>);
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pFilterW.fltLambda = (tFloat)(%<fltLambdaW>);
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pFilterFW.fltAcc = (tFloat)(%<fltAccFW>);
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pFilterFW.fltLambda = (tFloat)(%<fltLambdaFW>);
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltPropGain = (tFloat)(%<fltPropGainQ>);
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltIntegGain = (tFloat)(%<fltIntegGainQ>);
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltLowerLimit = (tFloat)(%<fltLowerLimitQ>);
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltUpperLimit = (tFloat)(%<fltUpperLimitQ>);
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltIntegPartK_1 = (tFloat)(%<fltIntegPartK_1Q>);
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltInK_1 = (tFloat)(%<fltInK_1Q>);
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltPropGain = (tFloat)(%<fltPropGainFW>);
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltIntegGain = (tFloat)(%<fltIntegGainFW>);
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltLowerLimit = (tFloat)(%<fltLowerLimitFW>);
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltUpperLimit = (tFloat)(%<fltUpperLimitFW>);
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltIntegPartK_1 = (tFloat)(%<fltIntegPartK_1FW>);
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltInK_1 = (tFloat)(%<fltInK_1FW>);
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pRamp.fltState = (tFloat)(%<fltState>);
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pRamp.fltRampUp = (tFloat)(%<fltRampUp>);
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pRamp.fltRampDown = (tFloat)(%<fltRampDown>);
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pIQFbck = (tFloat *)(%<fltIQFbck>);
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pUQReq = (tFloat *)(%<fltUQReq>);
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pUQLim = (tFloat *)(%<fltUQLim>);
            fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.fltUmaxDivImax = (tFloat)(%<fltUmaxDivImax>);
          %endif
        
          /* Copy inputs to struct states */
          fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pFilterW.fltAcc = (tFloat)(%<fltAccW>);
          fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pFilterW.fltLambda = (tFloat)(%<fltLambdaW>);
          fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pFilterFW.fltAcc = (tFloat)(%<fltAccFW>);
          fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pFilterFW.fltLambda = (tFloat)(%<fltLambdaFW>);
          fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltPropGain = (tFloat)(%<fltPropGainQ>);
          fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltIntegGain = (tFloat)(%<fltIntegGainQ>);
          fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltLowerLimit = (tFloat)(%<fltLowerLimitQ>);
          fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltUpperLimit = (tFloat)(%<fltUpperLimitQ>);
          fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltIntegPartK_1 = (tFloat)(%<fltIntegPartK_1Q>);
          fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltInK_1 = (tFloat)(%<fltInK_1Q>);
          fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltPropGain = (tFloat)(%<fltPropGainFW>);
          fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltIntegGain = (tFloat)(%<fltIntegGainFW>);
          fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltLowerLimit = (tFloat)(%<fltLowerLimitFW>);
          fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltUpperLimit = (tFloat)(%<fltUpperLimitFW>);
          fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltIntegPartK_1 = (tFloat)(%<fltIntegPartK_1FW>);
          fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltInK_1 = (tFloat)(%<fltInK_1FW>);
          fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pRamp.fltState = (tFloat)(%<fltState>);
          fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pRamp.fltRampUp = (tFloat)(%<fltRampUp>);
          fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pRamp.fltRampDown = (tFloat)(%<fltRampDown>);
          fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.fltUmaxDivImax = (tFloat)(%<fltUmaxDivImax>);
        %endif
        
        /* Copy inputs to struct states */
        fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pIQFbck = (tFloat *)(%<fltIQFbck>);
        fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pUQReq = (tFloat *)(%<fltUQReq>);
        fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pUQLim = (tFloat *)(%<fltUQLim>);
        
        %if FEVAL("strcmp", resetStatesEnable, "1")
          if ((tS32)(%<s32ResetStates>) != (tS32)0)
          {
            %<s32ResetStates> = (tS32)0;
            AMCLIB_FWSpeedLoopSetState_FLT((tFloat)(%<fltFilterMAWOut>), (tFloat)(%<fltFilterMAFWOut>), (tFloat)(%<fltControllerPIpAWQOut>), (tFloat)(%<fltControllerPIpAWFWOut>), (tFloat)(%<fltRampOut>), &fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>);
            %if FEVAL("strcmp", showStates, "2")
              %if FEVAL("strcmp", showDebugOutputs, "2")
                /* Copy struct states to DEBUG struct states */
                fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pFilterW.fltAcc = fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pFilterW.fltAcc;
                fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pFilterFW.fltAcc = fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pFilterFW.fltAcc;
                fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltIntegPartK_1 = fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltIntegPartK_1;
                fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltInK_1 = fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltInK_1;
                fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltIntegPartK_1 = fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltIntegPartK_1;
                fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltInK_1 = fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltInK_1;
                fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pRamp.fltState = fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pRamp.fltState;
              %endif
            %endif
            /* Set Simulink state to zero */
            (%<pIDQReqState>)->fltArg1 = 0.0f;
            (%<pIDQReqState>)->fltArg2 = 0.0f;
          }
          else
          {
            %if FEVAL("strcmp", showStates, "2")
              %if FEVAL("strcmp", showDebugOutputs, "2")
                AMCLIB_FWSpeedLoopDebug_FLT((tFloat)(%<fltVelocityReq>), (tFloat)(%<fltVelocityFbck>), (SWLIBS_2Syst_FLT *)(%<pIDQReqState>),
                  &fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>);
              %else
                AMCLIB_FWSpeedLoop_FLT((tFloat)(%<fltVelocityReq>), (tFloat)(%<fltVelocityFbck>), (SWLIBS_2Syst_FLT *)(%<pIDQReqState>), &fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>);
              %endif
            %else
              AMCLIB_FWSpeedLoop_FLT((tFloat)(%<fltVelocityReq>), (tFloat)(%<fltVelocityFbck>), (SWLIBS_2Syst_FLT *)(%<pIDQReqState>), &fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>);
            %endif
          }
        %else
          %if FEVAL("strcmp", showStates, "2")
            %if FEVAL("strcmp", showDebugOutputs, "2")
              AMCLIB_FWSpeedLoopDebug_FLT((tFloat)(%<fltVelocityReq>), (tFloat)(%<fltVelocityFbck>), (SWLIBS_2Syst_FLT *)(%<pIDQReqState>),
                  &fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>);
            %else
              AMCLIB_FWSpeedLoop_FLT((tFloat)(%<fltVelocityReq>), (tFloat)(%<fltVelocityFbck>), (SWLIBS_2Syst_FLT *)(%<pIDQReqState>), &fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>);
            %endif
          %else
            AMCLIB_FWSpeedLoop_FLT((tFloat)(%<fltVelocityReq>), (tFloat)(%<fltVelocityFbck>), (SWLIBS_2Syst_FLT *)(%<pIDQReqState>), &fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>);
          %endif
        %endif
        
        /* Copy Simulink states to output */
        (%<pIDQReq>).fltArg1 = (%<pIDQReqState>)->fltArg1;
        (%<pIDQReq>).fltArg2 = (%<pIDQReqState>)->fltArg2;
        
        %if FEVAL("strcmp", showStates, "2")
          %if FEVAL("strcmp", showDebugOutputs, "2")
            /* Copy DEBUG struct states to outputs */
            %<u16LimitFlagQ> = fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.u16LimitFlag;
            %<u16LimitFlagFW> = fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.u16LimitFlag;
            %<fltWReqFilt> = fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.fltWReqFilt;
            %<fltWErr> = fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.fltWErr;
            %<fltIDQReqAmp> = fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.fltIDQReqAmp;
            %<fltWFbckFilt> = fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.fltWFbckFilt;
            %<fltIQErrSign> = fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.fltIQErrSign;
            %<fltIQErr> = fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.fltIQErr;
            %<fltFWErr> = fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.fltFWErr;
            %<fltUQErr> = fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.fltUQErr;
            %<fltFWErrFilt> = fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.fltFWErrFilt;
            %<fltFWAngle> = fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.fltFWAngle;
            %<fltFWSin> = fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.fltFWSin;
            %<fltFWCos> = fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.fltFWCos;
            %<fltAccW_Out> = fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pFilterW.fltAcc;
            %<fltAccFW_Out> = fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pFilterFW.fltAcc;
            %<fltIntegPartK_1Q_Out> = fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltIntegPartK_1;
            %<fltInK_1Q_Out> = fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltInK_1;
            %<fltIntegPartK_1FW_Out> = fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltIntegPartK_1;
            %<fltInK_1FW_Out> = fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltInK_1;
            %<fltState_Out> = fltFWSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pRamp.fltState;
          %else
            /* Copy struct states to outputs */
            %<u16LimitFlagQ> = fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.u16LimitFlag;
            %<u16LimitFlagFW> = fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.u16LimitFlag;
            %<fltAccW_Out> = fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pFilterW.fltAcc;
            %<fltAccFW_Out> = fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pFilterFW.fltAcc;
            %<fltIntegPartK_1Q_Out> = fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltIntegPartK_1;
            %<fltInK_1Q_Out> = fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltInK_1;
            %<fltIntegPartK_1FW_Out> = fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltIntegPartK_1;
            %<fltInK_1FW_Out> = fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltInK_1;
            %<fltState_Out> = fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pRamp.fltState;
          %endif
        %else
          /* Copy struct states to outputs */
          %<u16LimitFlagFW> = fltFWSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.u16LimitFlag;
        %endif
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign y1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign work1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 1)
        %assign work2BUSBUS_addr = "&" + LibBlockPWork("", "", "", 2)
        %assign work3BUSBUS_addr = "&" + LibBlockPWork("", "", "", 3)
        %assign work4BUSBUS_addr = "&" + LibBlockPWork("", "", "", 4)
        %assign work5BUSBUS_addr = "&" + LibBlockPWork("", "", "", 5)
        %assign work6BUSBUS_addr = "&" + LibBlockPWork("", "", "", 6)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (AMCLIB_FWSpeedLoop_SF_FLT_wrapper_freemem(%<y1BUSBUS_addr>, %<work1BUSBUS_addr>, %<work2BUSBUS_addr>, %<work3BUSBUS_addr>, %<work4BUSBUS_addr>, %<work5BUSBUS_addr>, %<work6BUSBUS_addr>)!=0) %<LibSetRTModelErrorStatus("\"Memory free failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% [EOF]
