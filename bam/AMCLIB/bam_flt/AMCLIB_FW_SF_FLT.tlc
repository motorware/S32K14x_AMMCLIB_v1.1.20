%% file : AMCLIB_FW_SF_FLT.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for AMCLIB_FW_SF_FLT
%% 
%% Simulink version      : 9.3 (R2019a) 23-Nov-2018
%% TLC file generated on : 15-Apr-2020 20:59:00

%% Copyright 2019-2020 NXP
%%
%% NXP Confidential. This software is owned or controlled by NXP and may only be used strictly in
%% accordance with the applicable license terms.  By expressly accepting such terms or by
%% downloading, installing, activating and/or otherwise using the software, you are agreeing that
%% you have read, and that you agree to comply with and are bound by, such license terms.  If you
%% do not agree to be bound by the applicable license terms, then you may not retain, install,
%% activate or otherwise use the software.

%implements AMCLIB_FW_SF_FLT "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %assign ver = FEVAL("ver", "simulink")
    %assign factor = 1.0
    %assign slVer = 0.0
    %foreach idx = SIZE(ver.Version)[1]
        %if ISEQUAL(ver.Version[idx], ".")
            %assign factor = factor/10.0
        %else
            %assign slVer = slVer + %<ver.Version[idx]>*factor
        %endif
    %endforeach
    
    %if GenerateErtSFunction==1 && slVer < 6.21
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink Object) may not be used in a model for which an ERT S-Function wrapper is being generated")>
    %endif
    
    %if ExtMode==1 && slVer < 6.3
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a model uses External Mode")>
    %endif
    
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %if slVer < 6.21
            %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a referenced model")>
        %endif
        
        %assign hFileName = FcnGenerateUniqueFileName("AMCLIB_FW_SF_FLT_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif
        
        extern int AMCLIB_FW_SF_FLT_wrapper_allocmem(void** y1BUS, int_T y1BUSWidth, void** work1BUS, int_T work1BUSWidth, void** work2BUS, int_T work2BUSWidth, void** work3BUS, int_T work3BUSWidth);
        extern int AMCLIB_FW_SF_FLT_wrapper_freemem(void** y1BUS, void** work1BUS, void** work2BUS, void** work3BUS);

        extern void AMCLIB_FW_SF_FLT_wrapper_InitializeConditions( void* work1, void* work1BUS,  void* work2, void* work2BUS,  void* work3, void* work3BUS,  int32_T* work4,  real32_T* work5, const real32_T p4, const real32_T p5, const real32_T p6, const real32_T p7, const real32_T p8, const real32_T p9, const int32_T p1, const int32_T p2, const int32_T p3);
        extern void AMCLIB_FW_SF_FLT_wrapper_Output(const real32_T u1, const real32_T u2,  void* work1, void* work1BUS,  void* work2, void* work2BUS,  void* work3, void* work3BUS,  int32_T* work4,  real32_T* work5, const real32_T* u3, const real32_T* u4, const real32_T* u5, const real32_T u6, const real32_T u7, const real32_T u8, const real32_T u9, const real32_T u10, const real32_T u11, const real32_T u12, const real32_T u13, const real32_T u14, const real32_T u15, const real32_T u16, const real32_T u17,  void* y1, void* y1BUS,  uint16_T* y2,  real32_T* y3,  real32_T* y4,  real32_T* y5,  real32_T* y6,  real32_T* y7,  real32_T* y8,  real32_T* y9,  real32_T* y10,  real32_T* y11,  real32_T* y12,  real32_T* y13, const int32_T p1, const int32_T p2, const int32_T p3);
        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("AMCLIB_FW_SF_FLT_wrapper", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <stdlib.h>
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif

        #include "amclib.h"
        #include "gdflib.h"
        #include "gflib.h"

        #include "SWLIBS_Typedefs.h"
        #include "GDFLIB_FilterMA.h"
        #include "GFLIB_ControllerPIpAW.h"

        int AMCLIB_FW_SF_FLT_wrapper_allocmem(void** y1BUS, int_T y1BUSWidth, void** work1BUS, int_T work1BUSWidth, void** work2BUS, int_T work2BUSWidth, void** work3BUS, int_T work3BUSWidth) {
            *y1BUS = calloc(sizeof(SWLIBS_2Syst_FLT), y1BUSWidth);
            if (*y1BUS==NULL) return -1;
            *work1BUS = calloc(sizeof(SWLIBS_2Syst_FLT), work1BUSWidth);
            if (*work1BUS==NULL) return -1;
            *work2BUS = calloc(sizeof(GDFLIB_FILTER_MA_T_FLT), work2BUSWidth);
            if (*work2BUS==NULL) return -1;
            *work3BUS = calloc(sizeof(GFLIB_CONTROLLER_PIAW_P_T_FLT), work3BUSWidth);
            if (*work3BUS==NULL) return -1;
            return 0;
        }
        
        int AMCLIB_FW_SF_FLT_wrapper_freemem(void** y1BUS, void** work1BUS, void** work2BUS, void** work3BUS) {
            if (*y1BUS!=NULL) free(*y1BUS);
            *y1BUS = NULL;
            if (*work1BUS!=NULL) free(*work1BUS);
            *work1BUS = NULL;
            if (*work2BUS!=NULL) free(*work2BUS);
            *work2BUS = NULL;
            if (*work3BUS!=NULL) free(*work3BUS);
            *work3BUS = NULL;
            return 0;
        }

        void AMCLIB_FW_SF_FLT_wrapper_InitializeConditions( void* work1, void* work1BUS,  void* work2, void* work2BUS,  void* work3, void* work3BUS,  int32_T* work4,  real32_T* work5, const real32_T p4, const real32_T p5, const real32_T p6, const real32_T p7, const real32_T p8, const real32_T p9, const int32_T p1, const int32_T p2, const int32_T p3) {

            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(SWLIBS_2Syst_FLT *)work1BUS)", "(char *)work1", 0)>


            /* Assign the Simulink structure work2 to user structure work2BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work2)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GDFLIB_FILTER_MA_T_FLT *)work2BUS)", "(char *)work2", 0)>


            /* Assign the Simulink structure work3 to user structure work3BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work3)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GFLIB_CONTROLLER_PIAW_P_T_FLT *)work3BUS)", "(char *)work3", 0)>

                AMCLIB_FW_T_FLT fltFWStateStr;
                
                /* Copy parameters to Simulink states */
                ((GDFLIB_FILTER_MA_T_FLT *)(work2BUS))->fltLambda = (tFloat)(p5);
                ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work3BUS))->fltPropGain = (tFloat)(p6);
                ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work3BUS))->fltIntegGain = (tFloat)(p7);
                ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work3BUS))->fltLowerLimit = (tFloat)(p8);
                ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work3BUS))->fltUpperLimit = (tFloat)(p9);
                *((tFloat *)work5) = (tFloat)(p4);
            
                /* Copy Simulink state parameters to state struct */
                fltFWStateStr.pFilterFW.fltLambda = ((GDFLIB_FILTER_MA_T_FLT *)(work2BUS))->fltLambda;
                fltFWStateStr.pPIpAWFW.fltPropGain = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work3BUS))->fltPropGain;
                fltFWStateStr.pPIpAWFW.fltIntegGain = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work3BUS))->fltIntegGain;
                fltFWStateStr.pPIpAWFW.fltLowerLimit = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work3BUS))->fltLowerLimit;
                fltFWStateStr.pPIpAWFW.fltUpperLimit = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work3BUS))->fltUpperLimit;
                fltFWStateStr.fltUmaxDivImax = *(tFloat *)(work5);
                
                AMCLIB_FWInit_FLT(&fltFWStateStr);
            
                /* Set Simulink state to zero */
                ((SWLIBS_2Syst_FLT *)(work1BUS))->fltArg1 = 0.0f;
                ((SWLIBS_2Syst_FLT *)(work1BUS))->fltArg2 = 0.0f;
                
                /* Copy struct states to Simulink states */
                ((GDFLIB_FILTER_MA_T_FLT *)(work2BUS))->fltAcc = fltFWStateStr.pFilterFW.fltAcc;
                ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work3BUS))->fltIntegPartK_1 = fltFWStateStr.pPIpAWFW.fltIntegPartK_1;
                ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work3BUS))->fltInK_1 = fltFWStateStr.pPIpAWFW.fltInK_1;
                
                if ((tS32)1 == (tS32)(p2))
                {
                  *((tS32 *)work4) = (tS32)1;
                }

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(SWLIBS_2Syst_FLT *)work1BUS)", 0)>

            /* Assign the user structure work2BUS to the Simulink structure work2 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work2)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work2", "(*(GDFLIB_FILTER_MA_T_FLT *)work2BUS)", 0)>

            /* Assign the user structure work3BUS to the Simulink structure work3 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work3)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work3", "(*(GFLIB_CONTROLLER_PIAW_P_T_FLT *)work3BUS)", 0)>
        }

        void AMCLIB_FW_SF_FLT_wrapper_Output(const real32_T u1, const real32_T u2,  void* work1, void* work1BUS,  void* work2, void* work2BUS,  void* work3, void* work3BUS,  int32_T* work4,  real32_T* work5, const real32_T* u3, const real32_T* u4, const real32_T* u5, const real32_T u6, const real32_T u7, const real32_T u8, const real32_T u9, const real32_T u10, const real32_T u11, const real32_T u12, const real32_T u13, const real32_T u14, const real32_T u15, const real32_T u16, const real32_T u17,  void* y1, void* y1BUS,  uint16_T* y2,  real32_T* y3,  real32_T* y4,  real32_T* y5,  real32_T* y6,  real32_T* y7,  real32_T* y8,  real32_T* y9,  real32_T* y10,  real32_T* y11,  real32_T* y12,  real32_T* y13, const int32_T p1, const int32_T p2, const int32_T p3) {

            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(SWLIBS_2Syst_FLT *)work1BUS)", "(char *)work1", 0)>


            /* Assign the Simulink structure work2 to user structure work2BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work2)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GDFLIB_FILTER_MA_T_FLT *)work2BUS)", "(char *)work2", 0)>


            /* Assign the Simulink structure work3 to user structure work3BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work3)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GFLIB_CONTROLLER_PIAW_P_T_FLT *)work3BUS)", "(char *)work3", 0)>

            AMCLIB_FW_T_FLT fltFWStateStr;
            AMCLIB_FW_DEBUG_T_FLT fltFWDebugStateStr;
            
            if((tS32)2 == (tS32)(p1))
            {
              /* Copy inputs to Simulink states */
              ((SWLIBS_2Syst_FLT *)(work1BUS))->fltArg2 = (tFloat)(u14);
              ((GDFLIB_FILTER_MA_T_FLT *)(work2BUS))->fltAcc = (tFloat)(u15);
              ((GDFLIB_FILTER_MA_T_FLT *)(work2BUS))->fltLambda = (tFloat)(u9);
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work3BUS))->fltPropGain = (tFloat)(u10);
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work3BUS))->fltIntegGain = (tFloat)(u11);
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work3BUS))->fltLowerLimit = (tFloat)(u12);
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work3BUS))->fltUpperLimit = (tFloat)(u13);
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work3BUS))->fltIntegPartK_1 = (tFloat)(u16);
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work3BUS))->fltInK_1 = (tFloat)(u17);
              *((tFloat *)work5) = (tFloat)(u8);
            
              /* Copy Simulink states to DEBUG struct states */
              fltFWDebugStateStr.pFilterFW.fltAcc = ((GDFLIB_FILTER_MA_T_FLT *)(work2BUS))->fltAcc;
              fltFWDebugStateStr.pFilterFW.fltLambda = ((GDFLIB_FILTER_MA_T_FLT *)(work2BUS))->fltLambda;
              fltFWDebugStateStr.pPIpAWFW.fltPropGain = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work3BUS))->fltPropGain;
              fltFWDebugStateStr.pPIpAWFW.fltIntegGain = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work3BUS))->fltIntegGain;
              fltFWDebugStateStr.pPIpAWFW.fltLowerLimit = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work3BUS))->fltLowerLimit;
              fltFWDebugStateStr.pPIpAWFW.fltUpperLimit = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work3BUS))->fltUpperLimit;
              fltFWDebugStateStr.pPIpAWFW.fltIntegPartK_1 = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work3BUS))->fltIntegPartK_1;
              fltFWDebugStateStr.pPIpAWFW.fltInK_1 = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work3BUS))->fltInK_1;
              fltFWDebugStateStr.fltUmaxDivImax = *(tFloat *)(work5);
              
              /* Copy inputs to DEBUG struct states */
              fltFWDebugStateStr.pIQFbck = (tFloat *)(u3);
              fltFWDebugStateStr.pUQReq = (tFloat *)(u4);
              fltFWDebugStateStr.pUQLim = (tFloat *)(u5);
            }
            
            /* Copy Simulink states to struct states */
            fltFWStateStr.pFilterFW.fltAcc = ((GDFLIB_FILTER_MA_T_FLT *)(work2BUS))->fltAcc;
            fltFWStateStr.pFilterFW.fltLambda = ((GDFLIB_FILTER_MA_T_FLT *)(work2BUS))->fltLambda;
            fltFWStateStr.pPIpAWFW.fltPropGain = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work3BUS))->fltPropGain;
            fltFWStateStr.pPIpAWFW.fltIntegGain = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work3BUS))->fltIntegGain;
            fltFWStateStr.pPIpAWFW.fltLowerLimit = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work3BUS))->fltLowerLimit;
            fltFWStateStr.pPIpAWFW.fltUpperLimit = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work3BUS))->fltUpperLimit;
            fltFWStateStr.pPIpAWFW.fltIntegPartK_1 = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work3BUS))->fltIntegPartK_1;
            fltFWStateStr.pPIpAWFW.fltInK_1 = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work3BUS))->fltInK_1;
            fltFWStateStr.fltUmaxDivImax = *(tFloat *)(work5);
            
            /* Copy inputs to struct states */
            fltFWStateStr.pIQFbck = (tFloat *)(u3);
            fltFWStateStr.pUQReq = (tFloat *)(u4);
            fltFWStateStr.pUQLim = (tFloat *)(u5);
            
            if ((tS32)1 == (tS32)(p2))
            {
              if (*(tS32 *)(work4) != (tS32)0)
              {
                *((tS32 *)work4) = (tS32)0;
                AMCLIB_FWSetState_FLT((tFloat)(u6), (tFloat)(u7), &fltFWStateStr);
                if((tS32)2 == (tS32)(p1))
                {
                  /* Copy struct states to DEBUG struct states */
                  fltFWDebugStateStr.pFilterFW.fltAcc = fltFWStateStr.pFilterFW.fltAcc;
                  fltFWDebugStateStr.pPIpAWFW.fltIntegPartK_1 = fltFWStateStr.pPIpAWFW.fltIntegPartK_1;
                  fltFWDebugStateStr.pPIpAWFW.fltInK_1 = fltFWStateStr.pPIpAWFW.fltInK_1;
                }
                /* Set Simulink state to zero */
                ((SWLIBS_2Syst_FLT *)(work1BUS))->fltArg1 = 0.0f;
                ((SWLIBS_2Syst_FLT *)(work1BUS))->fltArg2 = 0.0f;
              }
              else
              {
                if((tS32)2 == (tS32)(p1))
                {
                  AMCLIB_FWDebug_FLT((tFloat)(u1), (tFloat)(u2), (SWLIBS_2Syst_FLT *)(work1BUS), &fltFWDebugStateStr);
                }
                else
                {
                  AMCLIB_FW_FLT((tFloat)(u1), (tFloat)(u2), (SWLIBS_2Syst_FLT *)(work1BUS), &fltFWStateStr);
                }
              }
            }
            else
            {
              if((tS32)2 == (tS32)(p1))
              {
                AMCLIB_FWDebug_FLT((tFloat)(u1), (tFloat)(u2), (SWLIBS_2Syst_FLT *)(work1BUS), &fltFWDebugStateStr);
              }
              else
              {
                AMCLIB_FW_FLT((tFloat)(u1), (tFloat)(u2), (SWLIBS_2Syst_FLT *)(work1BUS), &fltFWStateStr);
              }
            }
            
            /* Copy Simulink states to output */
            ((SWLIBS_2Syst_FLT *)(y1BUS))->fltArg1 = ((SWLIBS_2Syst_FLT *)(work1BUS))->fltArg1;
            ((SWLIBS_2Syst_FLT *)(y1BUS))->fltArg2 = ((SWLIBS_2Syst_FLT *)(work1BUS))->fltArg2;
            
            if((tS32)2 == (tS32)(p1))
            {
              /* Copy DEBUG struct states to Simulink states */
              ((GDFLIB_FILTER_MA_T_FLT *)(work2BUS))->fltAcc = fltFWDebugStateStr.pFilterFW.fltAcc;
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work3BUS))->fltIntegPartK_1 = fltFWDebugStateStr.pPIpAWFW.fltIntegPartK_1;
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work3BUS))->fltInK_1 = fltFWDebugStateStr.pPIpAWFW.fltInK_1;
            
              /* Copy DEBUG struct states to outputs */
              *((tU16 *)y2) = fltFWDebugStateStr.pPIpAWFW.u16LimitFlag;
              *((tFloat *)y3) = fltFWDebugStateStr.fltIQErrSign;
              *((tFloat *)y4) = fltFWDebugStateStr.fltIQErr;
              *((tFloat *)y5) = fltFWDebugStateStr.fltFWErr;
              *((tFloat *)y6) = fltFWDebugStateStr.fltUQErr;
              *((tFloat *)y7) = fltFWDebugStateStr.fltFWErrFilt;
              *((tFloat *)y8) = fltFWDebugStateStr.fltFWAngle;
              *((tFloat *)y9) = fltFWDebugStateStr.fltFWSin;
              *((tFloat *)y10) = fltFWDebugStateStr.fltFWCos;
              *((tFloat *)y11) = fltFWDebugStateStr.pFilterFW.fltAcc;
              *((tFloat *)y12) = fltFWDebugStateStr.pPIpAWFW.fltIntegPartK_1;
              *((tFloat *)y13) = fltFWDebugStateStr.pPIpAWFW.fltInK_1;
            }
            else
            {
              /* Copy struct states to Simulink states */
              ((GDFLIB_FILTER_MA_T_FLT *)(work2BUS))->fltAcc = fltFWStateStr.pFilterFW.fltAcc;
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work3BUS))->fltIntegPartK_1 = fltFWStateStr.pPIpAWFW.fltIntegPartK_1;
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work3BUS))->fltInK_1 = fltFWStateStr.pPIpAWFW.fltInK_1;
            
              /* Copy struct states to outputs */
              *((tU16 *)y2) = fltFWStateStr.pPIpAWFW.u16LimitFlag;
            }

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(SWLIBS_2Syst_FLT *)work1BUS)", 0)>

            /* Assign the user structure work2BUS to the Simulink structure work2 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work2)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work2", "(*(GDFLIB_FILTER_MA_T_FLT *)work2BUS)", 0)>

            /* Assign the user structure work3BUS to the Simulink structure work3 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work3)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work3", "(*(GFLIB_CONTROLLER_PIAW_P_T_FLT *)work3BUS)", 0)>

            /* Assign the user structure y1BUS to the Simulink structure y1 */
            %assign dTypeId = LibBlockOutputSignalDataTypeId(0)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)y1", "(*(SWLIBS_2Syst_FLT *)y1BUS)", 0)>
        }

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %<LibAddToModelSources("%<cFileName>")>
    %else
        %<LibAddToCommonIncludes("amclib.h")>
        %<LibAddToCommonIncludes("gdflib.h")>
        %<LibAddToCommonIncludes("gflib.h")>
        %<LibAddToCommonIncludes("SWLIBS_Typedefs.h")>
        %<LibAddToCommonIncludes("GDFLIB_FilterMA.h")>
        %<LibAddToCommonIncludes("GFLIB_ControllerPIpAW.h")>
    %endif
    %assign ::instanceCnt = 0
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif

    %assign ::instanceCnt = %<::instanceCnt> + 1

    %openfile tmpParamExternBuf
      %if ::instanceCnt == 1
        #include "amclib.h"
      %endif
      extern AMCLIB_FW_T_FLT fltFWStateStr_%<SYSNAME(Name)[0]>;
      extern AMCLIB_FW_DEBUG_T_FLT fltFWDebugStateStr_%<SYSNAME(Name)[0]>;
    %closefile tmpParamExternBuf
    %<LibCacheExtern(tmpParamExternBuf)>

    %assign cDataFileName = LibGetMdlDataSrcBaseName()
    %assign cDataFile = LibCreateSourceFile("Source", "Simulink", cDataFileName)
    %openfile tmpParamBuf
      %if ::instanceCnt == 1
        #include "amclib.h"
      %endif
      AMCLIB_FW_T_FLT fltFWStateStr_%<SYSNAME(Name)[0]>;
      AMCLIB_FW_DEBUG_T_FLT fltFWDebugStateStr_%<SYSNAME(Name)[0]>;
    %closefile tmpParamBuf
    %<LibSetSourceFileSection(cDataFile , "Definitions", tmpParamBuf)>
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign y1BUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign work1BUS_addr = "&" + LibBlockPWork("", "", "", 1)
        %assign work2BUS_addr = "&" + LibBlockPWork("", "", "", 2)
        %assign work3BUS_addr = "&" + LibBlockPWork("", "", "", 3)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (AMCLIB_FW_SF_FLT_wrapper_allocmem(%<y1BUS_addr>, %<LibBlockOutputSignalWidth(0)>, %<work1BUS_addr>, %<LibBlockDWorkWidth(work1)>, %<work2BUS_addr>, %<LibBlockDWorkWidth(work2)>, %<work3BUS_addr>, %<LibBlockDWorkWidth(work3)>)!=0) %<LibSetRTModelErrorStatus("\"Memory allocation failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% Function: InitializeConditions =========================================
%function InitializeConditions (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign work1_ptr = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 1)
        %assign work2_ptr = LibBlockDWorkAddr(work2, "", "", 0)
        %assign work2BUS_ptr = LibBlockPWork("", "", "", 2)
        %assign work3_ptr = LibBlockDWorkAddr(work3, "", "", 0)
        %assign work3BUS_ptr = LibBlockPWork("", "", "", 3)
        %assign work4_ptr = LibBlockDWorkAddr(work4, "", "", 0)
        %assign work5_ptr = LibBlockDWorkAddr(work5, "", "", 0)
        %assign p4_val = LibBlockParameter(p4, "", "", 0)
        %assign p5_val = LibBlockParameter(p5, "", "", 0)
        %assign p6_val = LibBlockParameter(p6, "", "", 0)
        %assign p7_val = LibBlockParameter(p7, "", "", 0)
        %assign p8_val = LibBlockParameter(p8, "", "", 0)
        %assign p9_val = LibBlockParameter(p9, "", "", 0)
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign p2_val = LibBlockParameter(p2, "", "", 0)
        %assign p3_val = LibBlockParameter(p3, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        AMCLIB_FW_SF_FLT_wrapper_InitializeConditions(%<work1_ptr>, %<work1BUS_ptr>, %<work2_ptr>, %<work2BUS_ptr>, %<work3_ptr>, %<work3BUS_ptr>, %<work4_ptr>, %<work5_ptr>, %<p4_val>, %<p5_val>, %<p6_val>, %<p7_val>, %<p8_val>, %<p9_val>, %<p1_val>, %<p2_val>, %<p3_val>);
    %else
        %assign pIDQReqState = LibBlockDWork(work1, "", "", 0)
        %assign pFilterFW = LibBlockDWork(work2, "", "", 0)
        %assign pPIpAWFW = LibBlockDWork(work3, "", "", 0)
        %assign s32ResetStates = LibBlockDWork(work4, "", "", 0)
        %assign fltFWParam_fltUmaxDivImax = LibBlockDWork(work5, "", "", 0)
        %assign fltUmaxDivImax = LibBlockParameter(p4, "", "", 0)
        %assign fltLambda = LibBlockParameter(p5, "", "", 0)
        %assign fltPropGain = LibBlockParameter(p6, "", "", 0)
        %assign fltIntegGain = LibBlockParameter(p7, "", "", 0)
        %assign fltLowerLimit = LibBlockParameter(p8, "", "", 0)
        %assign fltUpperLimit = LibBlockParameter(p9, "", "", 0)
        %assign showStates = LibBlockParameter(p1, "", "", 0)
        %assign resetStatesEnable = LibBlockParameter(p2, "", "", 0)
        %assign showDebugOutputs = LibBlockParameter(p3, "", "", 0)
        %% 
        %if FEVAL("strcmp", showStates, "2")
          %if FEVAL("strcmp", showDebugOutputs, "2")
            /* Copy parameters to DEBUG state struct */
            fltFWDebugStateStr_%<SYSNAME(Name)[0]>.pFilterFW.fltLambda = (tFloat)(%<fltLambda>);
            fltFWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltPropGain = (tFloat)(%<fltPropGain>);
            fltFWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltIntegGain = (tFloat)(%<fltIntegGain>);
            fltFWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltLowerLimit = (tFloat)(%<fltLowerLimit>);
            fltFWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltUpperLimit = (tFloat)(%<fltUpperLimit>);
            fltFWDebugStateStr_%<SYSNAME(Name)[0]>.fltUmaxDivImax = (tFloat)(%<fltUmaxDivImax>);
          %endif
        %endif
        
        /* Copy parameters to state struct */
        fltFWStateStr_%<SYSNAME(Name)[0]>.pFilterFW.fltLambda = (tFloat)(%<fltLambda>);
        fltFWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltPropGain = (tFloat)(%<fltPropGain>);
        fltFWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltIntegGain = (tFloat)(%<fltIntegGain>);
        fltFWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltLowerLimit = (tFloat)(%<fltLowerLimit>);
        fltFWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltUpperLimit = (tFloat)(%<fltUpperLimit>);
        fltFWStateStr_%<SYSNAME(Name)[0]>.fltUmaxDivImax = (tFloat)(%<fltUmaxDivImax>);
        
        AMCLIB_FWInit_FLT(&fltFWStateStr_%<SYSNAME(Name)[0]>);
        
        /* Set Simulink state to zero */
        (%<pIDQReqState>).fltArg1 = 0.0f;
        (%<pIDQReqState>).fltArg2 = 0.0f;
        
        %if FEVAL("strcmp", showStates, "2")
          %if FEVAL("strcmp", showDebugOutputs, "2")
            /* Copy struct states to DEBUG struct states */
            fltFWDebugStateStr_%<SYSNAME(Name)[0]>.pFilterFW.fltAcc = fltFWStateStr_%<SYSNAME(Name)[0]>.pFilterFW.fltAcc;
            fltFWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltIntegPartK_1 = fltFWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltIntegPartK_1;
            fltFWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltInK_1 = fltFWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltInK_1;
          %endif
        %endif
        
        %if FEVAL("strcmp", resetStatesEnable, "1")
          %<s32ResetStates> = (tS32)1;
        %endif
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign u1_val = LibBlockInputSignal(0, "", "", 0)
        %assign u2_val = LibBlockInputSignal(1, "", "", 0)
        %assign work1_ptr = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 1)
        %assign work2_ptr = LibBlockDWorkAddr(work2, "", "", 0)
        %assign work2BUS_ptr = LibBlockPWork("", "", "", 2)
        %assign work3_ptr = LibBlockDWorkAddr(work3, "", "", 0)
        %assign work3BUS_ptr = LibBlockPWork("", "", "", 3)
        %assign work4_ptr = LibBlockDWorkAddr(work4, "", "", 0)
        %assign work5_ptr = LibBlockDWorkAddr(work5, "", "", 0)
        %assign u3_ptr = LibBlockInputSignalAddr(2, "", "", 0)
        %assign u4_ptr = LibBlockInputSignalAddr(3, "", "", 0)
        %assign u5_ptr = LibBlockInputSignalAddr(4, "", "", 0)
        %assign u6_val = LibBlockInputSignal(5, "", "", 0)
        %assign u7_val = LibBlockInputSignal(6, "", "", 0)
        %assign u8_val = LibBlockInputSignal(7, "", "", 0)
        %assign u9_val = LibBlockInputSignal(8, "", "", 0)
        %assign u10_val = LibBlockInputSignal(9, "", "", 0)
        %assign u11_val = LibBlockInputSignal(10, "", "", 0)
        %assign u12_val = LibBlockInputSignal(11, "", "", 0)
        %assign u13_val = LibBlockInputSignal(12, "", "", 0)
        %assign u14_val = LibBlockInputSignal(13, "", "", 0)
        %assign u15_val = LibBlockInputSignal(14, "", "", 0)
        %assign u16_val = LibBlockInputSignal(15, "", "", 0)
        %assign u17_val = LibBlockInputSignal(16, "", "", 0)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign y1BUS_ptr = LibBlockPWork("", "", "", 0)
        %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign y3_ptr = LibBlockOutputSignalAddr(2, "", "", 0)
        %assign y4_ptr = LibBlockOutputSignalAddr(3, "", "", 0)
        %assign y5_ptr = LibBlockOutputSignalAddr(4, "", "", 0)
        %assign y6_ptr = LibBlockOutputSignalAddr(5, "", "", 0)
        %assign y7_ptr = LibBlockOutputSignalAddr(6, "", "", 0)
        %assign y8_ptr = LibBlockOutputSignalAddr(7, "", "", 0)
        %assign y9_ptr = LibBlockOutputSignalAddr(8, "", "", 0)
        %assign y10_ptr = LibBlockOutputSignalAddr(9, "", "", 0)
        %assign y11_ptr = LibBlockOutputSignalAddr(10, "", "", 0)
        %assign y12_ptr = LibBlockOutputSignalAddr(11, "", "", 0)
        %assign y13_ptr = LibBlockOutputSignalAddr(12, "", "", 0)
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign p2_val = LibBlockParameter(p2, "", "", 0)
        %assign p3_val = LibBlockParameter(p3, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        AMCLIB_FW_SF_FLT_wrapper_Output(%<u1_val>, %<u2_val>, %<work1_ptr>, %<work1BUS_ptr>, %<work2_ptr>, %<work2BUS_ptr>, %<work3_ptr>, %<work3BUS_ptr>, %<work4_ptr>, %<work5_ptr>, %<u3_ptr>, %<u4_ptr>, %<u5_ptr>, %<u6_val>, %<u7_val>, %<u8_val>, %<u9_val>, %<u10_val>, %<u11_val>, %<u12_val>, %<u13_val>, %<u14_val>, %<u15_val>, %<u16_val>, %<u17_val>, %<y1_ptr>, %<y1BUS_ptr>, %<y2_ptr>, %<y3_ptr>, %<y4_ptr>, %<y5_ptr>, %<y6_ptr>, %<y7_ptr>, %<y8_ptr>, %<y9_ptr>, %<y10_ptr>, %<y11_ptr>, %<y12_ptr>, %<y13_ptr>, %<p1_val>, %<p2_val>, %<p3_val>);
    %else
        %assign fltIDQReqAmp = LibBlockInputSignal(0, "", "", 0)
        %assign fltVelocityFbck = LibBlockInputSignal(1, "", "", 0)
        %assign pIDQReqState = LibBlockDWorkAddr(work1, "", "", 0)
        %assign pFilterFW = LibBlockDWork(work2, "", "", 0)
        %assign pPIpAWFW = LibBlockDWork(work3, "", "", 0)
        %assign s32ResetStates = LibBlockDWork(work4, "", "", 0)
        %assign fltFWParam_fltUmaxDivImax = LibBlockDWork(work5, "", "", 0)
        %assign fltIQFbck = LibBlockInputSignalAddr(2, "", "", 0)
        %assign fltUQReq = LibBlockInputSignalAddr(3, "", "", 0)
        %assign fltUQLim = LibBlockInputSignalAddr(4, "", "", 0)
        %assign fltFilterMAFWOut = LibBlockInputSignal(5, "", "", 0)
        %assign fltControllerPIpAWFWOut = LibBlockInputSignal(6, "", "", 0)
        %assign fltUmaxDivImax = LibBlockInputSignal(7, "", "", 0)
        %assign fltLambda = LibBlockInputSignal(8, "", "", 0)
        %assign fltPropGain = LibBlockInputSignal(9, "", "", 0)
        %assign fltIntegGain = LibBlockInputSignal(10, "", "", 0)
        %assign fltLowerLimit = LibBlockInputSignal(11, "", "", 0)
        %assign fltUpperLimit = LibBlockInputSignal(12, "", "", 0)
        %assign fltIQReqK_1 = LibBlockInputSignal(13, "", "", 0)
        %assign fltAcc = LibBlockInputSignal(14, "", "", 0)
        %assign fltIntegPartK_1 = LibBlockInputSignal(15, "", "", 0)
        %assign fltInK_1 = LibBlockInputSignal(16, "", "", 0)
        %assign pIDQReq = LibBlockOutputSignal(0, "", "", 0)
        %assign u16LimitFlag = LibBlockOutputSignal(1, "", "", 0)
        %assign fltIQErrSign = LibBlockOutputSignal(2, "", "", 0)
        %assign fltIQErr = LibBlockOutputSignal(3, "", "", 0)
        %assign fltFWErr = LibBlockOutputSignal(4, "", "", 0)
        %assign fltUQErr = LibBlockOutputSignal(5, "", "", 0)
        %assign fltFWErrFilt = LibBlockOutputSignal(6, "", "", 0)
        %assign fltFWAngle = LibBlockOutputSignal(7, "", "", 0)
        %assign fltFWSin = LibBlockOutputSignal(8, "", "", 0)
        %assign fltFWCos = LibBlockOutputSignal(9, "", "", 0)
        %assign fltAcc_Out = LibBlockOutputSignal(10, "", "", 0)
        %assign fltIntegPartK_1_Out = LibBlockOutputSignal(11, "", "", 0)
        %assign fltInK_1_Out = LibBlockOutputSignal(12, "", "", 0)
        %assign showStates = LibBlockParameter(p1, "", "", 0)
        %assign resetStatesEnable = LibBlockParameter(p2, "", "", 0)
        %assign showDebugOutputs = LibBlockParameter(p3, "", "", 0)
        %% 
        %if FEVAL("strcmp", showStates, "2")
          /* Copy inputs to Simulink states */
          (%<pIDQReqState>)->fltArg2 = (tFloat)(%<fltIQReqK_1>);
        
          %if FEVAL("strcmp", showDebugOutputs, "2")
            /* Copy inputs to DEBUG struct states */
            fltFWDebugStateStr_%<SYSNAME(Name)[0]>.pFilterFW.fltAcc = (tFloat)(%<fltAcc>);
            fltFWDebugStateStr_%<SYSNAME(Name)[0]>.pFilterFW.fltLambda = (tFloat)(%<fltLambda>);
            fltFWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltPropGain = (tFloat)(%<fltPropGain>);
            fltFWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltIntegGain = (tFloat)(%<fltIntegGain>);
            fltFWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltLowerLimit = (tFloat)(%<fltLowerLimit>);
            fltFWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltUpperLimit = (tFloat)(%<fltUpperLimit>);
            fltFWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltIntegPartK_1 = (tFloat)(%<fltIntegPartK_1>);
            fltFWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltInK_1 = (tFloat)(%<fltInK_1>);
            fltFWDebugStateStr_%<SYSNAME(Name)[0]>.pIQFbck = (tFloat *)(%<fltIQFbck>);
            fltFWDebugStateStr_%<SYSNAME(Name)[0]>.pUQReq = (tFloat *)(%<fltUQReq>);
            fltFWDebugStateStr_%<SYSNAME(Name)[0]>.pUQLim = (tFloat *)(%<fltUQLim>);
            fltFWDebugStateStr_%<SYSNAME(Name)[0]>.fltUmaxDivImax = (tFloat)(%<fltUmaxDivImax>);
          %endif
        
          /* Copy inputs to struct states*/
          fltFWStateStr_%<SYSNAME(Name)[0]>.pFilterFW.fltAcc = (tFloat)(%<fltAcc>);
          fltFWStateStr_%<SYSNAME(Name)[0]>.pFilterFW.fltLambda = (tFloat)(%<fltLambda>);
          fltFWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltPropGain = (tFloat)(%<fltPropGain>);
          fltFWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltIntegGain = (tFloat)(%<fltIntegGain>);
          fltFWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltLowerLimit = (tFloat)(%<fltLowerLimit>);
          fltFWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltUpperLimit = (tFloat)(%<fltUpperLimit>);
          fltFWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltIntegPartK_1 = (tFloat)(%<fltIntegPartK_1>);
          fltFWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltInK_1 = (tFloat)(%<fltInK_1>);
          fltFWStateStr_%<SYSNAME(Name)[0]>.fltUmaxDivImax = (tFloat)(%<fltUmaxDivImax>);
        %endif
        
        /* Copy inputs to struct states */
        fltFWStateStr_%<SYSNAME(Name)[0]>.pIQFbck = (tFloat *)(%<fltIQFbck>);
        fltFWStateStr_%<SYSNAME(Name)[0]>.pUQReq = (tFloat *)(%<fltUQReq>);
        fltFWStateStr_%<SYSNAME(Name)[0]>.pUQLim = (tFloat *)(%<fltUQLim>);
        
        %if FEVAL("strcmp", resetStatesEnable, "1")
          if ((tS32)(%<s32ResetStates>) != (tS32)0)
          {
            %<s32ResetStates> = (tS32)0;
            AMCLIB_FWSetState_FLT((tFloat)(%<fltFilterMAFWOut>), (tFloat)(%<fltControllerPIpAWFWOut>), &fltFWStateStr_%<SYSNAME(Name)[0]>);
            %if FEVAL("strcmp", showStates, "2")
              %if FEVAL("strcmp", showDebugOutputs, "2")
                /* Copy struct states to DEBUG struct states */
                fltFWDebugStateStr_%<SYSNAME(Name)[0]>.pFilterFW.fltAcc = fltFWStateStr_%<SYSNAME(Name)[0]>.pFilterFW.fltAcc;
                fltFWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltIntegPartK_1 = fltFWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltIntegPartK_1;
                fltFWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltInK_1 = fltFWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltInK_1;
              %endif
            %endif
            /* Set Simulink state to zero */
            (%<pIDQReqState>)->fltArg1 = 0.0f;
            (%<pIDQReqState>)->fltArg2 = 0.0f;
          }
          else
          {
            %if FEVAL("strcmp", showStates, "2")
              %if FEVAL("strcmp", showDebugOutputs, "2")
                AMCLIB_FWDebug_FLT((tFloat)(%<fltIDQReqAmp>), (tFloat)(%<fltVelocityFbck>), (SWLIBS_2Syst_FLT *)(%<pIDQReqState>), &fltFWDebugStateStr_%<SYSNAME(Name)[0]>);
              %else
                AMCLIB_FW_FLT((tFloat)(%<fltIDQReqAmp>), (tFloat)(%<fltVelocityFbck>), (SWLIBS_2Syst_FLT *)(%<pIDQReqState>), &fltFWStateStr_%<SYSNAME(Name)[0]>);
              %endif
            %else
              AMCLIB_FW_FLT((tFloat)(%<fltIDQReqAmp>), (tFloat)(%<fltVelocityFbck>), (SWLIBS_2Syst_FLT *)(%<pIDQReqState>), &fltFWStateStr_%<SYSNAME(Name)[0]>);
            %endif
          }
        %else
          %if FEVAL("strcmp", showStates, "2")
            %if FEVAL("strcmp", showDebugOutputs, "2")
              AMCLIB_FWDebug_FLT((tFloat)(%<fltIDQReqAmp>), (tFloat)(%<fltVelocityFbck>), (SWLIBS_2Syst_FLT *)(%<pIDQReqState>), &fltFWDebugStateStr_%<SYSNAME(Name)[0]>);
            %else
              AMCLIB_FW_FLT((tFloat)(%<fltIDQReqAmp>), (tFloat)(%<fltVelocityFbck>), (SWLIBS_2Syst_FLT *)(%<pIDQReqState>), &fltFWStateStr_%<SYSNAME(Name)[0]>);
            %endif
          %else
            AMCLIB_FW_FLT((tFloat)(%<fltIDQReqAmp>), (tFloat)(%<fltVelocityFbck>), (SWLIBS_2Syst_FLT *)(%<pIDQReqState>), &fltFWStateStr_%<SYSNAME(Name)[0]>);
          %endif
        %endif
        
        /* Copy Simulink states to output */
        (%<pIDQReq>).fltArg1 = (%<pIDQReqState>)->fltArg1;
        (%<pIDQReq>).fltArg2 = (%<pIDQReqState>)->fltArg2;
        
        %if FEVAL("strcmp", showStates, "2")
          %if FEVAL("strcmp", showDebugOutputs, "2")
            /* Copy DEBUG struct states to outputs */
            %<u16LimitFlag> = fltFWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.u16LimitFlag;
            %<fltIQErrSign> = fltFWDebugStateStr_%<SYSNAME(Name)[0]>.fltIQErrSign;
            %<fltIQErr> = fltFWDebugStateStr_%<SYSNAME(Name)[0]>.fltIQErr;
            %<fltFWErr> = fltFWDebugStateStr_%<SYSNAME(Name)[0]>.fltFWErr;
            %<fltUQErr> = fltFWDebugStateStr_%<SYSNAME(Name)[0]>.fltUQErr;
            %<fltFWErrFilt> = fltFWDebugStateStr_%<SYSNAME(Name)[0]>.fltFWErrFilt;
            %<fltFWAngle> = fltFWDebugStateStr_%<SYSNAME(Name)[0]>.fltFWAngle;
            %<fltFWSin> = fltFWDebugStateStr_%<SYSNAME(Name)[0]>.fltFWSin;
            %<fltFWCos> = fltFWDebugStateStr_%<SYSNAME(Name)[0]>.fltFWCos;
            %<fltAcc_Out> = fltFWDebugStateStr_%<SYSNAME(Name)[0]>.pFilterFW.fltAcc;
            %<fltIntegPartK_1_Out> = fltFWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltIntegPartK_1;
            %<fltInK_1_Out> = fltFWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltInK_1;
          %else
            /* Copy struct states to outputs */
            %<u16LimitFlag> = fltFWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.u16LimitFlag;
            %<fltAcc_Out> = fltFWStateStr_%<SYSNAME(Name)[0]>.pFilterFW.fltAcc;
            %<fltIntegPartK_1_Out> = fltFWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltIntegPartK_1;
            %<fltInK_1_Out> = fltFWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.fltInK_1;
          %endif
        %else
          /* Copy struct states to outputs */
          %<u16LimitFlag> = fltFWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.u16LimitFlag;
        %endif
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign y1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign work1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 1)
        %assign work2BUSBUS_addr = "&" + LibBlockPWork("", "", "", 2)
        %assign work3BUSBUS_addr = "&" + LibBlockPWork("", "", "", 3)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (AMCLIB_FW_SF_FLT_wrapper_freemem(%<y1BUSBUS_addr>, %<work1BUSBUS_addr>, %<work2BUSBUS_addr>, %<work3BUSBUS_addr>)!=0) %<LibSetRTModelErrorStatus("\"Memory free failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% [EOF]
