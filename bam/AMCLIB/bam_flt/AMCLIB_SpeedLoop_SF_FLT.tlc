%% file : AMCLIB_SpeedLoop_SF_FLT.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for AMCLIB_SpeedLoop_SF_FLT
%% 
%% Simulink version      : 9.3 (R2019a) 23-Nov-2018
%% TLC file generated on : 15-Apr-2020 20:59:34

%% Copyright 2019-2020 NXP
%%
%% NXP Confidential. This software is owned or controlled by NXP and may only be used strictly in
%% accordance with the applicable license terms.  By expressly accepting such terms or by
%% downloading, installing, activating and/or otherwise using the software, you are agreeing that
%% you have read, and that you agree to comply with and are bound by, such license terms.  If you
%% do not agree to be bound by the applicable license terms, then you may not retain, install,
%% activate or otherwise use the software.

%implements AMCLIB_SpeedLoop_SF_FLT "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %assign ver = FEVAL("ver", "simulink")
    %assign factor = 1.0
    %assign slVer = 0.0
    %foreach idx = SIZE(ver.Version)[1]
        %if ISEQUAL(ver.Version[idx], ".")
            %assign factor = factor/10.0
        %else
            %assign slVer = slVer + %<ver.Version[idx]>*factor
        %endif
    %endforeach
    
    %if GenerateErtSFunction==1 && slVer < 6.21
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink Object) may not be used in a model for which an ERT S-Function wrapper is being generated")>
    %endif
    
    %if ExtMode==1 && slVer < 6.3
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a model uses External Mode")>
    %endif
    
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %if slVer < 6.21
            %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a referenced model")>
        %endif
        
        %assign hFileName = FcnGenerateUniqueFileName("AMCLIB_SpeedLoop_SF_FLT_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif
        
        extern int AMCLIB_SpeedLoop_SF_FLT_wrapper_allocmem(void** y1BUS, int_T y1BUSWidth, void** work1BUS, int_T work1BUSWidth, void** work2BUS, int_T work2BUSWidth, void** work3BUS, int_T work3BUSWidth);
        extern int AMCLIB_SpeedLoop_SF_FLT_wrapper_freemem(void** y1BUS, void** work1BUS, void** work2BUS, void** work3BUS);

        extern void AMCLIB_SpeedLoop_SF_FLT_wrapper_InitializeConditions( void* work1, void* work1BUS,  void* work2, void* work2BUS,  void* work3, void* work3BUS,  int32_T* work4, const real32_T p4, const real32_T p5, const real32_T p6, const real32_T p7, const real32_T p8, const real32_T p9, const real32_T p10, const int32_T p1, const int32_T p2, const int32_T p3);
        extern void AMCLIB_SpeedLoop_SF_FLT_wrapper_Output(const real32_T u1, const real32_T u2,  void* work1, void* work1BUS,  void* work2, void* work2BUS,  void* work3, void* work3BUS,  int32_T* work4, const real32_T u3, const real32_T u4, const real32_T u5, const real32_T u6, const real32_T u7, const real32_T u8, const real32_T u9, const real32_T u10, const real32_T u11, const real32_T u12, const real32_T u13, const real32_T u14, const real32_T u15, const real32_T u16,  void* y1, void* y1BUS,  uint16_T* y2,  real32_T* y3,  real32_T* y4,  real32_T* y5,  real32_T* y6,  real32_T* y7,  real32_T* y8,  real32_T* y9, const int32_T p1, const int32_T p2, const int32_T p3);
        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("AMCLIB_SpeedLoop_SF_FLT_wrapper", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <stdlib.h>
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif

        #include "amclib.h"
        #include "gflib.h"
        #include "gdflib.h"

        #include "SWLIBS_Typedefs.h"
        #include "GDFLIB_FilterMA.h"
        #include "GFLIB_ControllerPIpAW.h"
        #include "GFLIB_Ramp.h"

        int AMCLIB_SpeedLoop_SF_FLT_wrapper_allocmem(void** y1BUS, int_T y1BUSWidth, void** work1BUS, int_T work1BUSWidth, void** work2BUS, int_T work2BUSWidth, void** work3BUS, int_T work3BUSWidth) {
            *y1BUS = calloc(sizeof(SWLIBS_2Syst_FLT), y1BUSWidth);
            if (*y1BUS==NULL) return -1;
            *work1BUS = calloc(sizeof(GDFLIB_FILTER_MA_T_FLT), work1BUSWidth);
            if (*work1BUS==NULL) return -1;
            *work2BUS = calloc(sizeof(GFLIB_CONTROLLER_PIAW_P_T_FLT), work2BUSWidth);
            if (*work2BUS==NULL) return -1;
            *work3BUS = calloc(sizeof(GFLIB_RAMP_T_FLT), work3BUSWidth);
            if (*work3BUS==NULL) return -1;
            return 0;
        }
        
        int AMCLIB_SpeedLoop_SF_FLT_wrapper_freemem(void** y1BUS, void** work1BUS, void** work2BUS, void** work3BUS) {
            if (*y1BUS!=NULL) free(*y1BUS);
            *y1BUS = NULL;
            if (*work1BUS!=NULL) free(*work1BUS);
            *work1BUS = NULL;
            if (*work2BUS!=NULL) free(*work2BUS);
            *work2BUS = NULL;
            if (*work3BUS!=NULL) free(*work3BUS);
            *work3BUS = NULL;
            return 0;
        }

        void AMCLIB_SpeedLoop_SF_FLT_wrapper_InitializeConditions( void* work1, void* work1BUS,  void* work2, void* work2BUS,  void* work3, void* work3BUS,  int32_T* work4, const real32_T p4, const real32_T p5, const real32_T p6, const real32_T p7, const real32_T p8, const real32_T p9, const real32_T p10, const int32_T p1, const int32_T p2, const int32_T p3) {

            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GDFLIB_FILTER_MA_T_FLT *)work1BUS)", "(char *)work1", 0)>


            /* Assign the Simulink structure work2 to user structure work2BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work2)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GFLIB_CONTROLLER_PIAW_P_T_FLT *)work2BUS)", "(char *)work2", 0)>


            /* Assign the Simulink structure work3 to user structure work3BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work3)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GFLIB_RAMP_T_FLT *)work3BUS)", "(char *)work3", 0)>

                AMCLIB_SPEED_LOOP_T_FLT fltSpeedLoopStateStr;
                
                /* Copy parameters to Simulink states */
                ((GDFLIB_FILTER_MA_T_FLT *)(work1BUS))->fltLambda = (tFloat)(p4);
                ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work2BUS))->fltPropGain = (tFloat)(p5);
                ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work2BUS))->fltIntegGain = (tFloat)(p6);
                ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work2BUS))->fltLowerLimit = (tFloat)(p7);
                ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work2BUS))->fltUpperLimit = (tFloat)(p8);
                ((GFLIB_RAMP_T_FLT *)(work3BUS))->fltRampUp = (tFloat)(p9);
                ((GFLIB_RAMP_T_FLT *)(work3BUS))->fltRampDown = (tFloat)(p10);
            
                /* Copy Simulink state parameters to state struct */
                fltSpeedLoopStateStr.pFilterW.fltLambda = ((GDFLIB_FILTER_MA_T_FLT *)(work1BUS))->fltLambda;
                fltSpeedLoopStateStr.pPIpAWQ.fltPropGain = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work2BUS))->fltPropGain;
                fltSpeedLoopStateStr.pPIpAWQ.fltIntegGain = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work2BUS))->fltIntegGain;
                fltSpeedLoopStateStr.pPIpAWQ.fltLowerLimit = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work2BUS))->fltLowerLimit;
                fltSpeedLoopStateStr.pPIpAWQ.fltUpperLimit = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work2BUS))->fltUpperLimit;
                fltSpeedLoopStateStr.pRamp.fltRampUp = ((GFLIB_RAMP_T_FLT *)(work3BUS))->fltRampUp;
                fltSpeedLoopStateStr.pRamp.fltRampDown = ((GFLIB_RAMP_T_FLT *)(work3BUS))->fltRampDown;
                
                AMCLIB_SpeedLoopInit_FLT(&fltSpeedLoopStateStr);
            
                /* Copy struct states to Simulink states */
                ((GDFLIB_FILTER_MA_T_FLT *)(work1BUS))->fltAcc = fltSpeedLoopStateStr.pFilterW.fltAcc;
                ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work2BUS))->fltIntegPartK_1 = fltSpeedLoopStateStr.pPIpAWQ.fltIntegPartK_1;
                ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work2BUS))->fltInK_1 = fltSpeedLoopStateStr.pPIpAWQ.fltInK_1;
                ((GFLIB_RAMP_T_FLT *)(work3BUS))->fltState = fltSpeedLoopStateStr.pRamp.fltState;
                
                if ((tS32)1 == (tS32)(p2))
                {
                  *((tS32 *)work4) = (tS32)1;
                }

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(GDFLIB_FILTER_MA_T_FLT *)work1BUS)", 0)>

            /* Assign the user structure work2BUS to the Simulink structure work2 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work2)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work2", "(*(GFLIB_CONTROLLER_PIAW_P_T_FLT *)work2BUS)", 0)>

            /* Assign the user structure work3BUS to the Simulink structure work3 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work3)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work3", "(*(GFLIB_RAMP_T_FLT *)work3BUS)", 0)>
        }

        void AMCLIB_SpeedLoop_SF_FLT_wrapper_Output(const real32_T u1, const real32_T u2,  void* work1, void* work1BUS,  void* work2, void* work2BUS,  void* work3, void* work3BUS,  int32_T* work4, const real32_T u3, const real32_T u4, const real32_T u5, const real32_T u6, const real32_T u7, const real32_T u8, const real32_T u9, const real32_T u10, const real32_T u11, const real32_T u12, const real32_T u13, const real32_T u14, const real32_T u15, const real32_T u16,  void* y1, void* y1BUS,  uint16_T* y2,  real32_T* y3,  real32_T* y4,  real32_T* y5,  real32_T* y6,  real32_T* y7,  real32_T* y8,  real32_T* y9, const int32_T p1, const int32_T p2, const int32_T p3) {

            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GDFLIB_FILTER_MA_T_FLT *)work1BUS)", "(char *)work1", 0)>


            /* Assign the Simulink structure work2 to user structure work2BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work2)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GFLIB_CONTROLLER_PIAW_P_T_FLT *)work2BUS)", "(char *)work2", 0)>


            /* Assign the Simulink structure work3 to user structure work3BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work3)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GFLIB_RAMP_T_FLT *)work3BUS)", "(char *)work3", 0)>

            AMCLIB_SPEED_LOOP_T_FLT fltSpeedLoopStateStr;
            AMCLIB_SPEED_LOOP_DEBUG_T_FLT fltSpeedLoopDebugStateStr;
            
            if((tS32)2 == (tS32)(p1))
            {
              /* Copy inputs to Simulink states */
              ((GDFLIB_FILTER_MA_T_FLT *)(work1BUS))->fltAcc = (tFloat)(u13);
              ((GDFLIB_FILTER_MA_T_FLT *)(work1BUS))->fltLambda = (tFloat)(u6);
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work2BUS))->fltPropGain = (tFloat)(u7);
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work2BUS))->fltIntegGain = (tFloat)(u8);
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work2BUS))->fltLowerLimit = (tFloat)(u9);
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work2BUS))->fltUpperLimit = (tFloat)(u10);
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work2BUS))->fltIntegPartK_1 = (tFloat)(u14);
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work2BUS))->fltInK_1 = (tFloat)(u15);
              ((GFLIB_RAMP_T_FLT *)(work3BUS))->fltState = (tFloat)(u16);
              ((GFLIB_RAMP_T_FLT *)(work3BUS))->fltRampUp = (tFloat)(u11);
              ((GFLIB_RAMP_T_FLT *)(work3BUS))->fltRampDown = (tFloat)(u12);
            
              /* Copy Simulink states to DEBUG struct states */
              fltSpeedLoopDebugStateStr.pFilterW.fltAcc = ((GDFLIB_FILTER_MA_T_FLT *)(work1BUS))->fltAcc;
              fltSpeedLoopDebugStateStr.pFilterW.fltLambda = ((GDFLIB_FILTER_MA_T_FLT *)(work1BUS))->fltLambda;
              fltSpeedLoopDebugStateStr.pPIpAWQ.fltPropGain = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work2BUS))->fltPropGain;
              fltSpeedLoopDebugStateStr.pPIpAWQ.fltIntegGain = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work2BUS))->fltIntegGain;
              fltSpeedLoopDebugStateStr.pPIpAWQ.fltLowerLimit = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work2BUS))->fltLowerLimit;
              fltSpeedLoopDebugStateStr.pPIpAWQ.fltUpperLimit = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work2BUS))->fltUpperLimit;
              fltSpeedLoopDebugStateStr.pPIpAWQ.fltIntegPartK_1 = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work2BUS))->fltIntegPartK_1;
              fltSpeedLoopDebugStateStr.pPIpAWQ.fltInK_1 = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work2BUS))->fltInK_1;
              fltSpeedLoopDebugStateStr.pRamp.fltState = ((GFLIB_RAMP_T_FLT *)(work3BUS))->fltState;
              fltSpeedLoopDebugStateStr.pRamp.fltRampUp = ((GFLIB_RAMP_T_FLT *)(work3BUS))->fltRampUp;
              fltSpeedLoopDebugStateStr.pRamp.fltRampDown = ((GFLIB_RAMP_T_FLT *)(work3BUS))->fltRampDown;
            }
            
            /* Copy Simulink states to struct states */
            fltSpeedLoopStateStr.pFilterW.fltAcc = ((GDFLIB_FILTER_MA_T_FLT *)(work1BUS))->fltAcc;
            fltSpeedLoopStateStr.pFilterW.fltLambda = ((GDFLIB_FILTER_MA_T_FLT *)(work1BUS))->fltLambda;
            fltSpeedLoopStateStr.pPIpAWQ.fltPropGain = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work2BUS))->fltPropGain;
            fltSpeedLoopStateStr.pPIpAWQ.fltIntegGain = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work2BUS))->fltIntegGain;
            fltSpeedLoopStateStr.pPIpAWQ.fltLowerLimit = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work2BUS))->fltLowerLimit;
            fltSpeedLoopStateStr.pPIpAWQ.fltUpperLimit = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work2BUS))->fltUpperLimit;
            fltSpeedLoopStateStr.pPIpAWQ.fltIntegPartK_1 = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work2BUS))->fltIntegPartK_1;
            fltSpeedLoopStateStr.pPIpAWQ.fltInK_1 = ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work2BUS))->fltInK_1;
            fltSpeedLoopStateStr.pRamp.fltState = ((GFLIB_RAMP_T_FLT *)(work3BUS))->fltState;
            fltSpeedLoopStateStr.pRamp.fltRampUp = ((GFLIB_RAMP_T_FLT *)(work3BUS))->fltRampUp;
            fltSpeedLoopStateStr.pRamp.fltRampDown = ((GFLIB_RAMP_T_FLT *)(work3BUS))->fltRampDown;
            
            if ((tS32)1 == (tS32)(p2))
            {
              if (*(tS32 *)(work4) != (tS32)0)
              {
                *((tS32 *)work4) = (tS32)0;
                AMCLIB_SpeedLoopSetState_FLT((tFloat)(u3), (tFloat)(u4),
                  fltRampOut, &fltSpeedLoopStateStr);
                if((tS32)2 == (tS32)(p1))
                {
                  /* Copy struct states to DEBUG struct states */
                  fltSpeedLoopDebugStateStr.pFilterW.fltAcc = fltSpeedLoopStateStr.pFilterW.fltAcc;
                  fltSpeedLoopDebugStateStr.pPIpAWQ.fltIntegPartK_1 = fltSpeedLoopStateStr.pPIpAWQ.fltIntegPartK_1;
                  fltSpeedLoopDebugStateStr.pPIpAWQ.fltInK_1 = fltSpeedLoopStateStr.pPIpAWQ.fltInK_1;
                  fltSpeedLoopDebugStateStr.pRamp.fltState = fltSpeedLoopStateStr.pRamp.fltState;
                }
              }
              else
              {
                if((tS32)2 == (tS32)(p1))
                {
                  AMCLIB_SpeedLoopDebug_FLT((tFloat)(u1), (tFloat)(u2), (SWLIBS_2Syst_FLT *)(y1BUS), &fltSpeedLoopDebugStateStr);
                }
                else
                {
                  AMCLIB_SpeedLoop_FLT((tFloat)(u1), (tFloat)(u2), (SWLIBS_2Syst_FLT *)(y1BUS), &fltSpeedLoopStateStr);
                }
              }
            }
            else
            {
              if((tS32)2 == (tS32)(p1))
              {
                AMCLIB_SpeedLoopDebug_FLT((tFloat)(u1), (tFloat)(u2), (SWLIBS_2Syst_FLT *)(y1BUS), &fltSpeedLoopDebugStateStr);
              }
              else
              {
                AMCLIB_SpeedLoop_FLT((tFloat)(u1), (tFloat)(u2), (SWLIBS_2Syst_FLT *)(y1BUS), &fltSpeedLoopStateStr);
              }
            }
            ((SWLIBS_2Syst_FLT *)(y1BUS))->fltArg1 = 0.0f;
            
            if((tS32)2 == (tS32)(p1))
            {
              /* Copy DEBUG struct states to Simulink states */
              ((GDFLIB_FILTER_MA_T_FLT *)(work1BUS))->fltAcc = fltSpeedLoopDebugStateStr.pFilterW.fltAcc;
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work2BUS))->fltIntegPartK_1 = fltSpeedLoopDebugStateStr.pPIpAWQ.fltIntegPartK_1;
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work2BUS))->fltInK_1 = fltSpeedLoopDebugStateStr.pPIpAWQ.fltInK_1;
              ((GFLIB_RAMP_T_FLT *)(work3BUS))->fltState = fltSpeedLoopDebugStateStr.pRamp.fltState;
              
              /* Copy DEBUG struct states to outputs */
              *((tU16 *)y2) = fltSpeedLoopDebugStateStr.pPIpAWQ.u16LimitFlag;
              *((tFloat *)y3) = fltSpeedLoopDebugStateStr.fltWReqFilt;
              *((tFloat *)y4) = fltSpeedLoopDebugStateStr.fltWErr;
              *((tFloat *)y5) = fltSpeedLoopDebugStateStr.fltWFbckFilt;
              *((tFloat *)y6) = fltSpeedLoopDebugStateStr.pFilterW.fltAcc;
              *((tFloat *)y7) = fltSpeedLoopDebugStateStr.pPIpAWQ.fltIntegPartK_1;
              *((tFloat *)y8) = fltSpeedLoopDebugStateStr.pPIpAWQ.fltInK_1;
              *((tFloat *)y9) = fltSpeedLoopDebugStateStr.pRamp.fltState;
            }
            else
            {
              /* Copy struct states to Simulink states */
              ((GDFLIB_FILTER_MA_T_FLT *)(work1BUS))->fltAcc = fltSpeedLoopStateStr.pFilterW.fltAcc;
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work2BUS))->fltIntegPartK_1 = fltSpeedLoopStateStr.pPIpAWQ.fltIntegPartK_1;
              ((GFLIB_CONTROLLER_PIAW_P_T_FLT *)(work2BUS))->fltInK_1 = fltSpeedLoopStateStr.pPIpAWQ.fltInK_1;
              ((GFLIB_RAMP_T_FLT *)(work3BUS))->fltState = fltSpeedLoopStateStr.pRamp.fltState;
            
              /* Copy struct states to outputs */
              *((tU16 *)y2) = fltSpeedLoopStateStr.pPIpAWQ.u16LimitFlag;
            }

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(GDFLIB_FILTER_MA_T_FLT *)work1BUS)", 0)>

            /* Assign the user structure work2BUS to the Simulink structure work2 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work2)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work2", "(*(GFLIB_CONTROLLER_PIAW_P_T_FLT *)work2BUS)", 0)>

            /* Assign the user structure work3BUS to the Simulink structure work3 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work3)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work3", "(*(GFLIB_RAMP_T_FLT *)work3BUS)", 0)>

            /* Assign the user structure y1BUS to the Simulink structure y1 */
            %assign dTypeId = LibBlockOutputSignalDataTypeId(0)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)y1", "(*(SWLIBS_2Syst_FLT *)y1BUS)", 0)>
        }

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %<LibAddToModelSources("%<cFileName>")>
    %else
        %<LibAddToCommonIncludes("amclib.h")>
        %<LibAddToCommonIncludes("gflib.h")>
        %<LibAddToCommonIncludes("gdflib.h")>
        %<LibAddToCommonIncludes("SWLIBS_Typedefs.h")>
        %<LibAddToCommonIncludes("GDFLIB_FilterMA.h")>
        %<LibAddToCommonIncludes("GFLIB_ControllerPIpAW.h")>
        %<LibAddToCommonIncludes("GFLIB_Ramp.h")>
    %endif
    %assign ::instanceCnt = 0
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif

    %assign ::instanceCnt = %<::instanceCnt> + 1

    %openfile tmpParamExternBuf
      %if ::instanceCnt == 1
        #include "amclib.h"
      %endif
      extern AMCLIB_SPEED_LOOP_T_FLT fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>;
      extern AMCLIB_SPEED_LOOP_DEBUG_T_FLT fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>;
    %closefile tmpParamExternBuf
    %<LibCacheExtern(tmpParamExternBuf)>

    %assign cDataFileName = LibGetMdlDataSrcBaseName()
    %assign cDataFile = LibCreateSourceFile("Source", "Simulink", cDataFileName)
    %openfile tmpParamBuf
      %if ::instanceCnt == 1
        #include "amclib.h"
      %endif
      AMCLIB_SPEED_LOOP_T_FLT fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>;
      AMCLIB_SPEED_LOOP_DEBUG_T_FLT fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>;
    %closefile tmpParamBuf
    %<LibSetSourceFileSection(cDataFile , "Definitions", tmpParamBuf)>
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign y1BUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign work1BUS_addr = "&" + LibBlockPWork("", "", "", 1)
        %assign work2BUS_addr = "&" + LibBlockPWork("", "", "", 2)
        %assign work3BUS_addr = "&" + LibBlockPWork("", "", "", 3)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (AMCLIB_SpeedLoop_SF_FLT_wrapper_allocmem(%<y1BUS_addr>, %<LibBlockOutputSignalWidth(0)>, %<work1BUS_addr>, %<LibBlockDWorkWidth(work1)>, %<work2BUS_addr>, %<LibBlockDWorkWidth(work2)>, %<work3BUS_addr>, %<LibBlockDWorkWidth(work3)>)!=0) %<LibSetRTModelErrorStatus("\"Memory allocation failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% Function: InitializeConditions =========================================
%function InitializeConditions (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign work1_ptr = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 1)
        %assign work2_ptr = LibBlockDWorkAddr(work2, "", "", 0)
        %assign work2BUS_ptr = LibBlockPWork("", "", "", 2)
        %assign work3_ptr = LibBlockDWorkAddr(work3, "", "", 0)
        %assign work3BUS_ptr = LibBlockPWork("", "", "", 3)
        %assign work4_ptr = LibBlockDWorkAddr(work4, "", "", 0)
        %assign p4_val = LibBlockParameter(p4, "", "", 0)
        %assign p5_val = LibBlockParameter(p5, "", "", 0)
        %assign p6_val = LibBlockParameter(p6, "", "", 0)
        %assign p7_val = LibBlockParameter(p7, "", "", 0)
        %assign p8_val = LibBlockParameter(p8, "", "", 0)
        %assign p9_val = LibBlockParameter(p9, "", "", 0)
        %assign p10_val = LibBlockParameter(p10, "", "", 0)
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign p2_val = LibBlockParameter(p2, "", "", 0)
        %assign p3_val = LibBlockParameter(p3, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        AMCLIB_SpeedLoop_SF_FLT_wrapper_InitializeConditions(%<work1_ptr>, %<work1BUS_ptr>, %<work2_ptr>, %<work2BUS_ptr>, %<work3_ptr>, %<work3BUS_ptr>, %<work4_ptr>, %<p4_val>, %<p5_val>, %<p6_val>, %<p7_val>, %<p8_val>, %<p9_val>, %<p10_val>, %<p1_val>, %<p2_val>, %<p3_val>);
    %else
        %assign pFilterW = LibBlockDWork(work1, "", "", 0)
        %assign pPIpAWQ = LibBlockDWork(work2, "", "", 0)
        %assign pRamp = LibBlockDWork(work3, "", "", 0)
        %assign s32ResetStates = LibBlockDWork(work4, "", "", 0)
        %assign fltLambdaW = LibBlockParameter(p4, "", "", 0)
        %assign fltPropGainQ = LibBlockParameter(p5, "", "", 0)
        %assign fltIntegGainQ = LibBlockParameter(p6, "", "", 0)
        %assign fltLowerLimitQ = LibBlockParameter(p7, "", "", 0)
        %assign fltUpperLimitQ = LibBlockParameter(p8, "", "", 0)
        %assign fltRampUp = LibBlockParameter(p9, "", "", 0)
        %assign fltRampDown = LibBlockParameter(p10, "", "", 0)
        %assign showStates = LibBlockParameter(p1, "", "", 0)
        %assign resetStatesEnable = LibBlockParameter(p2, "", "", 0)
        %assign showDebugOutputs = LibBlockParameter(p3, "", "", 0)
        %% 
        %if FEVAL("strcmp", showStates, "2")
          %if FEVAL("strcmp", showDebugOutputs, "2")
            /* Copy parameters to DEBUG state struct */
            fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pFilterW.fltLambda = (tFloat)(%<fltLambdaW>);
            fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltPropGain = (tFloat)(%<fltPropGainQ>);
            fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltIntegGain = (tFloat)(%<fltIntegGainQ>);
            fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltLowerLimit = (tFloat)(%<fltLowerLimitQ>);
            fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltUpperLimit = (tFloat)(%<fltUpperLimitQ>);
            fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pRamp.fltRampUp = (tFloat)(%<fltRampUp>);
            fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pRamp.fltRampDown = (tFloat)(%<fltRampDown>);
          %endif
        %endif
        
        /* Copy parameters to state struct */
        fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pFilterW.fltLambda = (tFloat)(%<fltLambdaW>);
        fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltPropGain = (tFloat)(%<fltPropGainQ>);
        fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltIntegGain = (tFloat)(%<fltIntegGainQ>);
        fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltLowerLimit = (tFloat)(%<fltLowerLimitQ>);
        fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltUpperLimit = (tFloat)(%<fltUpperLimitQ>);
        fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pRamp.fltRampUp = (tFloat)(%<fltRampUp>);
        fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pRamp.fltRampDown = (tFloat)(%<fltRampDown>);
        
        AMCLIB_SpeedLoopInit_FLT(&fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>);
        
        %if FEVAL("strcmp", showStates, "2")
          %if FEVAL("strcmp", showDebugOutputs, "2")
            /* Copy struct states to DEBUG struct states */
            fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pFilterW.fltAcc = fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pFilterW.fltAcc;
            fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltIntegPartK_1 = fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltIntegPartK_1;
            fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltInK_1 = fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltInK_1;
            fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pRamp.fltState = fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pRamp.fltState;
          %endif
        %endif
        
        %if FEVAL("strcmp", resetStatesEnable, "1")
          %<s32ResetStates> = (tS32)1;
        %endif
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign u1_val = LibBlockInputSignal(0, "", "", 0)
        %assign u2_val = LibBlockInputSignal(1, "", "", 0)
        %assign work1_ptr = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 1)
        %assign work2_ptr = LibBlockDWorkAddr(work2, "", "", 0)
        %assign work2BUS_ptr = LibBlockPWork("", "", "", 2)
        %assign work3_ptr = LibBlockDWorkAddr(work3, "", "", 0)
        %assign work3BUS_ptr = LibBlockPWork("", "", "", 3)
        %assign work4_ptr = LibBlockDWorkAddr(work4, "", "", 0)
        %assign u3_val = LibBlockInputSignal(2, "", "", 0)
        %assign u4_val = LibBlockInputSignal(3, "", "", 0)
        %assign u5_val = LibBlockInputSignal(4, "", "", 0)
        %assign u6_val = LibBlockInputSignal(5, "", "", 0)
        %assign u7_val = LibBlockInputSignal(6, "", "", 0)
        %assign u8_val = LibBlockInputSignal(7, "", "", 0)
        %assign u9_val = LibBlockInputSignal(8, "", "", 0)
        %assign u10_val = LibBlockInputSignal(9, "", "", 0)
        %assign u11_val = LibBlockInputSignal(10, "", "", 0)
        %assign u12_val = LibBlockInputSignal(11, "", "", 0)
        %assign u13_val = LibBlockInputSignal(12, "", "", 0)
        %assign u14_val = LibBlockInputSignal(13, "", "", 0)
        %assign u15_val = LibBlockInputSignal(14, "", "", 0)
        %assign u16_val = LibBlockInputSignal(15, "", "", 0)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign y1BUS_ptr = LibBlockPWork("", "", "", 0)
        %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign y3_ptr = LibBlockOutputSignalAddr(2, "", "", 0)
        %assign y4_ptr = LibBlockOutputSignalAddr(3, "", "", 0)
        %assign y5_ptr = LibBlockOutputSignalAddr(4, "", "", 0)
        %assign y6_ptr = LibBlockOutputSignalAddr(5, "", "", 0)
        %assign y7_ptr = LibBlockOutputSignalAddr(6, "", "", 0)
        %assign y8_ptr = LibBlockOutputSignalAddr(7, "", "", 0)
        %assign y9_ptr = LibBlockOutputSignalAddr(8, "", "", 0)
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign p2_val = LibBlockParameter(p2, "", "", 0)
        %assign p3_val = LibBlockParameter(p3, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        AMCLIB_SpeedLoop_SF_FLT_wrapper_Output(%<u1_val>, %<u2_val>, %<work1_ptr>, %<work1BUS_ptr>, %<work2_ptr>, %<work2BUS_ptr>, %<work3_ptr>, %<work3BUS_ptr>, %<work4_ptr>, %<u3_val>, %<u4_val>, %<u5_val>, %<u6_val>, %<u7_val>, %<u8_val>, %<u9_val>, %<u10_val>, %<u11_val>, %<u12_val>, %<u13_val>, %<u14_val>, %<u15_val>, %<u16_val>, %<y1_ptr>, %<y1BUS_ptr>, %<y2_ptr>, %<y3_ptr>, %<y4_ptr>, %<y5_ptr>, %<y6_ptr>, %<y7_ptr>, %<y8_ptr>, %<y9_ptr>, %<p1_val>, %<p2_val>, %<p3_val>);
    %else
        %assign fltVelocityReq = LibBlockInputSignal(0, "", "", 0)
        %assign fltVelocityFbck = LibBlockInputSignal(1, "", "", 0)
        %assign pFilterW = LibBlockDWork(work1, "", "", 0)
        %assign pPIpAWQ = LibBlockDWork(work2, "", "", 0)
        %assign pRamp = LibBlockDWork(work3, "", "", 0)
        %assign s32ResetStates = LibBlockDWork(work4, "", "", 0)
        %assign fltFilterMAWOut = LibBlockInputSignal(2, "", "", 0)
        %assign fltControllerPIpAWQOut = LibBlockInputSignal(3, "", "", 0)
        %assign fltRampOut = LibBlockInputSignal(4, "", "", 0)
        %assign fltLambdaW = LibBlockInputSignal(5, "", "", 0)
        %assign fltPropGainQ = LibBlockInputSignal(6, "", "", 0)
        %assign fltIntegGainQ = LibBlockInputSignal(7, "", "", 0)
        %assign fltLowerLimitQ = LibBlockInputSignal(8, "", "", 0)
        %assign fltUpperLimitQ = LibBlockInputSignal(9, "", "", 0)
        %assign fltRampUp = LibBlockInputSignal(10, "", "", 0)
        %assign fltRampDown = LibBlockInputSignal(11, "", "", 0)
        %assign fltAccW = LibBlockInputSignal(12, "", "", 0)
        %assign fltIntegPartK_1Q = LibBlockInputSignal(13, "", "", 0)
        %assign fltInK_1Q = LibBlockInputSignal(14, "", "", 0)
        %assign fltState = LibBlockInputSignal(15, "", "", 0)
        %assign pIDQReq = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign u16LimitFlagQ = LibBlockOutputSignal(1, "", "", 0)
        %assign fltWReqFilt = LibBlockOutputSignal(2, "", "", 0)
        %assign fltWErr = LibBlockOutputSignal(3, "", "", 0)
        %assign fltWFbckFilt = LibBlockOutputSignal(4, "", "", 0)
        %assign fltAccW_Out = LibBlockOutputSignal(5, "", "", 0)
        %assign fltIntegPartK_1Q_Out = LibBlockOutputSignal(6, "", "", 0)
        %assign fltInK_1Q_Out = LibBlockOutputSignal(7, "", "", 0)
        %assign fltState_Out = LibBlockOutputSignal(8, "", "", 0)
        %assign showStates = LibBlockParameter(p1, "", "", 0)
        %assign resetStatesEnable = LibBlockParameter(p2, "", "", 0)
        %assign showDebugOutputs = LibBlockParameter(p3, "", "", 0)
        %% 
        %if FEVAL("strcmp", showStates, "2")
          /* Copy inputs to Simulink states */
        
          %if FEVAL("strcmp", showDebugOutputs, "2")
            /* Copy inputs to DEBUG struct states */
            fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pFilterW.fltAcc = (tFloat)(%<fltAccW>);
            fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pFilterW.fltLambda = (tFloat)(%<fltLambdaW>);
            fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltPropGain = (tFloat)(%<fltPropGainQ>);
            fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltIntegGain = (tFloat)(%<fltIntegGainQ>);
            fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltLowerLimit = (tFloat)(%<fltLowerLimitQ>);
            fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltUpperLimit = (tFloat)(%<fltUpperLimitQ>);
            fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltIntegPartK_1 = (tFloat)(%<fltIntegPartK_1Q>);
            fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltInK_1 = (tFloat)(%<fltInK_1Q>);
            fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pRamp.fltState = (tFloat)(%<fltState>);
            fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pRamp.fltRampUp = (tFloat)(%<fltRampUp>);
            fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pRamp.fltRampDown = (tFloat)(%<fltRampDown>);
          %endif
        
          /* Copy inputs to struct states */
          fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pFilterW.fltAcc = (tFloat)(%<fltAccW>);
          fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pFilterW.fltLambda = (tFloat)(%<fltLambdaW>);
          fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltPropGain = (tFloat)(%<fltPropGainQ>);
          fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltIntegGain = (tFloat)(%<fltIntegGainQ>);
          fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltLowerLimit = (tFloat)(%<fltLowerLimitQ>);
          fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltUpperLimit = (tFloat)(%<fltUpperLimitQ>);
          fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltIntegPartK_1 = (tFloat)(%<fltIntegPartK_1Q>);
          fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltInK_1 = (tFloat)(%<fltInK_1Q>);
          fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pRamp.fltState = (tFloat)(%<fltState>);
          fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pRamp.fltRampUp = (tFloat)(%<fltRampUp>);
          fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pRamp.fltRampDown = (tFloat)(%<fltRampDown>);
        %endif
        
        %if FEVAL("strcmp", resetStatesEnable, "1")
          if ((tS32)(%<s32ResetStates>) != (tS32)0)
          {
            %<s32ResetStates> = (tS32)0;
            AMCLIB_SpeedLoopSetState_FLT((tFloat)(%<fltFilterMAWOut>), (tFloat)(%<fltControllerPIpAWQOut>), (tFloat)(%<fltRampOut>), &fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>);
            %if FEVAL("strcmp", showStates, "2")
              %if FEVAL("strcmp", showDebugOutputs, "2")
                /* Copy struct states to DEBUG struct states */
                fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pFilterW.fltAcc = fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pFilterW.fltAcc;
                fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltIntegPartK_1 = fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltIntegPartK_1;
                fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltInK_1 = fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltInK_1;
                fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pRamp.fltState = fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pRamp.fltState;
              %endif
            %endif
          }
          else
          {
            %if FEVAL("strcmp", showStates, "2")
              %if FEVAL("strcmp", showDebugOutputs, "2")
                AMCLIB_SpeedLoopDebug_FLT((tFloat)(%<fltVelocityReq>), (tFloat)(%<fltVelocityFbck>), (SWLIBS_2Syst_FLT *)(%<pIDQReq>),
                  &fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>);
              %else
                AMCLIB_SpeedLoop_FLT((tFloat)(%<fltVelocityReq>), (tFloat)(%<fltVelocityFbck>), (SWLIBS_2Syst_FLT *)(%<pIDQReq>), &fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>);
              %endif
            %else
              AMCLIB_SpeedLoop_FLT((tFloat)(%<fltVelocityReq>), (tFloat)(%<fltVelocityFbck>), (SWLIBS_2Syst_FLT *)(%<pIDQReq>), &fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>);
            %endif
          }
        %else
          %if FEVAL("strcmp", showStates, "2")
            %if FEVAL("strcmp", showDebugOutputs, "2")
              AMCLIB_SpeedLoopDebug_FLT((tFloat)(%<fltVelocityReq>), (tFloat)(%<fltVelocityFbck>), (SWLIBS_2Syst_FLT *)(%<pIDQReq>),
                  &fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>);
            %else
              AMCLIB_SpeedLoop_FLT((tFloat)(%<fltVelocityReq>), (tFloat)(%<fltVelocityFbck>), (SWLIBS_2Syst_FLT *)(%<pIDQReq>), &fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>);
            %endif
          %else
            AMCLIB_SpeedLoop_FLT((tFloat)(%<fltVelocityReq>), (tFloat)(%<fltVelocityFbck>), (SWLIBS_2Syst_FLT *)(%<pIDQReq>), &fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>);
          %endif
        %endif
        (%<pIDQReq>)->fltArg1 = 0.0f;
        
        %if FEVAL("strcmp", showStates, "2")
          %if FEVAL("strcmp", showDebugOutputs, "2")
            /* Copy DEBUG struct states to outputs */
            %<u16LimitFlagQ> = fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.u16LimitFlag;
            %<fltWReqFilt> = fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.fltWReqFilt;
            %<fltWErr> = fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.fltWErr;
            %<fltWFbckFilt> = fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.fltWFbckFilt;
            %<fltAccW_Out> = fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pFilterW.fltAcc;
            %<fltIntegPartK_1Q_Out> = fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltIntegPartK_1;
            %<fltInK_1Q_Out> = fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltInK_1;
            %<fltState_Out> = fltSpeedLoopDebugStateStr_%<SYSNAME(Name)[0]>.pRamp.fltState;
          %else
            /* Copy struct states to outputs */
            %<u16LimitFlagQ> = fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.u16LimitFlag;
            %<fltAccW_Out> = fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pFilterW.fltAcc;
            %<fltIntegPartK_1Q_Out> = fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltIntegPartK_1;
            %<fltInK_1Q_Out> = fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pPIpAWQ.fltInK_1;
            %<fltState_Out> = fltSpeedLoopStateStr_%<SYSNAME(Name)[0]>.pRamp.fltState;
          %endif
        %else
          /* Copy struct states to outputs */
        %endif
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign y1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign work1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 1)
        %assign work2BUSBUS_addr = "&" + LibBlockPWork("", "", "", 2)
        %assign work3BUSBUS_addr = "&" + LibBlockPWork("", "", "", 3)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (AMCLIB_SpeedLoop_SF_FLT_wrapper_freemem(%<y1BUSBUS_addr>, %<work1BUSBUS_addr>, %<work2BUSBUS_addr>, %<work3BUSBUS_addr>)!=0) %<LibSetRTModelErrorStatus("\"Memory free failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% [EOF]
