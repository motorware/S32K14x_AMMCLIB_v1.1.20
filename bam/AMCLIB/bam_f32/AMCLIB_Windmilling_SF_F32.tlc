%% file : AMCLIB_Windmilling_SF_F32.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for AMCLIB_Windmilling_SF_F32
%% 
%% Simulink version      : 9.3 (R2019a) 23-Nov-2018
%% TLC file generated on : 15-Apr-2020 21:00:02

%% Copyright 2019-2020 NXP
%%
%% NXP Confidential. This software is owned or controlled by NXP and may only be used strictly in
%% accordance with the applicable license terms.  By expressly accepting such terms or by
%% downloading, installing, activating and/or otherwise using the software, you are agreeing that
%% you have read, and that you agree to comply with and are bound by, such license terms.  If you
%% do not agree to be bound by the applicable license terms, then you may not retain, install,
%% activate or otherwise use the software.

%implements AMCLIB_Windmilling_SF_F32 "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %assign ver = FEVAL("ver", "simulink")
    %assign factor = 1.0
    %assign slVer = 0.0
    %foreach idx = SIZE(ver.Version)[1]
        %if ISEQUAL(ver.Version[idx], ".")
            %assign factor = factor/10.0
        %else
            %assign slVer = slVer + %<ver.Version[idx]>*factor
        %endif
    %endforeach
    
    %if GenerateErtSFunction==1 && slVer < 6.21
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink Object) may not be used in a model for which an ERT S-Function wrapper is being generated")>
    %endif
    
    %if ExtMode==1 && slVer < 6.3
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a model uses External Mode")>
    %endif
    
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %if slVer < 6.21
            %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a referenced model")>
        %endif
        
        %assign hFileName = FcnGenerateUniqueFileName("AMCLIB_Windmilling_SF_F32_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif
        
        extern int AMCLIB_Windmilling_SF_F32_wrapper_allocmem(void** u1BUS, int_T u1BUSWidth, void** work1BUS, int_T work1BUSWidth);
        extern int AMCLIB_Windmilling_SF_F32_wrapper_freemem(void** u1BUS, void** work1BUS);

        extern void AMCLIB_Windmilling_SF_F32_wrapper_InitializeConditions( void* work1, void* work1BUS, const int32_T p2, const int32_T p3, const int32_T p4, const int32_T p5, const int32_T p6, const uint16_T p7, const int32_T p8, const uint16_T p9);
        extern void AMCLIB_Windmilling_SF_F32_wrapper_Output( uint32_T* y1, const void* u1, void* u1BUS,  void* work1, void* work1BUS, const int32_T u2, const int32_T u3, const int32_T u4, const int32_T u5, const int32_T u6, const uint16_T u7, const int32_T u8, const uint16_T u9, const int32_T u10, const int32_T u11, const int32_T u12, const int32_T u13,  int32_T* y2,  int32_T* y3,  int32_T* y4,  int32_T* y5,  int32_T* y6,  int32_T* y7, const int32_T p1);
        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("AMCLIB_Windmilling_SF_F32_wrapper", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <stdlib.h>
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif

        #include "amclib.h"
        #include "gflib.h"
        #include "gmclib.h"
        #include "gdflib.h"

        #include "SWLIBS_Typedefs.h"
        #include "GFLIB_ControllerPIrAW.h"
        #include "GFLIB_IntegratorTR.h"
        #include "AMCLIB_TrackObsrv.h"
        #include "GDFLIB_FilterMA.h"
        #include "AMCLIB_Windmilling.h"

        int AMCLIB_Windmilling_SF_F32_wrapper_allocmem(void** u1BUS, int_T u1BUSWidth, void** work1BUS, int_T work1BUSWidth) {
            *u1BUS = calloc(sizeof(SWLIBS_3Syst_F32), u1BUSWidth);
            if (*u1BUS==NULL) return -1;
            *work1BUS = calloc(sizeof(AMCLIB_WINDMILLING_T_F32), work1BUSWidth);
            if (*work1BUS==NULL) return -1;
            return 0;
        }
        
        int AMCLIB_Windmilling_SF_F32_wrapper_freemem(void** u1BUS, void** work1BUS) {
            if (*u1BUS!=NULL) free(*u1BUS);
            *u1BUS = NULL;
            if (*work1BUS!=NULL) free(*work1BUS);
            *work1BUS = NULL;
            return 0;
        }

        void AMCLIB_Windmilling_SF_F32_wrapper_InitializeConditions( void* work1, void* work1BUS, const int32_T p2, const int32_T p3, const int32_T p4, const int32_T p5, const int32_T p6, const uint16_T p7, const int32_T p8, const uint16_T p9) {

            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(AMCLIB_WINDMILLING_T_F32 *)work1BUS)", "(char *)work1", 0)>

              ((AMCLIB_WINDMILLING_T_F32 *const)(work1BUS))->pParamATO.pParamPI.f32CC1sc = (tFrac32)(p3);
              ((AMCLIB_WINDMILLING_T_F32 *const)(work1BUS))->pParamATO.pParamPI.f32CC2sc = (tFrac32)(p4);
              ((AMCLIB_WINDMILLING_T_F32 *const)(work1BUS))->pParamATO.pParamPI.f32UpperLimit = (tFrac32)(p5);
              ((AMCLIB_WINDMILLING_T_F32 *const)(work1BUS))->pParamATO.pParamPI.f32LowerLimit = (tFrac32)(p6);
              ((AMCLIB_WINDMILLING_T_F32 *const)(work1BUS))->pParamATO.pParamPI.u16NShift = (tU16)(p7);
              ((AMCLIB_WINDMILLING_T_F32 *const)(work1BUS))->pParamATO.pParamInteg.f32C1 = (tFrac32)(p8);
              ((AMCLIB_WINDMILLING_T_F32 *const)(work1BUS))->pParamATO.pParamInteg.u16NShift = (tU16)(p9);
              AMCLIB_WindmillingInit_F32((tFrac32)(p2), (AMCLIB_WINDMILLING_T_F32 *const)(work1BUS));

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(AMCLIB_WINDMILLING_T_F32 *)work1BUS)", 0)>
        }

        void AMCLIB_Windmilling_SF_F32_wrapper_Output( uint32_T* y1, const void* u1, void* u1BUS,  void* work1, void* work1BUS, const int32_T u2, const int32_T u3, const int32_T u4, const int32_T u5, const int32_T u6, const uint16_T u7, const int32_T u8, const uint16_T u9, const int32_T u10, const int32_T u11, const int32_T u12, const int32_T u13,  int32_T* y2,  int32_T* y3,  int32_T* y4,  int32_T* y5,  int32_T* y6,  int32_T* y7, const int32_T p1) {

            /* Assign the Simulink structure u1 to user structure u1BUS */
            %assign dTypeId = LibBlockInputSignalDataTypeId(0)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(SWLIBS_3Syst_F32 *)u1BUS)", "(char *)u1", 0)>


            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(AMCLIB_WINDMILLING_T_F32 *)work1BUS)", "(char *)work1", 0)>

            
            if((tS32)2 == (tS32)(p1))
            {
              ((AMCLIB_WINDMILLING_T_F32 *const)(work1BUS))->f32ADCComp = MLIB_AbsSat_F32((tFrac32)(u2)) + (tFrac32)1;
              ((AMCLIB_WINDMILLING_T_F32 *const)(work1BUS))->pParamATO.pParamPI.f32CC1sc = (tFrac32)(u3);
              ((AMCLIB_WINDMILLING_T_F32 *const)(work1BUS))->pParamATO.pParamPI.f32CC2sc = (tFrac32)(u4);
              ((AMCLIB_WINDMILLING_T_F32 *const)(work1BUS))->pParamATO.pParamPI.f32Acc = (tFrac32)(u10);
              ((AMCLIB_WINDMILLING_T_F32 *const)(work1BUS))->pParamATO.pParamPI.f32InErrK1 = (tFrac32)(u11);
              ((AMCLIB_WINDMILLING_T_F32 *const)(work1BUS))->pParamATO.pParamPI.f32UpperLimit = (tFrac32)(u5);
              ((AMCLIB_WINDMILLING_T_F32 *const)(work1BUS))->pParamATO.pParamPI.f32LowerLimit = (tFrac32)(u6);
              ((AMCLIB_WINDMILLING_T_F32 *const)(work1BUS))->pParamATO.pParamPI.u16NShift = (tU16)(u7);
              ((AMCLIB_WINDMILLING_T_F32 *const)(work1BUS))->pParamATO.pParamInteg.f32State = (tFrac32)(u12);
              ((AMCLIB_WINDMILLING_T_F32 *const)(work1BUS))->pParamATO.pParamInteg.f32InK1 = (tFrac32)(u13);
              ((AMCLIB_WINDMILLING_T_F32 *const)(work1BUS))->pParamATO.pParamInteg.f32C1 = (tFrac32)(u8);
              ((AMCLIB_WINDMILLING_T_F32 *const)(work1BUS))->pParamATO.pParamInteg.u16NShift = (tU16)(u9);
            }
            *y1 = (tU32)AMCLIB_Windmilling_F32((const SWLIBS_3Syst_F32 *)(u1BUS), (tFrac32 *)(y2), (tFrac32 *)(y3), (AMCLIB_WINDMILLING_T_F32 *const)(work1BUS));
            if((tS32)2 == (tS32)(p1))
            {
              *((tFrac32 *)y4) = ((AMCLIB_WINDMILLING_T_F32 *const)(work1BUS))->pParamATO.pParamPI.f32Acc;
              *((tFrac32 *)y5) = ((AMCLIB_WINDMILLING_T_F32 *const)(work1BUS))->pParamATO.pParamPI.f32InErrK1;
              *((tFrac32 *)y6) = ((AMCLIB_WINDMILLING_T_F32 *const)(work1BUS))->pParamATO.pParamInteg.f32State;
              *((tFrac32 *)y7) = ((AMCLIB_WINDMILLING_T_F32 *const)(work1BUS))->pParamATO.pParamInteg.f32InK1;
            }

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(AMCLIB_WINDMILLING_T_F32 *)work1BUS)", 0)>
        }

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %<LibAddToModelSources("%<cFileName>")>
    %else
        %<LibAddToCommonIncludes("amclib.h")>
        %<LibAddToCommonIncludes("gflib.h")>
        %<LibAddToCommonIncludes("gmclib.h")>
        %<LibAddToCommonIncludes("gdflib.h")>
        %<LibAddToCommonIncludes("SWLIBS_Typedefs.h")>
        %<LibAddToCommonIncludes("GFLIB_ControllerPIrAW.h")>
        %<LibAddToCommonIncludes("GFLIB_IntegratorTR.h")>
        %<LibAddToCommonIncludes("AMCLIB_TrackObsrv.h")>
        %<LibAddToCommonIncludes("GDFLIB_FilterMA.h")>
        %<LibAddToCommonIncludes("AMCLIB_Windmilling.h")>
    %endif
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign u1BUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign work1BUS_addr = "&" + LibBlockPWork("", "", "", 1)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (AMCLIB_Windmilling_SF_F32_wrapper_allocmem(%<u1BUS_addr>, %<LibBlockInputSignalWidth(0)>, %<work1BUS_addr>, %<LibBlockDWorkWidth(work1)>)!=0) %<LibSetRTModelErrorStatus("\"Memory allocation failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% Function: InitializeConditions =========================================
%function InitializeConditions (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign work1_ptr = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 1)
        %assign p2_val = LibBlockParameter(p2, "", "", 0)
        %assign p3_val = LibBlockParameter(p3, "", "", 0)
        %assign p4_val = LibBlockParameter(p4, "", "", 0)
        %assign p5_val = LibBlockParameter(p5, "", "", 0)
        %assign p6_val = LibBlockParameter(p6, "", "", 0)
        %assign p7_val = LibBlockParameter(p7, "", "", 0)
        %assign p8_val = LibBlockParameter(p8, "", "", 0)
        %assign p9_val = LibBlockParameter(p9, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        AMCLIB_Windmilling_SF_F32_wrapper_InitializeConditions(%<work1_ptr>, %<work1BUS_ptr>, %<p2_val>, %<p3_val>, %<p4_val>, %<p5_val>, %<p6_val>, %<p7_val>, %<p8_val>, %<p9_val>);
    %else
        %assign pCtrl = LibBlockDWorkAddr(work1, "", "", 0)
        %assign f32ADCMaxError = LibBlockParameter(p2, "", "", 0)
        %assign f32CC1sc = LibBlockParameter(p3, "", "", 0)
        %assign f32CC2sc = LibBlockParameter(p4, "", "", 0)
        %assign f32UpperLimit = LibBlockParameter(p5, "", "", 0)
        %assign f32LowerLimit = LibBlockParameter(p6, "", "", 0)
        %assign u16NShiftPI = LibBlockParameter(p7, "", "", 0)
        %assign f32C1 = LibBlockParameter(p8, "", "", 0)
        %assign u16NShiftI = LibBlockParameter(p9, "", "", 0)
        %% 
        (%<pCtrl>)->pParamATO.pParamPI.f32CC1sc = (tFrac32)(%<f32CC1sc>);
        (%<pCtrl>)->pParamATO.pParamPI.f32CC2sc = (tFrac32)(%<f32CC2sc>);
        (%<pCtrl>)->pParamATO.pParamPI.f32UpperLimit = (tFrac32)(%<f32UpperLimit>);
        (%<pCtrl>)->pParamATO.pParamPI.f32LowerLimit = (tFrac32)(%<f32LowerLimit>);
        (%<pCtrl>)->pParamATO.pParamPI.u16NShift = (tU16)(%<u16NShiftPI>);
        (%<pCtrl>)->pParamATO.pParamInteg.f32C1 = (tFrac32)(%<f32C1>);
        (%<pCtrl>)->pParamATO.pParamInteg.u16NShift = (tU16)(%<u16NShiftI>);
        AMCLIB_WindmillingInit_F32((tFrac32)(%<f32ADCMaxError>), (AMCLIB_WINDMILLING_T_F32 *const)(%<pCtrl>));
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
        %assign u1BUS_ptr = LibBlockPWork("", "", "", 0)
        %assign work1_ptr = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 1)
        %assign u2_val = LibBlockInputSignal(1, "", "", 0)
        %assign u3_val = LibBlockInputSignal(2, "", "", 0)
        %assign u4_val = LibBlockInputSignal(3, "", "", 0)
        %assign u5_val = LibBlockInputSignal(4, "", "", 0)
        %assign u6_val = LibBlockInputSignal(5, "", "", 0)
        %assign u7_val = LibBlockInputSignal(6, "", "", 0)
        %assign u8_val = LibBlockInputSignal(7, "", "", 0)
        %assign u9_val = LibBlockInputSignal(8, "", "", 0)
        %assign u10_val = LibBlockInputSignal(9, "", "", 0)
        %assign u11_val = LibBlockInputSignal(10, "", "", 0)
        %assign u12_val = LibBlockInputSignal(11, "", "", 0)
        %assign u13_val = LibBlockInputSignal(12, "", "", 0)
        %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign y3_ptr = LibBlockOutputSignalAddr(2, "", "", 0)
        %assign y4_ptr = LibBlockOutputSignalAddr(3, "", "", 0)
        %assign y5_ptr = LibBlockOutputSignalAddr(4, "", "", 0)
        %assign y6_ptr = LibBlockOutputSignalAddr(5, "", "", 0)
        %assign y7_ptr = LibBlockOutputSignalAddr(6, "", "", 0)
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        AMCLIB_Windmilling_SF_F32_wrapper_Output(%<y1_ptr>, %<u1_ptr>, %<u1BUS_ptr>, %<work1_ptr>, %<work1BUS_ptr>, %<u2_val>, %<u3_val>, %<u4_val>, %<u5_val>, %<u6_val>, %<u7_val>, %<u8_val>, %<u9_val>, %<u10_val>, %<u11_val>, %<u12_val>, %<u13_val>, %<y2_ptr>, %<y3_ptr>, %<y4_ptr>, %<y5_ptr>, %<y6_ptr>, %<y7_ptr>, %<p1_val>);
    %else
        %assign u32Lock = LibBlockOutputSignal(0, "", "", 0)
        %assign pUabcIn = LibBlockInputSignalAddr(0, "", "", 0)
        %assign pCtrl = LibBlockDWorkAddr(work1, "", "", 0)
        %assign f32ADCMaxError = LibBlockInputSignal(1, "", "", 0)
        %assign f32CC1sc = LibBlockInputSignal(2, "", "", 0)
        %assign f32CC2sc = LibBlockInputSignal(3, "", "", 0)
        %assign f32UpperLimit = LibBlockInputSignal(4, "", "", 0)
        %assign f32LowerLimit = LibBlockInputSignal(5, "", "", 0)
        %assign u16NShiftPI = LibBlockInputSignal(6, "", "", 0)
        %assign f32C1 = LibBlockInputSignal(7, "", "", 0)
        %assign u16NShiftI = LibBlockInputSignal(8, "", "", 0)
        %assign f32AccPI = LibBlockInputSignal(9, "", "", 0)
        %assign f32InErrK1 = LibBlockInputSignal(10, "", "", 0)
        %assign f32State = LibBlockInputSignal(11, "", "", 0)
        %assign f32InK1 = LibBlockInputSignal(12, "", "", 0)
        %assign pPosEst = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign pVelocityEst = LibBlockOutputSignalAddr(2, "", "", 0)
        %assign f32AccPI_Out = LibBlockOutputSignal(3, "", "", 0)
        %assign f32InErrK1_Out = LibBlockOutputSignal(4, "", "", 0)
        %assign f32State_Out = LibBlockOutputSignal(5, "", "", 0)
        %assign f32InK1_Out = LibBlockOutputSignal(6, "", "", 0)
        %assign showStates = LibBlockParameter(p1, "", "", 0)
        %% 
        
        %if FEVAL("strcmp", showStates, "2")
          (%<pCtrl>)->f32ADCComp = MLIB_AbsSat_F32((tFrac32)(%<f32ADCMaxError>)) + (tFrac32)1;
          (%<pCtrl>)->pParamATO.pParamPI.f32CC1sc = (tFrac32)(%<f32CC1sc>);
          (%<pCtrl>)->pParamATO.pParamPI.f32CC2sc = (tFrac32)(%<f32CC2sc>);
          (%<pCtrl>)->pParamATO.pParamPI.f32Acc = (tFrac32)(%<f32AccPI>);
          (%<pCtrl>)->pParamATO.pParamPI.f32InErrK1 = (tFrac32)(%<f32InErrK1>);
          (%<pCtrl>)->pParamATO.pParamPI.f32UpperLimit = (tFrac32)(%<f32UpperLimit>);
          (%<pCtrl>)->pParamATO.pParamPI.f32LowerLimit = (tFrac32)(%<f32LowerLimit>);
          (%<pCtrl>)->pParamATO.pParamPI.u16NShift = (tU16)(%<u16NShiftPI>);
          (%<pCtrl>)->pParamATO.pParamInteg.f32State = (tFrac32)(%<f32State>);
          (%<pCtrl>)->pParamATO.pParamInteg.f32InK1 = (tFrac32)(%<f32InK1>);
          (%<pCtrl>)->pParamATO.pParamInteg.f32C1 = (tFrac32)(%<f32C1>);
          (%<pCtrl>)->pParamATO.pParamInteg.u16NShift = (tU16)(%<u16NShiftI>);
        %endif
        %<u32Lock> = (tU32)AMCLIB_Windmilling_F32((const SWLIBS_3Syst_F32 *)(%<pUabcIn>), (tFrac32 *)(%<pPosEst>), (tFrac32 *)(%<pVelocityEst>), (AMCLIB_WINDMILLING_T_F32 *const)(%<pCtrl>));
        %if FEVAL("strcmp", showStates, "2")
          %<f32AccPI_Out> = (%<pCtrl>)->pParamATO.pParamPI.f32Acc;
          %<f32InErrK1_Out> = (%<pCtrl>)->pParamATO.pParamPI.f32InErrK1;
          %<f32State_Out> = (%<pCtrl>)->pParamATO.pParamInteg.f32State;
          %<f32InK1_Out> = (%<pCtrl>)->pParamATO.pParamInteg.f32InK1;
        %endif
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign u1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign work1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 1)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (AMCLIB_Windmilling_SF_F32_wrapper_freemem(%<u1BUSBUS_addr>, %<work1BUSBUS_addr>)!=0) %<LibSetRTModelErrorStatus("\"Memory free failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% [EOF]
