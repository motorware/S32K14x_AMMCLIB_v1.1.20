%% file : AMCLIB_FW_SF_F32.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for AMCLIB_FW_SF_F32
%% 
%% Simulink version      : 9.3 (R2019a) 23-Nov-2018
%% TLC file generated on : 15-Apr-2020 20:58:39

%% Copyright 2019-2020 NXP
%%
%% NXP Confidential. This software is owned or controlled by NXP and may only be used strictly in
%% accordance with the applicable license terms.  By expressly accepting such terms or by
%% downloading, installing, activating and/or otherwise using the software, you are agreeing that
%% you have read, and that you agree to comply with and are bound by, such license terms.  If you
%% do not agree to be bound by the applicable license terms, then you may not retain, install,
%% activate or otherwise use the software.

%implements AMCLIB_FW_SF_F32 "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %assign ver = FEVAL("ver", "simulink")
    %assign factor = 1.0
    %assign slVer = 0.0
    %foreach idx = SIZE(ver.Version)[1]
        %if ISEQUAL(ver.Version[idx], ".")
            %assign factor = factor/10.0
        %else
            %assign slVer = slVer + %<ver.Version[idx]>*factor
        %endif
    %endforeach
    
    %if GenerateErtSFunction==1 && slVer < 6.21
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink Object) may not be used in a model for which an ERT S-Function wrapper is being generated")>
    %endif
    
    %if ExtMode==1 && slVer < 6.3
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a model uses External Mode")>
    %endif
    
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %if slVer < 6.21
            %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a referenced model")>
        %endif
        
        %assign hFileName = FcnGenerateUniqueFileName("AMCLIB_FW_SF_F32_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif
        
        extern int AMCLIB_FW_SF_F32_wrapper_allocmem(void** y1BUS, int_T y1BUSWidth, void** work1BUS, int_T work1BUSWidth, void** work2BUS, int_T work2BUSWidth, void** work3BUS, int_T work3BUSWidth);
        extern int AMCLIB_FW_SF_F32_wrapper_freemem(void** y1BUS, void** work1BUS, void** work2BUS, void** work3BUS);

        extern void AMCLIB_FW_SF_F32_wrapper_InitializeConditions( void* work1, void* work1BUS,  void* work2, void* work2BUS,  void* work3, void* work3BUS,  int32_T* work4, const uint16_T p4, const int32_T p5, const int32_T p6, const int16_T p7, const int16_T p8, const int32_T p9, const int32_T p10, const int32_T p1, const int32_T p2, const int32_T p3);
        extern void AMCLIB_FW_SF_F32_wrapper_Output(const int32_T u1, const int32_T u2,  void* work1, void* work1BUS,  void* work2, void* work2BUS,  void* work3, void* work3BUS,  int32_T* work4, const int32_T* u3, const int32_T* u4, const int32_T* u5, const int32_T u6, const int32_T u7, const uint16_T u8, const int32_T u9, const int32_T u10, const int16_T u11, const int16_T u12, const int32_T u13, const int32_T u14, const int32_T u15, const int32_T u16, const int32_T u17, const int32_T u18,  void* y1, void* y1BUS,  uint16_T* y2,  int32_T* y3,  int32_T* y4,  int32_T* y5,  int32_T* y6,  int32_T* y7,  int32_T* y8,  int32_T* y9,  int32_T* y10,  int32_T* y11,  int32_T* y12,  int32_T* y13, const int32_T p1, const int32_T p2, const int32_T p3);
        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("AMCLIB_FW_SF_F32_wrapper", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <stdlib.h>
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif

        #include "amclib.h"
        #include "gdflib.h"
        #include "gflib.h"

        #include "SWLIBS_Typedefs.h"
        #include "GDFLIB_FilterMA.h"
        #include "GFLIB_ControllerPIpAW.h"

        int AMCLIB_FW_SF_F32_wrapper_allocmem(void** y1BUS, int_T y1BUSWidth, void** work1BUS, int_T work1BUSWidth, void** work2BUS, int_T work2BUSWidth, void** work3BUS, int_T work3BUSWidth) {
            *y1BUS = calloc(sizeof(SWLIBS_2Syst_F32), y1BUSWidth);
            if (*y1BUS==NULL) return -1;
            *work1BUS = calloc(sizeof(SWLIBS_2Syst_F32), work1BUSWidth);
            if (*work1BUS==NULL) return -1;
            *work2BUS = calloc(sizeof(GDFLIB_FILTER_MA_T_F32), work2BUSWidth);
            if (*work2BUS==NULL) return -1;
            *work3BUS = calloc(sizeof(GFLIB_CONTROLLER_PIAW_P_T_F32), work3BUSWidth);
            if (*work3BUS==NULL) return -1;
            return 0;
        }
        
        int AMCLIB_FW_SF_F32_wrapper_freemem(void** y1BUS, void** work1BUS, void** work2BUS, void** work3BUS) {
            if (*y1BUS!=NULL) free(*y1BUS);
            *y1BUS = NULL;
            if (*work1BUS!=NULL) free(*work1BUS);
            *work1BUS = NULL;
            if (*work2BUS!=NULL) free(*work2BUS);
            *work2BUS = NULL;
            if (*work3BUS!=NULL) free(*work3BUS);
            *work3BUS = NULL;
            return 0;
        }

        void AMCLIB_FW_SF_F32_wrapper_InitializeConditions( void* work1, void* work1BUS,  void* work2, void* work2BUS,  void* work3, void* work3BUS,  int32_T* work4, const uint16_T p4, const int32_T p5, const int32_T p6, const int16_T p7, const int16_T p8, const int32_T p9, const int32_T p10, const int32_T p1, const int32_T p2, const int32_T p3) {

            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(SWLIBS_2Syst_F32 *)work1BUS)", "(char *)work1", 0)>


            /* Assign the Simulink structure work2 to user structure work2BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work2)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GDFLIB_FILTER_MA_T_F32 *)work2BUS)", "(char *)work2", 0)>


            /* Assign the Simulink structure work3 to user structure work3BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work3)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GFLIB_CONTROLLER_PIAW_P_T_F32 *)work3BUS)", "(char *)work3", 0)>

                AMCLIB_FW_T_F32 f32FWStateStr;
                
                /* Copy parameters to Simulink states */
                ((GDFLIB_FILTER_MA_T_F32 *)(work2BUS))->u16NSamples = (tU16)(p4);
                ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->f32PropGain = (tFrac32)(p5);
                ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->f32IntegGain = (tFrac32)(p6);
                ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->s16PropGainShift = (tS16)(p7);
                ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->s16IntegGainShift = (tS16)(p8);
                ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->f32LowerLimit = (tFrac32)(p9);
                ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->f32UpperLimit = (tFrac32)(p10);
            
                /* Copy Simulink state parameters to state struct */
                f32FWStateStr.pFilterFW.u16NSamples = ((GDFLIB_FILTER_MA_T_F32 *)(work2BUS))->u16NSamples;
                f32FWStateStr.pPIpAWFW.f32PropGain = ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->f32PropGain;
                f32FWStateStr.pPIpAWFW.f32IntegGain = ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->f32IntegGain;
                f32FWStateStr.pPIpAWFW.s16PropGainShift = ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->s16PropGainShift;
                f32FWStateStr.pPIpAWFW.s16IntegGainShift = ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->s16IntegGainShift;
                f32FWStateStr.pPIpAWFW.f32LowerLimit = ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->f32LowerLimit;
                f32FWStateStr.pPIpAWFW.f32UpperLimit = ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->f32UpperLimit;
                
                AMCLIB_FWInit_F32(&f32FWStateStr);
            
                /* Set Simulink state to zero */
                ((SWLIBS_2Syst_F32 *)(work1BUS))->f32Arg1 = (tFrac32)0;
                ((SWLIBS_2Syst_F32 *)(work1BUS))->f32Arg2 = (tFrac32)0;
                
                /* Copy struct states to Simulink states */
                ((GDFLIB_FILTER_MA_T_F32 *)(work2BUS))->f32Acc = f32FWStateStr.pFilterFW.f32Acc;
                ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->f32IntegPartK_1 = f32FWStateStr.pPIpAWFW.f32IntegPartK_1;
                ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->f32InK_1 = f32FWStateStr.pPIpAWFW.f32InK_1;
                
                if ((tS32)1 == (tS32)(p2))
                {
                  *((tS32 *)work4) = (tS32)1;
                }

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(SWLIBS_2Syst_F32 *)work1BUS)", 0)>

            /* Assign the user structure work2BUS to the Simulink structure work2 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work2)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work2", "(*(GDFLIB_FILTER_MA_T_F32 *)work2BUS)", 0)>

            /* Assign the user structure work3BUS to the Simulink structure work3 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work3)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work3", "(*(GFLIB_CONTROLLER_PIAW_P_T_F32 *)work3BUS)", 0)>
        }

        void AMCLIB_FW_SF_F32_wrapper_Output(const int32_T u1, const int32_T u2,  void* work1, void* work1BUS,  void* work2, void* work2BUS,  void* work3, void* work3BUS,  int32_T* work4, const int32_T* u3, const int32_T* u4, const int32_T* u5, const int32_T u6, const int32_T u7, const uint16_T u8, const int32_T u9, const int32_T u10, const int16_T u11, const int16_T u12, const int32_T u13, const int32_T u14, const int32_T u15, const int32_T u16, const int32_T u17, const int32_T u18,  void* y1, void* y1BUS,  uint16_T* y2,  int32_T* y3,  int32_T* y4,  int32_T* y5,  int32_T* y6,  int32_T* y7,  int32_T* y8,  int32_T* y9,  int32_T* y10,  int32_T* y11,  int32_T* y12,  int32_T* y13, const int32_T p1, const int32_T p2, const int32_T p3) {

            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(SWLIBS_2Syst_F32 *)work1BUS)", "(char *)work1", 0)>


            /* Assign the Simulink structure work2 to user structure work2BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work2)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GDFLIB_FILTER_MA_T_F32 *)work2BUS)", "(char *)work2", 0)>


            /* Assign the Simulink structure work3 to user structure work3BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work3)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GFLIB_CONTROLLER_PIAW_P_T_F32 *)work3BUS)", "(char *)work3", 0)>

            AMCLIB_FW_T_F32 f32FWStateStr;
            AMCLIB_FW_DEBUG_T_F32 f32FWDebugStateStr;
            
            if((tS32)2 == (tS32)(p1))
            {
              /* Copy inputs to Simulink states */
              ((SWLIBS_2Syst_F32 *)(work1BUS))->f32Arg2 = (tFrac32)(u15);
              ((GDFLIB_FILTER_MA_T_F32 *)(work2BUS))->f32Acc = (tFrac32)(u16);
              ((GDFLIB_FILTER_MA_T_F32 *)(work2BUS))->u16NSamples = (tU16)(u8);
              ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->f32PropGain = (tFrac32)(u9);
              ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->f32IntegGain = (tFrac32)(u10);
              ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->s16PropGainShift = (tS16)(u11);
              ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->s16IntegGainShift = (tS16)(u12);
              ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->f32LowerLimit = (tFrac32)(u13);
              ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->f32UpperLimit = (tFrac32)(u14);
              ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->f32IntegPartK_1 = (tFrac32)(u17);
              ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->f32InK_1 = (tFrac32)(u18);
            
              /* Copy Simulink states to DEBUG struct states */
              f32FWDebugStateStr.pFilterFW.f32Acc = ((GDFLIB_FILTER_MA_T_F32 *)(work2BUS))->f32Acc;
              f32FWDebugStateStr.pFilterFW.u16NSamples = ((GDFLIB_FILTER_MA_T_F32 *)(work2BUS))->u16NSamples;
              f32FWDebugStateStr.pPIpAWFW.f32PropGain = ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->f32PropGain;
              f32FWDebugStateStr.pPIpAWFW.f32IntegGain = ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->f32IntegGain;
              f32FWDebugStateStr.pPIpAWFW.s16PropGainShift = ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->s16PropGainShift;
              f32FWDebugStateStr.pPIpAWFW.s16IntegGainShift = ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->s16IntegGainShift;
              f32FWDebugStateStr.pPIpAWFW.f32LowerLimit = ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->f32LowerLimit;
              f32FWDebugStateStr.pPIpAWFW.f32UpperLimit = ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->f32UpperLimit;
              f32FWDebugStateStr.pPIpAWFW.f32IntegPartK_1 = ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->f32IntegPartK_1;
              f32FWDebugStateStr.pPIpAWFW.f32InK_1 = ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->f32InK_1;
              
              /* Copy inputs to DEBUG struct states */
              f32FWDebugStateStr.pIQFbck = (tFrac32 *)(u3);
              f32FWDebugStateStr.pUQReq = (tFrac32 *)(u4);
              f32FWDebugStateStr.pUQLim = (tFrac32 *)(u5);
            }
            
            /* Copy Simulink states to struct states */
            f32FWStateStr.pFilterFW.f32Acc = ((GDFLIB_FILTER_MA_T_F32 *)(work2BUS))->f32Acc;
            f32FWStateStr.pFilterFW.u16NSamples = ((GDFLIB_FILTER_MA_T_F32 *)(work2BUS))->u16NSamples;
            f32FWStateStr.pPIpAWFW.f32PropGain = ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->f32PropGain;
            f32FWStateStr.pPIpAWFW.f32IntegGain = ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->f32IntegGain;
            f32FWStateStr.pPIpAWFW.s16PropGainShift = ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->s16PropGainShift;
            f32FWStateStr.pPIpAWFW.s16IntegGainShift = ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->s16IntegGainShift;
            f32FWStateStr.pPIpAWFW.f32LowerLimit = ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->f32LowerLimit;
            f32FWStateStr.pPIpAWFW.f32UpperLimit = ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->f32UpperLimit;
            f32FWStateStr.pPIpAWFW.f32IntegPartK_1 = ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->f32IntegPartK_1;
            f32FWStateStr.pPIpAWFW.f32InK_1 = ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->f32InK_1;
            
            /* Copy inputs to struct states */
            f32FWStateStr.pIQFbck = (tFrac32 *)(u3);
            f32FWStateStr.pUQReq = (tFrac32 *)(u4);
            f32FWStateStr.pUQLim = (tFrac32 *)(u5);
            
            if ((tS32)1 == (tS32)(p2))
            {
              if (*(tS32 *)(work4) != (tS32)0)
              {
                *((tS32 *)work4) = (tS32)0;
                AMCLIB_FWSetState_F32((tFrac32)(u6), (tFrac32)(u7), &f32FWStateStr);
                if((tS32)2 == (tS32)(p1))
                {
                  /* Copy struct states to DEBUG struct states */
                  f32FWDebugStateStr.pFilterFW.f32Acc = f32FWStateStr.pFilterFW.f32Acc;
                  f32FWDebugStateStr.pPIpAWFW.f32IntegPartK_1 = f32FWStateStr.pPIpAWFW.f32IntegPartK_1;
                  f32FWDebugStateStr.pPIpAWFW.f32InK_1 = f32FWStateStr.pPIpAWFW.f32InK_1;
                }
                /* Set Simulink state to zero */
                ((SWLIBS_2Syst_F32 *)(work1BUS))->f32Arg1 = (tFrac32)0;
                ((SWLIBS_2Syst_F32 *)(work1BUS))->f32Arg2 = (tFrac32)0;
              }
              else
              {
                if((tS32)2 == (tS32)(p1))
                {
                  AMCLIB_FWDebug_F32((tFrac32)(u1), (tFrac32)(u2), (SWLIBS_2Syst_F32 *)(work1BUS), &f32FWDebugStateStr);
                }
                else
                {
                  AMCLIB_FW_F32((tFrac32)(u1), (tFrac32)(u2), (SWLIBS_2Syst_F32 *)(work1BUS), &f32FWStateStr);
                }
              }
            }
            else
            {
              if((tS32)2 == (tS32)(p1))
              {
                AMCLIB_FWDebug_F32((tFrac32)(u1), (tFrac32)(u2), (SWLIBS_2Syst_F32 *)(work1BUS), &f32FWDebugStateStr);
              }
              else
              {
                AMCLIB_FW_F32((tFrac32)(u1), (tFrac32)(u2), (SWLIBS_2Syst_F32 *)(work1BUS), &f32FWStateStr);
              }
            }
            
            /* Copy Simulink states to output */
            ((SWLIBS_2Syst_F32 *)(y1BUS))->f32Arg1 = ((SWLIBS_2Syst_F32 *)(work1BUS))->f32Arg1;
            ((SWLIBS_2Syst_F32 *)(y1BUS))->f32Arg2 = ((SWLIBS_2Syst_F32 *)(work1BUS))->f32Arg2;
            
            if((tS32)2 == (tS32)(p1))
            {
              /* Copy DEBUG struct states to Simulink states */
              ((GDFLIB_FILTER_MA_T_F32 *)(work2BUS))->f32Acc = f32FWDebugStateStr.pFilterFW.f32Acc;
              ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->f32IntegPartK_1 = f32FWDebugStateStr.pPIpAWFW.f32IntegPartK_1;
              ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->f32InK_1 = f32FWDebugStateStr.pPIpAWFW.f32InK_1;
            
              /* Copy DEBUG struct states to outputs */
              *((tU16 *)y2) = f32FWDebugStateStr.pPIpAWFW.u16LimitFlag;
              *((tFrac32 *)y3) = f32FWDebugStateStr.f32IQErrSign;
              *((tFrac32 *)y4) = f32FWDebugStateStr.f32IQErr;
              *((tFrac32 *)y5) = f32FWDebugStateStr.f32FWErr;
              *((tFrac32 *)y6) = f32FWDebugStateStr.f32UQErr;
              *((tFrac32 *)y7) = f32FWDebugStateStr.f32FWErrFilt;
              *((tFrac32 *)y8) = f32FWDebugStateStr.f32FWAngle;
              *((tFrac32 *)y9) = f32FWDebugStateStr.f32FWSin;
              *((tFrac32 *)y10) = f32FWDebugStateStr.f32FWCos;
              *((tFrac32 *)y11) = f32FWDebugStateStr.pFilterFW.f32Acc;
              *((tFrac32 *)y12) = f32FWDebugStateStr.pPIpAWFW.f32IntegPartK_1;
              *((tFrac32 *)y13) = f32FWDebugStateStr.pPIpAWFW.f32InK_1;
            }
            else
            {
              /* Copy struct states to Simulink states */
              ((GDFLIB_FILTER_MA_T_F32 *)(work2BUS))->f32Acc = f32FWStateStr.pFilterFW.f32Acc;
              ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->f32IntegPartK_1 = f32FWStateStr.pPIpAWFW.f32IntegPartK_1;
              ((GFLIB_CONTROLLER_PIAW_P_T_F32 *)(work3BUS))->f32InK_1 = f32FWStateStr.pPIpAWFW.f32InK_1;
            
              /* Copy struct states to outputs */
              *((tU16 *)y2) = f32FWStateStr.pPIpAWFW.u16LimitFlag;
            }

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(SWLIBS_2Syst_F32 *)work1BUS)", 0)>

            /* Assign the user structure work2BUS to the Simulink structure work2 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work2)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work2", "(*(GDFLIB_FILTER_MA_T_F32 *)work2BUS)", 0)>

            /* Assign the user structure work3BUS to the Simulink structure work3 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work3)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work3", "(*(GFLIB_CONTROLLER_PIAW_P_T_F32 *)work3BUS)", 0)>

            /* Assign the user structure y1BUS to the Simulink structure y1 */
            %assign dTypeId = LibBlockOutputSignalDataTypeId(0)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)y1", "(*(SWLIBS_2Syst_F32 *)y1BUS)", 0)>
        }

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %<LibAddToModelSources("%<cFileName>")>
    %else
        %<LibAddToCommonIncludes("amclib.h")>
        %<LibAddToCommonIncludes("gdflib.h")>
        %<LibAddToCommonIncludes("gflib.h")>
        %<LibAddToCommonIncludes("SWLIBS_Typedefs.h")>
        %<LibAddToCommonIncludes("GDFLIB_FilterMA.h")>
        %<LibAddToCommonIncludes("GFLIB_ControllerPIpAW.h")>
    %endif
    %assign ::instanceCnt = 0
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif

    %assign ::instanceCnt = %<::instanceCnt> + 1

    %openfile tmpParamExternBuf
      %if ::instanceCnt == 1
        #include "amclib.h"
      %endif
      extern AMCLIB_FW_T_F32 f32FWStateStr_%<SYSNAME(Name)[0]>;
      extern AMCLIB_FW_DEBUG_T_F32 f32FWDebugStateStr_%<SYSNAME(Name)[0]>;
    %closefile tmpParamExternBuf
    %<LibCacheExtern(tmpParamExternBuf)>

    %assign cDataFileName = LibGetMdlDataSrcBaseName()
    %assign cDataFile = LibCreateSourceFile("Source", "Simulink", cDataFileName)
    %openfile tmpParamBuf
      %if ::instanceCnt == 1
        #include "amclib.h"
      %endif
      AMCLIB_FW_T_F32 f32FWStateStr_%<SYSNAME(Name)[0]>;
      AMCLIB_FW_DEBUG_T_F32 f32FWDebugStateStr_%<SYSNAME(Name)[0]>;
    %closefile tmpParamBuf
    %<LibSetSourceFileSection(cDataFile , "Definitions", tmpParamBuf)>
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign y1BUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign work1BUS_addr = "&" + LibBlockPWork("", "", "", 1)
        %assign work2BUS_addr = "&" + LibBlockPWork("", "", "", 2)
        %assign work3BUS_addr = "&" + LibBlockPWork("", "", "", 3)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (AMCLIB_FW_SF_F32_wrapper_allocmem(%<y1BUS_addr>, %<LibBlockOutputSignalWidth(0)>, %<work1BUS_addr>, %<LibBlockDWorkWidth(work1)>, %<work2BUS_addr>, %<LibBlockDWorkWidth(work2)>, %<work3BUS_addr>, %<LibBlockDWorkWidth(work3)>)!=0) %<LibSetRTModelErrorStatus("\"Memory allocation failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% Function: InitializeConditions =========================================
%function InitializeConditions (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign work1_ptr = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 1)
        %assign work2_ptr = LibBlockDWorkAddr(work2, "", "", 0)
        %assign work2BUS_ptr = LibBlockPWork("", "", "", 2)
        %assign work3_ptr = LibBlockDWorkAddr(work3, "", "", 0)
        %assign work3BUS_ptr = LibBlockPWork("", "", "", 3)
        %assign work4_ptr = LibBlockDWorkAddr(work4, "", "", 0)
        %assign p4_val = LibBlockParameter(p4, "", "", 0)
        %assign p5_val = LibBlockParameter(p5, "", "", 0)
        %assign p6_val = LibBlockParameter(p6, "", "", 0)
        %assign p7_val = LibBlockParameter(p7, "", "", 0)
        %assign p8_val = LibBlockParameter(p8, "", "", 0)
        %assign p9_val = LibBlockParameter(p9, "", "", 0)
        %assign p10_val = LibBlockParameter(p10, "", "", 0)
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign p2_val = LibBlockParameter(p2, "", "", 0)
        %assign p3_val = LibBlockParameter(p3, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        AMCLIB_FW_SF_F32_wrapper_InitializeConditions(%<work1_ptr>, %<work1BUS_ptr>, %<work2_ptr>, %<work2BUS_ptr>, %<work3_ptr>, %<work3BUS_ptr>, %<work4_ptr>, %<p4_val>, %<p5_val>, %<p6_val>, %<p7_val>, %<p8_val>, %<p9_val>, %<p10_val>, %<p1_val>, %<p2_val>, %<p3_val>);
    %else
        %assign pIDQReqState = LibBlockDWork(work1, "", "", 0)
        %assign pFilterFW = LibBlockDWork(work2, "", "", 0)
        %assign pPIpAWFW = LibBlockDWork(work3, "", "", 0)
        %assign s32ResetStates = LibBlockDWork(work4, "", "", 0)
        %assign u16NSamples = LibBlockParameter(p4, "", "", 0)
        %assign f32PropGain = LibBlockParameter(p5, "", "", 0)
        %assign f32IntegGain = LibBlockParameter(p6, "", "", 0)
        %assign s16PropGainShift = LibBlockParameter(p7, "", "", 0)
        %assign s16IntegGainShift = LibBlockParameter(p8, "", "", 0)
        %assign f32LowerLimit = LibBlockParameter(p9, "", "", 0)
        %assign f32UpperLimit = LibBlockParameter(p10, "", "", 0)
        %assign showStates = LibBlockParameter(p1, "", "", 0)
        %assign resetStatesEnable = LibBlockParameter(p2, "", "", 0)
        %assign showDebugOutputs = LibBlockParameter(p3, "", "", 0)
        %% 
        %if FEVAL("strcmp", showStates, "2")
          %if FEVAL("strcmp", showDebugOutputs, "2")
            /* Copy parameters to DEBUG state struct */
            f32FWDebugStateStr_%<SYSNAME(Name)[0]>.pFilterFW.u16NSamples = (tU16)(%<u16NSamples>);
            f32FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32PropGain = (tFrac32)(%<f32PropGain>);
            f32FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32IntegGain = (tFrac32)(%<f32IntegGain>);
            f32FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.s16PropGainShift = (tS16)(%<s16PropGainShift>);
            f32FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.s16IntegGainShift = (tS16)(%<s16IntegGainShift>);
            f32FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32LowerLimit = (tFrac32)(%<f32LowerLimit>);
            f32FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32UpperLimit = (tFrac32)(%<f32UpperLimit>);
          %endif
        %endif
        
        /* Copy parameters to state struct */
        f32FWStateStr_%<SYSNAME(Name)[0]>.pFilterFW.u16NSamples = (tU16)(%<u16NSamples>);
        f32FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32PropGain = (tFrac32)(%<f32PropGain>);
        f32FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32IntegGain = (tFrac32)(%<f32IntegGain>);
        f32FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.s16PropGainShift = (tS16)(%<s16PropGainShift>);
        f32FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.s16IntegGainShift = (tS16)(%<s16IntegGainShift>);
        f32FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32LowerLimit = (tFrac32)(%<f32LowerLimit>);
        f32FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32UpperLimit = (tFrac32)(%<f32UpperLimit>);
        
        AMCLIB_FWInit_F32(&f32FWStateStr_%<SYSNAME(Name)[0]>);
        
        /* Set Simulink state to zero */
        (%<pIDQReqState>).f32Arg1 = (tFrac32)0;
        (%<pIDQReqState>).f32Arg2 = (tFrac32)0;
        
        %if FEVAL("strcmp", showStates, "2")
          %if FEVAL("strcmp", showDebugOutputs, "2")
            /* Copy struct states to DEBUG struct states */
            f32FWDebugStateStr_%<SYSNAME(Name)[0]>.pFilterFW.f32Acc = f32FWStateStr_%<SYSNAME(Name)[0]>.pFilterFW.f32Acc;
            f32FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32IntegPartK_1 = f32FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32IntegPartK_1;
            f32FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32InK_1 = f32FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32InK_1;
          %endif
        %endif
        
        %if FEVAL("strcmp", resetStatesEnable, "1")
          %<s32ResetStates> = (tS32)1;
        %endif
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign u1_val = LibBlockInputSignal(0, "", "", 0)
        %assign u2_val = LibBlockInputSignal(1, "", "", 0)
        %assign work1_ptr = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 1)
        %assign work2_ptr = LibBlockDWorkAddr(work2, "", "", 0)
        %assign work2BUS_ptr = LibBlockPWork("", "", "", 2)
        %assign work3_ptr = LibBlockDWorkAddr(work3, "", "", 0)
        %assign work3BUS_ptr = LibBlockPWork("", "", "", 3)
        %assign work4_ptr = LibBlockDWorkAddr(work4, "", "", 0)
        %assign u3_ptr = LibBlockInputSignalAddr(2, "", "", 0)
        %assign u4_ptr = LibBlockInputSignalAddr(3, "", "", 0)
        %assign u5_ptr = LibBlockInputSignalAddr(4, "", "", 0)
        %assign u6_val = LibBlockInputSignal(5, "", "", 0)
        %assign u7_val = LibBlockInputSignal(6, "", "", 0)
        %assign u8_val = LibBlockInputSignal(7, "", "", 0)
        %assign u9_val = LibBlockInputSignal(8, "", "", 0)
        %assign u10_val = LibBlockInputSignal(9, "", "", 0)
        %assign u11_val = LibBlockInputSignal(10, "", "", 0)
        %assign u12_val = LibBlockInputSignal(11, "", "", 0)
        %assign u13_val = LibBlockInputSignal(12, "", "", 0)
        %assign u14_val = LibBlockInputSignal(13, "", "", 0)
        %assign u15_val = LibBlockInputSignal(14, "", "", 0)
        %assign u16_val = LibBlockInputSignal(15, "", "", 0)
        %assign u17_val = LibBlockInputSignal(16, "", "", 0)
        %assign u18_val = LibBlockInputSignal(17, "", "", 0)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign y1BUS_ptr = LibBlockPWork("", "", "", 0)
        %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign y3_ptr = LibBlockOutputSignalAddr(2, "", "", 0)
        %assign y4_ptr = LibBlockOutputSignalAddr(3, "", "", 0)
        %assign y5_ptr = LibBlockOutputSignalAddr(4, "", "", 0)
        %assign y6_ptr = LibBlockOutputSignalAddr(5, "", "", 0)
        %assign y7_ptr = LibBlockOutputSignalAddr(6, "", "", 0)
        %assign y8_ptr = LibBlockOutputSignalAddr(7, "", "", 0)
        %assign y9_ptr = LibBlockOutputSignalAddr(8, "", "", 0)
        %assign y10_ptr = LibBlockOutputSignalAddr(9, "", "", 0)
        %assign y11_ptr = LibBlockOutputSignalAddr(10, "", "", 0)
        %assign y12_ptr = LibBlockOutputSignalAddr(11, "", "", 0)
        %assign y13_ptr = LibBlockOutputSignalAddr(12, "", "", 0)
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign p2_val = LibBlockParameter(p2, "", "", 0)
        %assign p3_val = LibBlockParameter(p3, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        AMCLIB_FW_SF_F32_wrapper_Output(%<u1_val>, %<u2_val>, %<work1_ptr>, %<work1BUS_ptr>, %<work2_ptr>, %<work2BUS_ptr>, %<work3_ptr>, %<work3BUS_ptr>, %<work4_ptr>, %<u3_ptr>, %<u4_ptr>, %<u5_ptr>, %<u6_val>, %<u7_val>, %<u8_val>, %<u9_val>, %<u10_val>, %<u11_val>, %<u12_val>, %<u13_val>, %<u14_val>, %<u15_val>, %<u16_val>, %<u17_val>, %<u18_val>, %<y1_ptr>, %<y1BUS_ptr>, %<y2_ptr>, %<y3_ptr>, %<y4_ptr>, %<y5_ptr>, %<y6_ptr>, %<y7_ptr>, %<y8_ptr>, %<y9_ptr>, %<y10_ptr>, %<y11_ptr>, %<y12_ptr>, %<y13_ptr>, %<p1_val>, %<p2_val>, %<p3_val>);
    %else
        %assign f32IDQReqAmp = LibBlockInputSignal(0, "", "", 0)
        %assign f32VelocityFbck = LibBlockInputSignal(1, "", "", 0)
        %assign pIDQReqState = LibBlockDWorkAddr(work1, "", "", 0)
        %assign pFilterFW = LibBlockDWork(work2, "", "", 0)
        %assign pPIpAWFW = LibBlockDWork(work3, "", "", 0)
        %assign s32ResetStates = LibBlockDWork(work4, "", "", 0)
        %assign f32IQFbck = LibBlockInputSignalAddr(2, "", "", 0)
        %assign f32UQReq = LibBlockInputSignalAddr(3, "", "", 0)
        %assign f32UQLim = LibBlockInputSignalAddr(4, "", "", 0)
        %assign f32FilterMAFWOut = LibBlockInputSignal(5, "", "", 0)
        %assign f32ControllerPIpAWFWOut = LibBlockInputSignal(6, "", "", 0)
        %assign u16NSamples = LibBlockInputSignal(7, "", "", 0)
        %assign f32PropGain = LibBlockInputSignal(8, "", "", 0)
        %assign f32IntegGain = LibBlockInputSignal(9, "", "", 0)
        %assign s16PropGainShift = LibBlockInputSignal(10, "", "", 0)
        %assign s16IntegGainShift = LibBlockInputSignal(11, "", "", 0)
        %assign f32LowerLimit = LibBlockInputSignal(12, "", "", 0)
        %assign f32UpperLimit = LibBlockInputSignal(13, "", "", 0)
        %assign f32IQReqK_1 = LibBlockInputSignal(14, "", "", 0)
        %assign f32Acc = LibBlockInputSignal(15, "", "", 0)
        %assign f32IntegPartK_1 = LibBlockInputSignal(16, "", "", 0)
        %assign f32InK_1 = LibBlockInputSignal(17, "", "", 0)
        %assign pIDQReq = LibBlockOutputSignal(0, "", "", 0)
        %assign u16LimitFlag = LibBlockOutputSignal(1, "", "", 0)
        %assign f32IQErrSign = LibBlockOutputSignal(2, "", "", 0)
        %assign f32IQErr = LibBlockOutputSignal(3, "", "", 0)
        %assign f32FWErr = LibBlockOutputSignal(4, "", "", 0)
        %assign f32UQErr = LibBlockOutputSignal(5, "", "", 0)
        %assign f32FWErrFilt = LibBlockOutputSignal(6, "", "", 0)
        %assign f32FWAngle = LibBlockOutputSignal(7, "", "", 0)
        %assign f32FWSin = LibBlockOutputSignal(8, "", "", 0)
        %assign f32FWCos = LibBlockOutputSignal(9, "", "", 0)
        %assign f32Acc_Out = LibBlockOutputSignal(10, "", "", 0)
        %assign f32IntegPartK_1_Out = LibBlockOutputSignal(11, "", "", 0)
        %assign f32InK_1_Out = LibBlockOutputSignal(12, "", "", 0)
        %assign showStates = LibBlockParameter(p1, "", "", 0)
        %assign resetStatesEnable = LibBlockParameter(p2, "", "", 0)
        %assign showDebugOutputs = LibBlockParameter(p3, "", "", 0)
        %% 
        %if FEVAL("strcmp", showStates, "2")
          /* Copy inputs to Simulink states */
          (%<pIDQReqState>)->f32Arg2 = (tFrac32)(%<f32IQReqK_1>);
        
          %if FEVAL("strcmp", showDebugOutputs, "2")
            /* Copy inputs to DEBUG struct states */
            f32FWDebugStateStr_%<SYSNAME(Name)[0]>.pFilterFW.f32Acc = (tFrac32)(%<f32Acc>);
            f32FWDebugStateStr_%<SYSNAME(Name)[0]>.pFilterFW.u16NSamples = (tU16)(%<u16NSamples>);
            f32FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32PropGain = (tFrac32)(%<f32PropGain>);
            f32FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32IntegGain = (tFrac32)(%<f32IntegGain>);
            f32FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.s16PropGainShift = (tS16)(%<s16PropGainShift>);
            f32FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.s16IntegGainShift = (tS16)(%<s16IntegGainShift>);
            f32FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32LowerLimit = (tFrac32)(%<f32LowerLimit>);
            f32FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32UpperLimit = (tFrac32)(%<f32UpperLimit>);
            f32FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32IntegPartK_1 = (tFrac32)(%<f32IntegPartK_1>);
            f32FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32InK_1 = (tFrac32)(%<f32InK_1>);
            f32FWDebugStateStr_%<SYSNAME(Name)[0]>.pIQFbck = (tFrac32 *)(%<f32IQFbck>);
            f32FWDebugStateStr_%<SYSNAME(Name)[0]>.pUQReq = (tFrac32 *)(%<f32UQReq>);
            f32FWDebugStateStr_%<SYSNAME(Name)[0]>.pUQLim = (tFrac32 *)(%<f32UQLim>);
          %endif
        
          /* Copy inputs to struct states*/
          f32FWStateStr_%<SYSNAME(Name)[0]>.pFilterFW.f32Acc = (tFrac32)(%<f32Acc>);
          f32FWStateStr_%<SYSNAME(Name)[0]>.pFilterFW.u16NSamples = (tU16)(%<u16NSamples>);
          f32FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32PropGain = (tFrac32)(%<f32PropGain>);
          f32FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32IntegGain = (tFrac32)(%<f32IntegGain>);
          f32FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.s16PropGainShift = (tS16)(%<s16PropGainShift>);
          f32FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.s16IntegGainShift = (tS16)(%<s16IntegGainShift>);
          f32FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32LowerLimit = (tFrac32)(%<f32LowerLimit>);
          f32FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32UpperLimit = (tFrac32)(%<f32UpperLimit>);
          f32FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32IntegPartK_1 = (tFrac32)(%<f32IntegPartK_1>);
          f32FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32InK_1 = (tFrac32)(%<f32InK_1>);
        %endif
        
        /* Copy inputs to struct states */
        f32FWStateStr_%<SYSNAME(Name)[0]>.pIQFbck = (tFrac32 *)(%<f32IQFbck>);
        f32FWStateStr_%<SYSNAME(Name)[0]>.pUQReq = (tFrac32 *)(%<f32UQReq>);
        f32FWStateStr_%<SYSNAME(Name)[0]>.pUQLim = (tFrac32 *)(%<f32UQLim>);
        
        %if FEVAL("strcmp", resetStatesEnable, "1")
          if ((tS32)(%<s32ResetStates>) != (tS32)0)
          {
            %<s32ResetStates> = (tS32)0;
            AMCLIB_FWSetState_F32((tFrac32)(%<f32FilterMAFWOut>), (tFrac32)(%<f32ControllerPIpAWFWOut>), &f32FWStateStr_%<SYSNAME(Name)[0]>);
            %if FEVAL("strcmp", showStates, "2")
              %if FEVAL("strcmp", showDebugOutputs, "2")
                /* Copy struct states to DEBUG struct states */
                f32FWDebugStateStr_%<SYSNAME(Name)[0]>.pFilterFW.f32Acc = f32FWStateStr_%<SYSNAME(Name)[0]>.pFilterFW.f32Acc;
                f32FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32IntegPartK_1 = f32FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32IntegPartK_1;
                f32FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32InK_1 = f32FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32InK_1;
              %endif
            %endif
            /* Set Simulink state to zero */
            (%<pIDQReqState>)->f32Arg1 = (tFrac32)0;
            (%<pIDQReqState>)->f32Arg2 = (tFrac32)0;
          }
          else
          {
            %if FEVAL("strcmp", showStates, "2")
              %if FEVAL("strcmp", showDebugOutputs, "2")
                AMCLIB_FWDebug_F32((tFrac32)(%<f32IDQReqAmp>), (tFrac32)(%<f32VelocityFbck>), (SWLIBS_2Syst_F32 *)(%<pIDQReqState>), &f32FWDebugStateStr_%<SYSNAME(Name)[0]>);
              %else
                AMCLIB_FW_F32((tFrac32)(%<f32IDQReqAmp>), (tFrac32)(%<f32VelocityFbck>), (SWLIBS_2Syst_F32 *)(%<pIDQReqState>), &f32FWStateStr_%<SYSNAME(Name)[0]>);
              %endif
            %else
              AMCLIB_FW_F32((tFrac32)(%<f32IDQReqAmp>), (tFrac32)(%<f32VelocityFbck>), (SWLIBS_2Syst_F32 *)(%<pIDQReqState>), &f32FWStateStr_%<SYSNAME(Name)[0]>);
            %endif
          }
        %else
          %if FEVAL("strcmp", showStates, "2")
            %if FEVAL("strcmp", showDebugOutputs, "2")
              AMCLIB_FWDebug_F32((tFrac32)(%<f32IDQReqAmp>), (tFrac32)(%<f32VelocityFbck>), (SWLIBS_2Syst_F32 *)(%<pIDQReqState>), &f32FWDebugStateStr_%<SYSNAME(Name)[0]>);
            %else
              AMCLIB_FW_F32((tFrac32)(%<f32IDQReqAmp>), (tFrac32)(%<f32VelocityFbck>), (SWLIBS_2Syst_F32 *)(%<pIDQReqState>), &f32FWStateStr_%<SYSNAME(Name)[0]>);
            %endif
          %else
            AMCLIB_FW_F32((tFrac32)(%<f32IDQReqAmp>), (tFrac32)(%<f32VelocityFbck>), (SWLIBS_2Syst_F32 *)(%<pIDQReqState>), &f32FWStateStr_%<SYSNAME(Name)[0]>);
          %endif
        %endif
        
        /* Copy Simulink states to output */
        (%<pIDQReq>).f32Arg1 = (%<pIDQReqState>)->f32Arg1;
        (%<pIDQReq>).f32Arg2 = (%<pIDQReqState>)->f32Arg2;
        
        %if FEVAL("strcmp", showStates, "2")
          %if FEVAL("strcmp", showDebugOutputs, "2")
            /* Copy DEBUG struct states to outputs */
            %<u16LimitFlag> = f32FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.u16LimitFlag;
            %<f32IQErrSign> = f32FWDebugStateStr_%<SYSNAME(Name)[0]>.f32IQErrSign;
            %<f32IQErr> = f32FWDebugStateStr_%<SYSNAME(Name)[0]>.f32IQErr;
            %<f32FWErr> = f32FWDebugStateStr_%<SYSNAME(Name)[0]>.f32FWErr;
            %<f32UQErr> = f32FWDebugStateStr_%<SYSNAME(Name)[0]>.f32UQErr;
            %<f32FWErrFilt> = f32FWDebugStateStr_%<SYSNAME(Name)[0]>.f32FWErrFilt;
            %<f32FWAngle> = f32FWDebugStateStr_%<SYSNAME(Name)[0]>.f32FWAngle;
            %<f32FWSin> = f32FWDebugStateStr_%<SYSNAME(Name)[0]>.f32FWSin;
            %<f32FWCos> = f32FWDebugStateStr_%<SYSNAME(Name)[0]>.f32FWCos;
            %<f32Acc_Out> = f32FWDebugStateStr_%<SYSNAME(Name)[0]>.pFilterFW.f32Acc;
            %<f32IntegPartK_1_Out> = f32FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32IntegPartK_1;
            %<f32InK_1_Out> = f32FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32InK_1;
          %else
            /* Copy struct states to outputs */
            %<u16LimitFlag> = f32FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.u16LimitFlag;
            %<f32Acc_Out> = f32FWStateStr_%<SYSNAME(Name)[0]>.pFilterFW.f32Acc;
            %<f32IntegPartK_1_Out> = f32FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32IntegPartK_1;
            %<f32InK_1_Out> = f32FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32InK_1;
          %endif
        %else
          /* Copy struct states to outputs */
          %<u16LimitFlag> = f32FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.u16LimitFlag;
        %endif
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign y1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign work1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 1)
        %assign work2BUSBUS_addr = "&" + LibBlockPWork("", "", "", 2)
        %assign work3BUSBUS_addr = "&" + LibBlockPWork("", "", "", 3)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (AMCLIB_FW_SF_F32_wrapper_freemem(%<y1BUSBUS_addr>, %<work1BUSBUS_addr>, %<work2BUSBUS_addr>, %<work3BUSBUS_addr>)!=0) %<LibSetRTModelErrorStatus("\"Memory free failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% [EOF]
