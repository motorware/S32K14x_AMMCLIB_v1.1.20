%% file : GMCLIB_SvmSci_SF_FLT.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for GMCLIB_SvmSci_SF_FLT
%% 
%% Simulink version      : 9.3 (R2019a) 23-Nov-2018
%% TLC file generated on : 15-Apr-2020 21:06:12

%% Copyright 2019-2020 NXP
%%
%% NXP Confidential. This software is owned or controlled by NXP and may only be used strictly in
%% accordance with the applicable license terms.  By expressly accepting such terms or by
%% downloading, installing, activating and/or otherwise using the software, you are agreeing that
%% you have read, and that you agree to comply with and are bound by, such license terms.  If you
%% do not agree to be bound by the applicable license terms, then you may not retain, install,
%% activate or otherwise use the software.

%implements GMCLIB_SvmSci_SF_FLT "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %assign ver = FEVAL("ver", "simulink")
    %assign factor = 1.0
    %assign slVer = 0.0
    %foreach idx = SIZE(ver.Version)[1]
        %if ISEQUAL(ver.Version[idx], ".")
            %assign factor = factor/10.0
        %else
            %assign slVer = slVer + %<ver.Version[idx]>*factor
        %endif
    %endforeach
    
    %if GenerateErtSFunction==1 && slVer < 6.21
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink Object) may not be used in a model for which an ERT S-Function wrapper is being generated")>
    %endif
    
    %if ExtMode==1 && slVer < 6.3
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a model uses External Mode")>
    %endif
    
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %if slVer < 6.21
            %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a referenced model")>
        %endif
        
        %assign hFileName = FcnGenerateUniqueFileName("GMCLIB_SvmSci_SF_FLT_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif
        
        extern int GMCLIB_SvmSci_SF_FLT_wrapper_allocmem(void** y2BUS, int_T y2BUSWidth, void** u1BUS, int_T u1BUSWidth);
        extern int GMCLIB_SvmSci_SF_FLT_wrapper_freemem(void** y2BUS, void** u1BUS);

        extern void GMCLIB_SvmSci_SF_FLT_wrapper_Output( uint32_T* y1,  void* y2, void* y2BUS, const void* u1, void* u1BUS);
        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("GMCLIB_SvmSci_SF_FLT_wrapper", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <stdlib.h>
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif

        #include "gmclib.h"

        #include "SWLIBS_Typedefs.h"

        int GMCLIB_SvmSci_SF_FLT_wrapper_allocmem(void** y2BUS, int_T y2BUSWidth, void** u1BUS, int_T u1BUSWidth) {
            *y2BUS = calloc(sizeof(SWLIBS_3Syst_FLT), y2BUSWidth);
            if (*y2BUS==NULL) return -1;
            *u1BUS = calloc(sizeof(SWLIBS_2Syst_FLT), u1BUSWidth);
            if (*u1BUS==NULL) return -1;
            return 0;
        }
        
        int GMCLIB_SvmSci_SF_FLT_wrapper_freemem(void** y2BUS, void** u1BUS) {
            if (*y2BUS!=NULL) free(*y2BUS);
            *y2BUS = NULL;
            if (*u1BUS!=NULL) free(*u1BUS);
            *u1BUS = NULL;
            return 0;
        }

        void GMCLIB_SvmSci_SF_FLT_wrapper_Output( uint32_T* y1,  void* y2, void* y2BUS, const void* u1, void* u1BUS) {

            /* Assign the Simulink structure u1 to user structure u1BUS */
            %assign dTypeId = LibBlockInputSignalDataTypeId(0)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(SWLIBS_2Syst_FLT *)u1BUS)", "(char *)u1", 0)>

            *((tU32 *)y1) = GMCLIB_SvmSci_FLT((SWLIBS_3Syst_FLT *)(y2BUS), (const SWLIBS_2Syst_FLT *const)(u1BUS));

            /* Assign the user structure y2BUS to the Simulink structure y2 */
            %assign dTypeId = LibBlockOutputSignalDataTypeId(1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)y2", "(*(SWLIBS_3Syst_FLT *)y2BUS)", 0)>
        }

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %<LibAddToModelSources("%<cFileName>")>
    %else
        %<LibAddToCommonIncludes("gmclib.h")>
        %<LibAddToCommonIncludes("SWLIBS_Typedefs.h")>
    %endif
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign y2BUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign u1BUS_addr = "&" + LibBlockPWork("", "", "", 1)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (GMCLIB_SvmSci_SF_FLT_wrapper_allocmem(%<y2BUS_addr>, %<LibBlockOutputSignalWidth(1)>, %<u1BUS_addr>, %<LibBlockInputSignalWidth(0)>)!=0) %<LibSetRTModelErrorStatus("\"Memory allocation failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign y2BUS_ptr = LibBlockPWork("", "", "", 0)
        %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
        %assign u1BUS_ptr = LibBlockPWork("", "", "", 1)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        GMCLIB_SvmSci_SF_FLT_wrapper_Output(%<y1_ptr>, %<y2_ptr>, %<y2BUS_ptr>, %<u1_ptr>, %<u1BUS_ptr>);
    %else
        %assign retVal = LibBlockOutputSignal(0, "", "", 0)
        %assign pOut = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign pIn = LibBlockInputSignalAddr(0, "", "", 0)
        %% 
        %<retVal> = GMCLIB_SvmSci_FLT((SWLIBS_3Syst_FLT *)(%<pOut>), (const SWLIBS_2Syst_FLT *const)(%<pIn>));
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign y2BUSBUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign u1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 1)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (GMCLIB_SvmSci_SF_FLT_wrapper_freemem(%<y2BUSBUS_addr>, %<u1BUSBUS_addr>)!=0) %<LibSetRTModelErrorStatus("\"Memory free failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% [EOF]
