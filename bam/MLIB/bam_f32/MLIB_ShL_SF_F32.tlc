%% file : MLIB_ShL_SF_F32.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for MLIB_ShL_SF_F32
%% 
%% Simulink version      : 9.3 (R2019a) 23-Nov-2018
%% TLC file generated on : 15-Apr-2020 21:09:13

%% Copyright 2019-2020 NXP
%%
%% NXP Confidential. This software is owned or controlled by NXP and may only be used strictly in
%% accordance with the applicable license terms.  By expressly accepting such terms or by
%% downloading, installing, activating and/or otherwise using the software, you are agreeing that
%% you have read, and that you agree to comply with and are bound by, such license terms.  If you
%% do not agree to be bound by the applicable license terms, then you may not retain, install,
%% activate or otherwise use the software.

%implements MLIB_ShL_SF_F32 "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %assign ver = FEVAL("ver", "simulink")
    %assign factor = 1.0
    %assign slVer = 0.0
    %foreach idx = SIZE(ver.Version)[1]
        %if ISEQUAL(ver.Version[idx], ".")
            %assign factor = factor/10.0
        %else
            %assign slVer = slVer + %<ver.Version[idx]>*factor
        %endif
    %endforeach
    
    %if GenerateErtSFunction==1 && slVer < 6.21
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink Object) may not be used in a model for which an ERT S-Function wrapper is being generated")>
    %endif
    
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign hFileName = FcnGenerateUniqueFileName("MLIB_ShL_SF_F32_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif
        
        extern void MLIB_ShL_SF_F32_wrapper_Output( int32_T* y1, const int32_T u1, const uint16_T u2);
        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("MLIB_ShL_SF_F32_wrapper", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif

        #include "mlib.h"

        void MLIB_ShL_SF_F32_wrapper_Output( int32_T* y1, const int32_T u1, const uint16_T u2) {
            *((tFrac32 *)y1) = MLIB_ShL_F32((tFrac32)(u1), (tU16)(u2));
        }

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %<LibAddToModelSources("%<cFileName>")>
    %else
        %<LibAddToCommonIncludes("mlib.h")>
    %endif
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign u1_val = LibBlockInputSignal(0, "", "", 0)
        %assign u2_val = LibBlockInputSignal(1, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        MLIB_ShL_SF_F32_wrapper_Output(%<y1_ptr>, %<u1_val>, %<u2_val>);
    %else
        %if !LibBlockOutputSignalIsExpr(0)
            %assign retVal = LibBlockOutputSignal(0, "", "", 0)
            %assign f32In1 = LibBlockInputSignal(0, "", "", 0)
            %assign u16In2 = LibBlockInputSignal(1, "", "", 0)
            %% 
            %<retVal> = MLIB_ShL_F32((tFrac32)(%<f32In1>), (tU16)(%<u16In2>));
        %endif
    %endif
%endfunction

%% Function: BlockOutputSignal ============================================
%function BlockOutputSignal (block,system,portIdx,ucv,lcv,idx,retType) void
    %assign f32In1 = LibBlockInputSignal(0, "", "", 0)
    %assign u16In2 = LibBlockInputSignal(1, "", "", 0)
    %% 
    %switch retType
      %case "Signal"
        %if portIdx == 0
          %return "MLIB_ShL_F32((tFrac32)(%<f32In1>), (tU16)(%<u16In2>))"
        %else
          %assign errTxt = "Block output port index not supported: %<portIdx>"
          %<LibBlockReportError(block,errTxt)>
        %endif
      %default
        %assign errTxt = "Unsupported return type: %<retType>"
        %<LibBlockReportError(block,errTxt)>
    %endswitch
%endfunction

%% [EOF]
