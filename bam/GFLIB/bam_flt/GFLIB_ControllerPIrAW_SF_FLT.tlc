%% file : GFLIB_ControllerPIrAW_SF_FLT.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for GFLIB_ControllerPIrAW_SF_FLT
%% 
%% Simulink version      : 9.3 (R2019a) 23-Nov-2018
%% TLC file generated on : 15-Apr-2020 21:02:20

%% Copyright 2019-2020 NXP
%%
%% NXP Confidential. This software is owned or controlled by NXP and may only be used strictly in
%% accordance with the applicable license terms.  By expressly accepting such terms or by
%% downloading, installing, activating and/or otherwise using the software, you are agreeing that
%% you have read, and that you agree to comply with and are bound by, such license terms.  If you
%% do not agree to be bound by the applicable license terms, then you may not retain, install,
%% activate or otherwise use the software.

%implements GFLIB_ControllerPIrAW_SF_FLT "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %assign ver = FEVAL("ver", "simulink")
    %assign factor = 1.0
    %assign slVer = 0.0
    %foreach idx = SIZE(ver.Version)[1]
        %if ISEQUAL(ver.Version[idx], ".")
            %assign factor = factor/10.0
        %else
            %assign slVer = slVer + %<ver.Version[idx]>*factor
        %endif
    %endforeach
    
    %if GenerateErtSFunction==1 && slVer < 6.21
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink Object) may not be used in a model for which an ERT S-Function wrapper is being generated")>
    %endif
    
    %if ExtMode==1 && slVer < 6.3
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a model uses External Mode")>
    %endif
    
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %if slVer < 6.21
            %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a referenced model")>
        %endif
        
        %assign hFileName = FcnGenerateUniqueFileName("GFLIB_ControllerPIrAW_SF_FLT_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif
        
        extern int GFLIB_ControllerPIrAW_SF_FLT_wrapper_allocmem(void** work1BUS, int_T work1BUSWidth);
        extern int GFLIB_ControllerPIrAW_SF_FLT_wrapper_freemem(void** work1BUS);

        extern void GFLIB_ControllerPIrAW_SF_FLT_wrapper_InitializeConditions(const real32_T p3, const real32_T p4, const real32_T p5, const real32_T p6,  void* work1, void* work1BUS,  int32_T* work2, const int32_T p2);
        extern void GFLIB_ControllerPIrAW_SF_FLT_wrapper_Output( real32_T* y1, const real32_T u1,  void* work1, void* work1BUS,  int32_T* work2, const real32_T u2, const real32_T u3, const real32_T u4, const real32_T u5, const real32_T u6, const real32_T u7, const real32_T u8,  real32_T* y2,  real32_T* y3, const int32_T p1, const int32_T p2);
        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("GFLIB_ControllerPIrAW_SF_FLT_wrapper", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <stdlib.h>
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif

        #include "gflib.h"

        #include "SWLIBS_Typedefs.h"
        #include "GFLIB_ControllerPIrAW.h"

        int GFLIB_ControllerPIrAW_SF_FLT_wrapper_allocmem(void** work1BUS, int_T work1BUSWidth) {
            *work1BUS = calloc(sizeof(GFLIB_CONTROLLER_PIAW_R_T_FLT), work1BUSWidth);
            if (*work1BUS==NULL) return -1;
            return 0;
        }
        
        int GFLIB_ControllerPIrAW_SF_FLT_wrapper_freemem(void** work1BUS) {
            if (*work1BUS!=NULL) free(*work1BUS);
            *work1BUS = NULL;
            return 0;
        }

        void GFLIB_ControllerPIrAW_SF_FLT_wrapper_InitializeConditions(const real32_T p3, const real32_T p4, const real32_T p5, const real32_T p6,  void* work1, void* work1BUS,  int32_T* work2, const int32_T p2) {

            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GFLIB_CONTROLLER_PIAW_R_T_FLT *)work1BUS)", "(char *)work1", 0)>

              if ((tS32)1 == (tS32)(p2))
              {
                *((tS32 *)work2) = (tS32)1;
              }
              ((GFLIB_CONTROLLER_PIAW_R_T_FLT *const)(work1BUS))->fltCC1sc = (tFloat)(p5);
              ((GFLIB_CONTROLLER_PIAW_R_T_FLT *const)(work1BUS))->fltCC2sc = (tFloat)(p6);
              ((GFLIB_CONTROLLER_PIAW_R_T_FLT *const)(work1BUS))->fltUpperLimit = (tFloat)(p3);
              ((GFLIB_CONTROLLER_PIAW_R_T_FLT *const)(work1BUS))->fltLowerLimit = (tFloat)(p4);
              GFLIB_ControllerPIrAWInit_FLT((GFLIB_CONTROLLER_PIAW_R_T_FLT *const)(work1BUS));

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(GFLIB_CONTROLLER_PIAW_R_T_FLT *)work1BUS)", 0)>
        }

        void GFLIB_ControllerPIrAW_SF_FLT_wrapper_Output( real32_T* y1, const real32_T u1,  void* work1, void* work1BUS,  int32_T* work2, const real32_T u2, const real32_T u3, const real32_T u4, const real32_T u5, const real32_T u6, const real32_T u7, const real32_T u8,  real32_T* y2,  real32_T* y3, const int32_T p1, const int32_T p2) {

            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GFLIB_CONTROLLER_PIAW_R_T_FLT *)work1BUS)", "(char *)work1", 0)>

            
            if((tS32)2 == (tS32)(p1))
            {
              ((GFLIB_CONTROLLER_PIAW_R_T_FLT *const)(work1BUS))->fltCC1sc = (tFloat)(u7);
              ((GFLIB_CONTROLLER_PIAW_R_T_FLT *const)(work1BUS))->fltCC2sc = (tFloat)(u8);
              ((GFLIB_CONTROLLER_PIAW_R_T_FLT *const)(work1BUS))->fltAcc = (tFloat)(u5);
              ((GFLIB_CONTROLLER_PIAW_R_T_FLT *const)(work1BUS))->fltInErrK1 = (tFloat)(u6);
              ((GFLIB_CONTROLLER_PIAW_R_T_FLT *const)(work1BUS))->fltUpperLimit = (tFloat)(u3);
              ((GFLIB_CONTROLLER_PIAW_R_T_FLT *const)(work1BUS))->fltLowerLimit = (tFloat)(u4);
            }
            if ((tS32)1 == (tS32)(p2))
            {
              if (*(tS32 *)(work2) != (tS32)0)
              {
                *((tS32 *)work2) = (tS32)0;
                GFLIB_ControllerPIrAWSetState_FLT((tFloat)(u2), (GFLIB_CONTROLLER_PIAW_R_T_FLT *const)(work1BUS));
                *y1 = 0.0f;
              }
              else
              {
                *y1 = GFLIB_ControllerPIrAW_FLT((tFloat)(u1), (GFLIB_CONTROLLER_PIAW_R_T_FLT *const)(work1BUS));
              }
            }
            else
            {
              *y1 = GFLIB_ControllerPIrAW_FLT((tFloat)(u1), (GFLIB_CONTROLLER_PIAW_R_T_FLT *const)(work1BUS));
            }
            if((tS32)2 == (tS32)(p1))
            {
              *((tFloat *)y2) = ((GFLIB_CONTROLLER_PIAW_R_T_FLT *const)(work1BUS))->fltAcc;
              *((tFloat *)y3) = ((GFLIB_CONTROLLER_PIAW_R_T_FLT *const)(work1BUS))->fltInErrK1;
            }

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(GFLIB_CONTROLLER_PIAW_R_T_FLT *)work1BUS)", 0)>
        }

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %<LibAddToModelSources("%<cFileName>")>
    %else
        %<LibAddToCommonIncludes("gflib.h")>
        %<LibAddToCommonIncludes("SWLIBS_Typedefs.h")>
        %<LibAddToCommonIncludes("GFLIB_ControllerPIrAW.h")>
    %endif
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign work1BUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (GFLIB_ControllerPIrAW_SF_FLT_wrapper_allocmem(%<work1BUS_addr>, %<LibBlockDWorkWidth(work1)>)!=0) %<LibSetRTModelErrorStatus("\"Memory allocation failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% Function: InitializeConditions =========================================
%function InitializeConditions (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign p3_val = LibBlockParameter(p3, "", "", 0)
        %assign p4_val = LibBlockParameter(p4, "", "", 0)
        %assign p5_val = LibBlockParameter(p5, "", "", 0)
        %assign p6_val = LibBlockParameter(p6, "", "", 0)
        %assign work1_ptr = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 0)
        %assign work2_ptr = LibBlockDWorkAddr(work2, "", "", 0)
        %assign p2_val = LibBlockParameter(p2, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        GFLIB_ControllerPIrAW_SF_FLT_wrapper_InitializeConditions(%<p3_val>, %<p4_val>, %<p5_val>, %<p6_val>, %<work1_ptr>, %<work1BUS_ptr>, %<work2_ptr>, %<p2_val>);
    %else
        %assign fltUpperLimit = LibBlockParameter(p3, "", "", 0)
        %assign fltLowerLimit = LibBlockParameter(p4, "", "", 0)
        %assign fltCC1sc = LibBlockParameter(p5, "", "", 0)
        %assign fltCC2sc = LibBlockParameter(p6, "", "", 0)
        %assign pParam = LibBlockDWorkAddr(work1, "", "", 0)
        %assign s32ResetStates = LibBlockDWork(work2, "", "", 0)
        %assign resetStatesEnable = LibBlockParameter(p2, "", "", 0)
        %% 
        %if FEVAL("strcmp", resetStatesEnable, "1")
          %<s32ResetStates> = (tS32)1;
        %endif
        (%<pParam>)->fltCC1sc = (tFloat)(%<fltCC1sc>);
        (%<pParam>)->fltCC2sc = (tFloat)(%<fltCC2sc>);
        (%<pParam>)->fltUpperLimit = (tFloat)(%<fltUpperLimit>);
        (%<pParam>)->fltLowerLimit = (tFloat)(%<fltLowerLimit>);
        GFLIB_ControllerPIrAWInit_FLT((GFLIB_CONTROLLER_PIAW_R_T_FLT *const)(%<pParam>));
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign u1_val = LibBlockInputSignal(0, "", "", 0)
        %assign work1_ptr = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 0)
        %assign work2_ptr = LibBlockDWorkAddr(work2, "", "", 0)
        %assign u2_val = LibBlockInputSignal(1, "", "", 0)
        %assign u3_val = LibBlockInputSignal(2, "", "", 0)
        %assign u4_val = LibBlockInputSignal(3, "", "", 0)
        %assign u5_val = LibBlockInputSignal(4, "", "", 0)
        %assign u6_val = LibBlockInputSignal(5, "", "", 0)
        %assign u7_val = LibBlockInputSignal(6, "", "", 0)
        %assign u8_val = LibBlockInputSignal(7, "", "", 0)
        %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign y3_ptr = LibBlockOutputSignalAddr(2, "", "", 0)
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign p2_val = LibBlockParameter(p2, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        GFLIB_ControllerPIrAW_SF_FLT_wrapper_Output(%<y1_ptr>, %<u1_val>, %<work1_ptr>, %<work1BUS_ptr>, %<work2_ptr>, %<u2_val>, %<u3_val>, %<u4_val>, %<u5_val>, %<u6_val>, %<u7_val>, %<u8_val>, %<y2_ptr>, %<y3_ptr>, %<p1_val>, %<p2_val>);
    %else
        %assign fltRetVal = LibBlockOutputSignal(0, "", "", 0)
        %assign fltInErr = LibBlockInputSignal(0, "", "", 0)
        %assign pParam = LibBlockDWorkAddr(work1, "", "", 0)
        %assign s32ResetStates = LibBlockDWork(work2, "", "", 0)
        %assign fltControllerPIrAWOut = LibBlockInputSignal(1, "", "", 0)
        %assign fltUpperLimit = LibBlockInputSignal(2, "", "", 0)
        %assign fltLowerLimit = LibBlockInputSignal(3, "", "", 0)
        %assign fltAcc = LibBlockInputSignal(4, "", "", 0)
        %assign fltInErrK1 = LibBlockInputSignal(5, "", "", 0)
        %assign fltCC1sc = LibBlockInputSignal(6, "", "", 0)
        %assign fltCC2sc = LibBlockInputSignal(7, "", "", 0)
        %assign fltAcc_Out = LibBlockOutputSignal(1, "", "", 0)
        %assign fltInErrK1_Out = LibBlockOutputSignal(2, "", "", 0)
        %assign showStates = LibBlockParameter(p1, "", "", 0)
        %assign resetStatesEnable = LibBlockParameter(p2, "", "", 0)
        %% 
        
        %if FEVAL("strcmp", showStates, "2")
          (%<pParam>)->fltCC1sc = (tFloat)(%<fltCC1sc>);
          (%<pParam>)->fltCC2sc = (tFloat)(%<fltCC2sc>);
          (%<pParam>)->fltAcc = (tFloat)(%<fltAcc>);
          (%<pParam>)->fltInErrK1 = (tFloat)(%<fltInErrK1>);
          (%<pParam>)->fltUpperLimit = (tFloat)(%<fltUpperLimit>);
          (%<pParam>)->fltLowerLimit = (tFloat)(%<fltLowerLimit>);
        %endif
        %if FEVAL("strcmp", resetStatesEnable, "1")
          if ((tS32)(%<s32ResetStates>) != (tS32)0)
          {
            %<s32ResetStates> = (tS32)0;
            GFLIB_ControllerPIrAWSetState_FLT((tFloat)(%<fltControllerPIrAWOut>), (GFLIB_CONTROLLER_PIAW_R_T_FLT *const)(%<pParam>));
            %<fltRetVal> = 0.0f;
          }
          else
          {
            %<fltRetVal> = GFLIB_ControllerPIrAW_FLT((tFloat)(%<fltInErr>), (GFLIB_CONTROLLER_PIAW_R_T_FLT *const)(%<pParam>));
          }
        %else
          %<fltRetVal> = GFLIB_ControllerPIrAW_FLT((tFloat)(%<fltInErr>), (GFLIB_CONTROLLER_PIAW_R_T_FLT *const)(%<pParam>));
        %endif
        %if FEVAL("strcmp", showStates, "2")
          %<fltAcc_Out> = (%<pParam>)->fltAcc;
          %<fltInErrK1_Out> = (%<pParam>)->fltInErrK1;
        %endif
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign work1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (GFLIB_ControllerPIrAW_SF_FLT_wrapper_freemem(%<work1BUSBUS_addr>)!=0) %<LibSetRTModelErrorStatus("\"Memory free failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% [EOF]
