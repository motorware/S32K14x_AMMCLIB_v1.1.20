%% file : GFLIB_VLog10_SF_FLT.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for GFLIB_VLog10_SF_FLT
%% 
%% Simulink version      : 9.3 (R2019a) 23-Nov-2018
%% TLC file generated on : 15-Apr-2020 21:04:35

%% Copyright 2019-2020 NXP
%%
%% NXP Confidential. This software is owned or controlled by NXP and may only be used strictly in
%% accordance with the applicable license terms.  By expressly accepting such terms or by
%% downloading, installing, activating and/or otherwise using the software, you are agreeing that
%% you have read, and that you agree to comply with and are bound by, such license terms.  If you
%% do not agree to be bound by the applicable license terms, then you may not retain, install,
%% activate or otherwise use the software.

%implements GFLIB_VLog10_SF_FLT "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %assign ver = FEVAL("ver", "simulink")
    %assign factor = 1.0
    %assign slVer = 0.0
    %foreach idx = SIZE(ver.Version)[1]
        %if ISEQUAL(ver.Version[idx], ".")
            %assign factor = factor/10.0
        %else
            %assign slVer = slVer + %<ver.Version[idx]>*factor
        %endif
    %endforeach
    
    %if GenerateErtSFunction==1 && slVer < 6.21
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink Object) may not be used in a model for which an ERT S-Function wrapper is being generated")>
    %endif
    
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign hFileName = FcnGenerateUniqueFileName("GFLIB_VLog10_SF_FLT_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif
        
        extern void GFLIB_VLog10_SF_FLT_wrapper_Output(const real32_T* u1,  real32_T* y1);
        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("GFLIB_VLog10_SF_FLT_wrapper", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif

        #include "gflib.h"

        void GFLIB_VLog10_SF_FLT_wrapper_Output(const real32_T* u1,  real32_T* y1) {
            %assign u32N = LibBlockInputSignalWidth(0)
            {
              tU32 u32tmpCntVLog10;
              
              if((const tFloat *)(u1) != (tFloat *)(y1))
              {
                /* Copy the input buffer to the output buffer */
                for(u32tmpCntVLog10 = (tU32)0; u32tmpCntVLog10 < (tU32)(%<u32N>); u32tmpCntVLog10++)
                {
                  ((tFloat *)(y1))[u32tmpCntVLog10] = ((const tFloat *)(u1))[u32tmpCntVLog10];
                }
              }
              GFLIB_VLog10_FLT((tFloat *)(y1), (tU32)(%<u32N>), GFLIB_VLOG10_DEFAULT_FLT);
            }
        }

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %<LibAddToModelSources("%<cFileName>")>
    %else
        %<LibAddToCommonIncludes("gflib.h")>
    %endif
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        GFLIB_VLog10_SF_FLT_wrapper_Output(%<u1_ptr>, %<y1_ptr>);
    %else
        %assign pIn = LibBlockInputSignalAddr(0, "", "", 0)
        %assign pOut = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign u32N = LibBlockInputSignalWidth(0)
        %% 
        {
          tU32 u32tmpCntVLog10;
          
        %if pIn != pOut
            if((const tFloat *)(%<pIn>) != (tFloat *)(%<pOut>))
            {
              /* Copy the input buffer to the output buffer */
              for(u32tmpCntVLog10 = (tU32)0; u32tmpCntVLog10 < (tU32)(%<u32N>); u32tmpCntVLog10++)
              {
                (%<pOut>)[u32tmpCntVLog10] = (%<pIn>)[u32tmpCntVLog10];
              }
            }
        %endif 
          GFLIB_VLog10_FLT((tFloat *)(%<pOut>), (tU32)(%<u32N>), GFLIB_VLOG10_DEFAULT_FLT);
        }
    %endif
%endfunction

%% [EOF]
